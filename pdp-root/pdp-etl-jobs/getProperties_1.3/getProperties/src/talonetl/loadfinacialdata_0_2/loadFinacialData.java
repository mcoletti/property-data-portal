// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.2.1.r95165)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package talonetl.loadfinacialdata_0_2;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: loadFinacialData Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.2.1.r95165
 * @status 
 */
public class loadFinacialData implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (key != null) {

				this.setProperty("key", key.toString());

			}

			if (value != null) {

				this.setProperty("value", value.toString());

			}

			if (propUUID != null) {

				this.setProperty("propUUID", propUUID.toString());

			}

			if (talon_Password != null) {

				this.setProperty("talon_Password", talon_Password.toString());

			}

			if (talon_AdditionalParams != null) {

				this.setProperty("talon_AdditionalParams",
						talon_AdditionalParams.toString());

			}

			if (talon_Port != null) {

				this.setProperty("talon_Port", talon_Port.toString());

			}

			if (talon_Database != null) {

				this.setProperty("talon_Database", talon_Database.toString());

			}

			if (talon_Server != null) {

				this.setProperty("talon_Server", talon_Server.toString());

			}

			if (talon_Login != null) {

				this.setProperty("talon_Login", talon_Login.toString());

			}

			if (displayName != null) {

				this.setProperty("displayName", displayName.toString());

			}

		}

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String propUUID;

		public String getPropUUID() {
			return this.propUUID;
		}

		public java.lang.String talon_Password;

		public java.lang.String getTalon_Password() {
			return this.talon_Password;
		}

		public String talon_AdditionalParams;

		public String getTalon_AdditionalParams() {
			return this.talon_AdditionalParams;
		}

		public String talon_Port;

		public String getTalon_Port() {
			return this.talon_Port;
		}

		public String talon_Database;

		public String getTalon_Database() {
			return this.talon_Database;
		}

		public String talon_Server;

		public String getTalon_Server() {
			return this.talon_Server;
		}

		public String talon_Login;

		public String getTalon_Login() {
			return this.talon_Login;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "loadFinacialData";
	private final String projectName = "TALONETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					loadFinacialData.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(loadFinacialData.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tRowGenerator_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

		status = "failure";

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class loadKeyDataStruct implements
			routines.system.IPersistableRow<loadKeyDataStruct> {
		final static byte[] commonByteArrayLock_TALONETL_loadFinacialData = new byte[0];
		static byte[] commonByteArray_TALONETL_loadFinacialData = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String KEY;

		public String getKEY() {
			return this.KEY;
		}

		public String DISPLAY_NAME;

		public String getDISPLAY_NAME() {
			return this.DISPLAY_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final loadKeyDataStruct other = (loadKeyDataStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(loadKeyDataStruct other) {

			other.ID = this.ID;
			other.KEY = this.KEY;
			other.DISPLAY_NAME = this.DISPLAY_NAME;

		}

		public void copyKeysDataTo(loadKeyDataStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_loadFinacialData.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_loadFinacialData.length == 0) {
						commonByteArray_TALONETL_loadFinacialData = new byte[1024];
					} else {
						commonByteArray_TALONETL_loadFinacialData = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_loadFinacialData, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_loadFinacialData, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_loadFinacialData) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.KEY = readString(dis);

					this.DISPLAY_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.KEY, dos);

				// String

				writeString(this.DISPLAY_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",KEY=" + KEY);
			sb.append(",DISPLAY_NAME=" + DISPLAY_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(loadKeyDataStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mewKeyDataStruct implements
			routines.system.IPersistableRow<mewKeyDataStruct> {
		final static byte[] commonByteArrayLock_TALONETL_loadFinacialData = new byte[0];
		static byte[] commonByteArray_TALONETL_loadFinacialData = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_loadFinacialData.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_loadFinacialData.length == 0) {
						commonByteArray_TALONETL_loadFinacialData = new byte[1024];
					} else {
						commonByteArray_TALONETL_loadFinacialData = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_loadFinacialData, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_loadFinacialData, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_loadFinacialData) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.displayName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.displayName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",displayName=" + displayName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mewKeyDataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TALONETL_loadFinacialData = new byte[0];
		static byte[] commonByteArray_TALONETL_loadFinacialData = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String propUUID;

		public String getPropUUID() {
			return this.propUUID;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_loadFinacialData.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_loadFinacialData.length == 0) {
						commonByteArray_TALONETL_loadFinacialData = new byte[1024];
					} else {
						commonByteArray_TALONETL_loadFinacialData = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_loadFinacialData, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_loadFinacialData, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_loadFinacialData) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.propUUID = readString(dis);

					this.displayName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.propUUID, dos);

				// String

				writeString(this.displayName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",propUUID=" + propUUID);
			sb.append(",displayName=" + displayName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				mewKeyDataStruct mewKeyData = new mewKeyDataStruct();
				loadKeyDataStruct loadKeyData = new loadKeyDataStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "FINACIAL_KEY";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlOutput_1) {
					conn_tMysqlOutput_1 = dataSources_tMysqlOutput_1.get("")
							.getConnection();
				} else {
					String dbProperties_tMysqlOutput_1 = context.talon_AdditionalParams;
					String url_tMysqlOutput_1 = null;
					if (dbProperties_tMysqlOutput_1 == null
							|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
						url_tMysqlOutput_1 = "jdbc:mysql://"
								+ context.talon_Server + ":"
								+ context.talon_Port + "/"
								+ context.talon_Database + "?"
								+ "rewriteBatchedStatements=true";
					} else {
						String properties_tMysqlOutput_1 = context.talon_AdditionalParams;
						if (!properties_tMysqlOutput_1
								.contains("rewriteBatchedStatements")) {
							properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
						}

						url_tMysqlOutput_1 = "jdbc:mysql://"
								+ context.talon_Server + ":"
								+ context.talon_Port + "/"
								+ context.talon_Database + "?"
								+ properties_tMysqlOutput_1;
					}
					String dbUser_tMysqlOutput_1 = context.talon_Login;
					String dbPwd_tMysqlOutput_1 = context.talon_Password;
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");
					conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
							url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
							dbPwd_tMysqlOutput_1);
				}

				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 1;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "FINACIAL_KEY"
						+ "` (`ID`,`KEY`,`DISPLAY_NAME`) VALUES (?,?,?)";
				int batchSize_tMysqlOutput_1 = 1;
				int batchSizeCounter_tMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());
				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				loadKeyDataStruct loadKeyData_tmp = new loadKeyDataStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());
				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				mewKeyDataStruct mewKeyData_tmp = new mewKeyDataStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = 1;

				class tRowGenerator_1Randomizer {
					public String getRandomkey() {

						return context.key;

					}

					public Float getRandomvalue() {

						return context.value;

					}

					public String getRandompropUUID() {

						return context.propUUID;

					}

					public String getRandomdisplayName() {

						return context.displayName;

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					row3.key = randtRowGenerator_1.getRandomkey();
					row3.value = randtRowGenerator_1.getRandomvalue();
					row3.propUUID = randtRowGenerator_1.getRandompropUUID();
					row3.displayName = randtRowGenerator_1
							.getRandomdisplayName();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */
					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						mewKeyData = null;

						// # Output table : 'mewKeyData'
						mewKeyData_tmp.key = row3.key;
						mewKeyData_tmp.displayName = row3.displayName;
						mewKeyData = mewKeyData_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "mewKeyData"
					if (mewKeyData != null) {

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							loadKeyData = null;

							// # Output table : 'loadKeyData'
							loadKeyData_tmp.ID = 0;
							loadKeyData_tmp.KEY = mewKeyData.key;
							loadKeyData_tmp.DISPLAY_NAME = mewKeyData.displayName;
							loadKeyData = loadKeyData_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */
						// Start of branch "loadKeyData"
						if (loadKeyData != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							whetherReject_tMysqlOutput_1 = false;
							pstmt_tMysqlOutput_1.setInt(1, loadKeyData.ID);

							if (loadKeyData.KEY == null) {
								pstmt_tMysqlOutput_1.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(2,
										loadKeyData.KEY);
							}

							if (loadKeyData.DISPLAY_NAME == null) {
								pstmt_tMysqlOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(3,
										loadKeyData.DISPLAY_NAME);
							}

							pstmt_tMysqlOutput_1.addBatch();
							nb_line_tMysqlOutput_1++;

							batchSizeCounter_tMysqlOutput_1++;

							if (batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
								try {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									System.err.println(e.getMessage());

								}

								batchSizeCounter_tMysqlOutput_1 = 0;
							}

							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								try {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

								} catch (java.sql.BatchUpdateException e) {

									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}

									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

									System.out.println(e.getMessage());

								}
								conn_tMysqlOutput_1.commit();

								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */

						} // End of branch "loadKeyData"

					} // End of branch "mewKeyData"

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE",
						nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (batchSizeCounter_tMysqlOutput_1 != 0) {
						int countSum_tMysqlOutput_1 = 0;
						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_1 = 0;

				try {
					if (pstmt_tMysqlOutput_1 != null) {
						int countSum_tMysqlOutput_1 = 0;
						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				conn_tMysqlOutput_1.commit();

				conn_tMysqlOutput_1.close();

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRowGenerator_2Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public static class loadPFDataStruct implements
			routines.system.IPersistableRow<loadPFDataStruct> {
		final static byte[] commonByteArrayLock_TALONETL_loadFinacialData = new byte[0];
		static byte[] commonByteArray_TALONETL_loadFinacialData = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public float VALUE;

		public float getVALUE() {
			return this.VALUE;
		}

		public int FINACIAL_KEY_ID;

		public int getFINACIAL_KEY_ID() {
			return this.FINACIAL_KEY_ID;
		}

		public String PROPERTY_DATA_UUID;

		public String getPROPERTY_DATA_UUID() {
			return this.PROPERTY_DATA_UUID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final loadPFDataStruct other = (loadPFDataStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(loadPFDataStruct other) {

			other.ID = this.ID;
			other.VALUE = this.VALUE;
			other.FINACIAL_KEY_ID = this.FINACIAL_KEY_ID;
			other.PROPERTY_DATA_UUID = this.PROPERTY_DATA_UUID;

		}

		public void copyKeysDataTo(loadPFDataStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_loadFinacialData.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_loadFinacialData.length == 0) {
						commonByteArray_TALONETL_loadFinacialData = new byte[1024];
					} else {
						commonByteArray_TALONETL_loadFinacialData = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_loadFinacialData, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_loadFinacialData, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_loadFinacialData) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.VALUE = dis.readFloat();

					this.FINACIAL_KEY_ID = dis.readInt();

					this.PROPERTY_DATA_UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// float

				dos.writeFloat(this.VALUE);

				// int

				dos.writeInt(this.FINACIAL_KEY_ID);

				// String

				writeString(this.PROPERTY_DATA_UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",VALUE=" + String.valueOf(VALUE));
			sb.append(",FINACIAL_KEY_ID=" + String.valueOf(FINACIAL_KEY_ID));
			sb.append(",PROPERTY_DATA_UUID=" + PROPERTY_DATA_UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(loadPFDataStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TALONETL_loadFinacialData = new byte[0];
		static byte[] commonByteArray_TALONETL_loadFinacialData = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String propUUID;

		public String getPropUUID() {
			return this.propUUID;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_loadFinacialData.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_loadFinacialData.length == 0) {
						commonByteArray_TALONETL_loadFinacialData = new byte[1024];
					} else {
						commonByteArray_TALONETL_loadFinacialData = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_loadFinacialData, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_loadFinacialData, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_loadFinacialData) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.propUUID = readString(dis);

					this.displayName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.propUUID, dos);

				// String

				writeString(this.displayName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",propUUID=" + propUUID);
			sb.append(",displayName=" + displayName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tRowGenerator_2Struct implements
			routines.system.IPersistableRow<after_tRowGenerator_2Struct> {
		final static byte[] commonByteArrayLock_TALONETL_loadFinacialData = new byte[0];
		static byte[] commonByteArray_TALONETL_loadFinacialData = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String propUUID;

		public String getPropUUID() {
			return this.propUUID;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_loadFinacialData.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_loadFinacialData.length == 0) {
						commonByteArray_TALONETL_loadFinacialData = new byte[1024];
					} else {
						commonByteArray_TALONETL_loadFinacialData = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_loadFinacialData, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_loadFinacialData, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_loadFinacialData) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.propUUID = readString(dis);

					this.displayName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.propUUID, dos);

				// String

				writeString(this.displayName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",propUUID=" + propUUID);
			sb.append(",displayName=" + displayName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tRowGenerator_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tMysqlInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				loadPFDataStruct loadPFData = new loadPFDataStruct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());
				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "PROPERTY_FINACIAL";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlOutput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlOutput_2) {
					conn_tMysqlOutput_2 = dataSources_tMysqlOutput_2.get("")
							.getConnection();
				} else {
					String dbProperties_tMysqlOutput_2 = context.talon_AdditionalParams;
					String url_tMysqlOutput_2 = null;
					if (dbProperties_tMysqlOutput_2 == null
							|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
						url_tMysqlOutput_2 = "jdbc:mysql://"
								+ context.talon_Server + ":"
								+ context.talon_Port + "/"
								+ context.talon_Database + "?"
								+ "rewriteBatchedStatements=true";
					} else {
						String properties_tMysqlOutput_2 = context.talon_AdditionalParams;
						if (!properties_tMysqlOutput_2
								.contains("rewriteBatchedStatements")) {
							properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
						}

						url_tMysqlOutput_2 = "jdbc:mysql://"
								+ context.talon_Server + ":"
								+ context.talon_Port + "/"
								+ context.talon_Database + "?"
								+ properties_tMysqlOutput_2;
					}
					String dbUser_tMysqlOutput_2 = context.talon_Login;
					String dbPwd_tMysqlOutput_2 = context.talon_Password;
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");
					conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
							url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
							dbPwd_tMysqlOutput_2);
				}

				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 1;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				String insert_tMysqlOutput_2 = "INSERT INTO `"
						+ "PROPERTY_FINACIAL"
						+ "` (`ID`,`VALUE`,`FINACIAL_KEY_ID`,`PROPERTY_DATA_UUID`) VALUES (?,?,?,?)";
				int batchSize_tMysqlOutput_2 = 1;
				int batchSizeCounter_tMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				loadPFDataStruct loadPFData_tmp = new loadPFDataStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tRowGenerator_2 begin ] start
				 */

				ok_Hash.put("tRowGenerator_2", false);
				start_Hash.put("tRowGenerator_2", System.currentTimeMillis());
				currentComponent = "tRowGenerator_2";

				int tos_count_tRowGenerator_2 = 0;

				int nb_line_tRowGenerator_2 = 0;
				int nb_max_row_tRowGenerator_2 = 1;

				class tRowGenerator_2Randomizer {
					public String getRandomkey() {

						return context.key;

					}

					public Float getRandomvalue() {

						return context.value;

					}

					public String getRandompropUUID() {

						return context.propUUID;

					}

					public String getRandomdisplayName() {

						return context.displayName;

					}
				}
				tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();

				for (int itRowGenerator_2 = 0; itRowGenerator_2 < nb_max_row_tRowGenerator_2; itRowGenerator_2++) {
					row1.key = randtRowGenerator_2.getRandomkey();
					row1.value = randtRowGenerator_2.getRandomvalue();
					row1.propUUID = randtRowGenerator_2.getRandompropUUID();
					row1.displayName = randtRowGenerator_2
							.getRandomdisplayName();
					nb_line_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 begin ] stop
					 */
					/**
					 * [tRowGenerator_2 main ] start
					 */

					currentComponent = "tRowGenerator_2";

					tos_count_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row2"
					// /////////////////////////////////////////////

					boolean forceLooprow2 = false;

					row2Struct row2ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_2 = false;

						row2HashKey.KEY = row1.key;

						row2HashKey.hashCodeDirty = true;

						tHash_Lookup_row2.lookup(row2HashKey);

						if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_2 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row2 != null
							&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.KEY = '"
						// + row2HashKey.KEY + "'");
					} // G 071

					row2Struct row2 = null;

					row2Struct fromLookup_row2 = null;
					row2 = row2Default;

					if (tHash_Lookup_row2 != null
							&& tHash_Lookup_row2.hasNext()) { // G 099

						fromLookup_row2 = tHash_Lookup_row2.next();

					} // G 099

					if (fromLookup_row2 != null) {
						row2 = fromLookup_row2;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						loadPFData = null;

						if (!rejectedInnerJoin_tMap_2) {

							// # Output table : 'loadPFData'
							loadPFData_tmp.ID = 0;
							loadPFData_tmp.VALUE = row1.value;
							loadPFData_tmp.FINACIAL_KEY_ID = row2.ID;
							loadPFData_tmp.PROPERTY_DATA_UUID = row1.propUUID;
							loadPFData = loadPFData_tmp;
						} // closing inner join bracket (2)
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "loadPFData"
					if (loadPFData != null) {

						/**
						 * [tMysqlOutput_2 main ] start
						 */

						currentComponent = "tMysqlOutput_2";

						whetherReject_tMysqlOutput_2 = false;
						pstmt_tMysqlOutput_2.setInt(1, loadPFData.ID);

						pstmt_tMysqlOutput_2.setFloat(2, loadPFData.VALUE);

						pstmt_tMysqlOutput_2.setInt(3,
								loadPFData.FINACIAL_KEY_ID);

						if (loadPFData.PROPERTY_DATA_UUID == null) {
							pstmt_tMysqlOutput_2.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_2.setString(4,
									loadPFData.PROPERTY_DATA_UUID);
						}

						pstmt_tMysqlOutput_2.addBatch();
						nb_line_tMysqlOutput_2++;

						batchSizeCounter_tMysqlOutput_2++;

						if (!whetherReject_tMysqlOutput_2) {
						}
						if (batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
							try {
								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
										.executeBatch()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: countEach_tMysqlOutput_2);
								}

								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

							} catch (java.sql.BatchUpdateException e) {

								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: countEach_tMysqlOutput_2);
								}

								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

								System.err.println(e.getMessage());

							}

							batchSizeCounter_tMysqlOutput_2 = 0;
						}

						commitCounter_tMysqlOutput_2++;

						if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

							try {
								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
										.executeBatch()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: countEach_tMysqlOutput_2);
								}

								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

							} catch (java.sql.BatchUpdateException e) {

								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: countEach_tMysqlOutput_2);
								}

								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

								System.out.println(e.getMessage());

							}
							conn_tMysqlOutput_2.commit();

							commitCounter_tMysqlOutput_2 = 0;

						}

						tos_count_tMysqlOutput_2++;

						/**
						 * [tMysqlOutput_2 main ] stop
						 */

					} // End of branch "loadPFData"

					/**
					 * [tRowGenerator_2 end ] start
					 */

					currentComponent = "tRowGenerator_2";

				}
				globalMap.put("tRowGenerator_2_NB_LINE",
						nb_line_tRowGenerator_2);

				ok_Hash.put("tRowGenerator_2", true);
				end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

				/**
				 * [tRowGenerator_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				try {
					if (batchSizeCounter_tMysqlOutput_2 != 0) {
						int countSum_tMysqlOutput_2 = 0;
						for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
								.executeBatch()) {
							countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
									: countEach_tMysqlOutput_2);
						}

						insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_2 = 0;
					for (int countEach_tMysqlOutput_2 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
								: countEach_tMysqlOutput_2);
					}

					insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_2 = 0;

				try {
					if (pstmt_tMysqlOutput_2 != null) {
						int countSum_tMysqlOutput_2 = 0;
						for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
								.executeBatch()) {
							countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
									: countEach_tMysqlOutput_2);
						}

						insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_2 = 0;
					for (int countEach_tMysqlOutput_2 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
								: countEach_tMysqlOutput_2);
					}

					insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				conn_tMysqlOutput_2.commit();

				conn_tMysqlOutput_2.close();

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_2"
			globalMap.put("tHash_Lookup_row2", null);

		}

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out
						.println("*** New Property Financial Data Loaded for:"
								+ context.key + " ****");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_TALONETL_loadFinacialData = new byte[0];
		static byte[] commonByteArray_TALONETL_loadFinacialData = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String KEY;

		public String getKEY() {
			return this.KEY;
		}

		public String DISPLAY_NAME;

		public String getDISPLAY_NAME() {
			return this.DISPLAY_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.KEY == null) ? 0 : this.KEY.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.KEY == null) {
				if (other.KEY != null)
					return false;
			} else if (!this.KEY.equals(other.KEY))
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ID = this.ID;
			other.KEY = this.KEY;
			other.DISPLAY_NAME = this.DISPLAY_NAME;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.KEY = this.KEY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_loadFinacialData.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_loadFinacialData.length == 0) {
						commonByteArray_TALONETL_loadFinacialData = new byte[1024];
					} else {
						commonByteArray_TALONETL_loadFinacialData = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_loadFinacialData, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_loadFinacialData, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_loadFinacialData) {

				try {

					int length = 0;

					this.KEY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.KEY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID = dis.readInt();

				this.DISPLAY_NAME = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ID);

				writeString(this.DISPLAY_NAME, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",KEY=" + KEY);
			sb.append(",DISPLAY_NAME=" + DISPLAY_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.KEY, other.KEY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tMysqlInput_2 - inputs:(after_tRowGenerator_2)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_2 - inputs:(row1,row2) outputs:(loadPFData)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
						.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_2) {
					conn_tMysqlInput_2 = dataSources_tMysqlInput_2.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_2 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_2 = context.talon_Login;
					String dbPwd_tMysqlInput_2 = context.talon_Password;
					conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_2, dbUser_tMysqlInput_2,
							dbPwd_tMysqlInput_2);
				}

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
						.createStatement();

				String dbquery_tMysqlInput_2 = "SELECT    `FINACIAL_KEY`.`ID`,    `FINACIAL_KEY`.`KEY`,    `FINACIAL_KEY`.`DISPLAY_NAME` FROM `FINACIAL_KEY`";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);

				java.sql.ResultSet rs_tMysqlInput_2 = stmt_tMysqlInput_2
						.executeQuery(dbquery_tMysqlInput_2);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
						.getMetaData();
				int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2
						.getColumnCount();

				String tmpContent_tMysqlInput_2 = null;
				while (rs_tMysqlInput_2.next()) {
					nb_line_tMysqlInput_2++;

					if (colQtyInRs_tMysqlInput_2 < 1) {
						row2.ID = 0;
					} else {

						if (rs_tMysqlInput_2.getObject(1) != null) {
							row2.ID = rs_tMysqlInput_2.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 2) {
						row2.KEY = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(2);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.KEY = tmpContent_tMysqlInput_2;
						} else {
							row2.KEY = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 3) {
						row2.DISPLAY_NAME = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(3);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.DISPLAY_NAME = tmpContent_tMysqlInput_2;
						} else {
							row2.DISPLAY_NAME = null;
						}

					}

					/**
					 * [tMysqlInput_2 begin ] stop
					 */
					/**
					 * [tMysqlInput_2 main ] start
					 */

					currentComponent = "tMysqlInput_2";

					tos_count_tMysqlInput_2++;

					/**
					 * [tMysqlInput_2 main ] stop
					 */

					/**
					 * [tAdvancedHash_row2 main ] start
					 */

					currentComponent = "tAdvancedHash_row2";

					row2Struct row2_HashRow = new row2Struct();

					row2_HashRow.ID = row2.ID;

					row2_HashRow.KEY = row2.KEY;

					row2_HashRow.DISPLAY_NAME = row2.DISPLAY_NAME;

					tHash_Lookup_row2.put(row2_HashRow);

					tos_count_tAdvancedHash_row2++;

					/**
					 * [tAdvancedHash_row2 main ] stop
					 */

					/**
					 * [tMysqlInput_2 end ] start
					 */

					currentComponent = "tMysqlInput_2";

				}
				rs_tMysqlInput_2.close();
				stmt_tMysqlInput_2.close();
				conn_tMysqlInput_2.close();

				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final loadFinacialData loadFinacialDataClass = new loadFinacialData();

		int exitCode = loadFinacialDataClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = loadFinacialData.class
					.getClassLoader().getResourceAsStream(
							"talonetl/loadfinacialdata_0_2/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.key = (String) context.getProperty("key");
			try {
				context.value = routines.system.ParserUtils
						.parseTo_Float(context.getProperty("value"));
			} catch (NumberFormatException e) {
				context.value = null;
			}
			context.propUUID = (String) context.getProperty("propUUID");
			context.talon_Password = (java.lang.String) context
					.getProperty("talon_Password");
			context.talon_AdditionalParams = (String) context
					.getProperty("talon_AdditionalParams");
			context.talon_Port = (String) context.getProperty("talon_Port");
			context.talon_Database = (String) context
					.getProperty("talon_Database");
			context.talon_Server = (String) context.getProperty("talon_Server");
			context.talon_Login = (String) context.getProperty("talon_Login");
			context.displayName = (String) context.getProperty("displayName");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("key")) {
				context.key = (String) parentContextMap.get("key");
			}
			if (parentContextMap.containsKey("value")) {
				context.value = (Float) parentContextMap.get("value");
			}
			if (parentContextMap.containsKey("propUUID")) {
				context.propUUID = (String) parentContextMap.get("propUUID");
			}
			if (parentContextMap.containsKey("talon_Password")) {
				context.talon_Password = (java.lang.String) parentContextMap
						.get("talon_Password");
			}
			if (parentContextMap.containsKey("talon_AdditionalParams")) {
				context.talon_AdditionalParams = (String) parentContextMap
						.get("talon_AdditionalParams");
			}
			if (parentContextMap.containsKey("talon_Port")) {
				context.talon_Port = (String) parentContextMap
						.get("talon_Port");
			}
			if (parentContextMap.containsKey("talon_Database")) {
				context.talon_Database = (String) parentContextMap
						.get("talon_Database");
			}
			if (parentContextMap.containsKey("talon_Server")) {
				context.talon_Server = (String) parentContextMap
						.get("talon_Server");
			}
			if (parentContextMap.containsKey("talon_Login")) {
				context.talon_Login = (String) parentContextMap
						.get("talon_Login");
			}
			if (parentContextMap.containsKey("displayName")) {
				context.displayName = (String) parentContextMap
						.get("displayName");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRowGenerator_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRowGenerator_1) {

			e_tRowGenerator_1.printStackTrace();
			globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : loadFinacialData");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 102246 characters generated by Talend Open Studio for Data Integration on the
 * June 18, 2013 6:08:16 AM MDT
 ************************************************************************************************/
