// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.2.1.r95165)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package talonetl.getproperties_1_2;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_3
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;
import java.util.UUID;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: getProperties Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.2.1.r95165
 * @status 
 */
public class getProperties implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (propertySourceUri != null) {

				this.setProperty("propertySourceUri",
						propertySourceUri.toString());

			}

			if (cusomterName != null) {

				this.setProperty("cusomterName", cusomterName.toString());

			}

			if (talon_Password != null) {

				this.setProperty("talon_Password", talon_Password.toString());

			}

			if (talon_AdditionalParams != null) {

				this.setProperty("talon_AdditionalParams",
						talon_AdditionalParams.toString());

			}

			if (talon_Port != null) {

				this.setProperty("talon_Port", talon_Port.toString());

			}

			if (talon_Database != null) {

				this.setProperty("talon_Database", talon_Database.toString());

			}

			if (talon_Server != null) {

				this.setProperty("talon_Server", talon_Server.toString());

			}

			if (talon_Login != null) {

				this.setProperty("talon_Login", talon_Login.toString());

			}

			if (cityStatsInfoApiUri != null) {

				this.setProperty("cityStatsInfoApiUri",
						cityStatsInfoApiUri.toString());

			}

			if (authId != null) {

				this.setProperty("authId", authId.toString());

			}

			if (authToken != null) {

				this.setProperty("authToken", authToken.toString());

			}

		}

		public String propertySourceUri;

		public String getPropertySourceUri() {
			return this.propertySourceUri;
		}

		public String cusomterName;

		public String getCusomterName() {
			return this.cusomterName;
		}

		public java.lang.String talon_Password;

		public java.lang.String getTalon_Password() {
			return this.talon_Password;
		}

		public String talon_AdditionalParams;

		public String getTalon_AdditionalParams() {
			return this.talon_AdditionalParams;
		}

		public String talon_Port;

		public String getTalon_Port() {
			return this.talon_Port;
		}

		public String talon_Database;

		public String getTalon_Database() {
			return this.talon_Database;
		}

		public String talon_Server;

		public String getTalon_Server() {
			return this.talon_Server;
		}

		public String talon_Login;

		public String getTalon_Login() {
			return this.talon_Login;
		}

		public String cityStatsInfoApiUri;

		public String getCityStatsInfoApiUri() {
			return this.cityStatsInfoApiUri;
		}

		public String authId;

		public String getAuthId() {
			return this.authId;
		}

		public String authToken;

		public String getAuthToken() {
			return this.authToken;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "1.2";
	private final String jobName = "getProperties";
	private final String projectName = "TALONETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					getProperties.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(getProperties.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tFileFetch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileFetch_1", System.currentTimeMillis());

		status = "failure";

		tFileFetch_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_3", System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_10", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_12", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJoin_4", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_13", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_5", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJoin_6", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_7", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJoin_5", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJoin_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_1", System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_1", System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_2", System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_5", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_4", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_11", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_10", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_7", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_11", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_8", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJava_2", System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_getCurrentProperties_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHash_getCurrentProperties", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_custData_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_custData", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHash_row11", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHash_row4", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tHash_row6", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileFetch_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public void tFileFetch_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileFetch_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileFetch_1 begin ] start
				 */

				ok_Hash.put("tFileFetch_1", false);
				start_Hash.put("tFileFetch_1", System.currentTimeMillis());
				currentComponent = "tFileFetch_1";

				int tos_count_tFileFetch_1 = 0;

				/**
				 * [tFileFetch_1 begin ] stop
				 */
				/**
				 * [tFileFetch_1 main ] start
				 */

				currentComponent = "tFileFetch_1";

				java.io.InputStream retIS_tFileFetch_1 = null;

				org.apache.commons.httpclient.HttpClient client_tFileFetch_1 = new org.apache.commons.httpclient.HttpClient();
				client_tFileFetch_1.getHttpConnectionManager().getParams()
						.setConnectionTimeout(30000);
				client_tFileFetch_1
						.getParams()
						.setCookiePolicy(
								org.apache.commons.httpclient.cookie.CookiePolicy.DEFAULT);

				org.apache.commons.httpclient.methods.GetMethod method_tFileFetch_1 = new org.apache.commons.httpclient.methods.GetMethod(
						context.propertySourceUri);

				boolean isContinue_tFileFetch_1 = true;
				int status_tFileFetch_1;
				String finalURL_tFileFetch_1 = context.propertySourceUri;

				try { // B_01

					status_tFileFetch_1 = client_tFileFetch_1
							.executeMethod(method_tFileFetch_1);

					if (status_tFileFetch_1 != org.apache.commons.httpclient.HttpStatus.SC_OK) {
						throw new Exception("Method failed: "
								+ method_tFileFetch_1.getStatusLine());
					}

				} catch (Exception e) {

					throw (e);

				}

				if (isContinue_tFileFetch_1) {

					retIS_tFileFetch_1 = method_tFileFetch_1
							.getResponseBodyAsStream();

				} // B_01
				java.io.InputStream streamtFileFetch_1 = (java.io.InputStream) globalMap
						.get("tFileFetch_1_INPUT_STREAM");
				if (streamtFileFetch_1 != null) {
					streamtFileFetch_1.close();
				}
				globalMap.put("tFileFetch_1_INPUT_STREAM", retIS_tFileFetch_1);

				tos_count_tFileFetch_1++;

				/**
				 * [tFileFetch_1 main ] stop
				 */
				/**
				 * [tFileFetch_1 end ] start
				 */

				currentComponent = "tFileFetch_1";

				ok_Hash.put("tFileFetch_1", true);
				end_Hash.put("tFileFetch_1", System.currentTimeMillis());

				/**
				 * [tFileFetch_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileFetch_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_3Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileFetch_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());
				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				System.out.println("***** Loading Main Property Data *****");

				/**
				 * [tJava_3 begin ] stop
				 */
				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */
				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputXML_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class loadZipStruct implements
			routines.system.IPersistableRow<loadZipStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ZIP_CODE;

		public int getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public int CITY_ID;

		public int getCITY_ID() {
			return this.CITY_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ZIP_CODE;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final loadZipStruct other = (loadZipStruct) obj;

			if (this.ZIP_CODE != other.ZIP_CODE)
				return false;

			return true;
		}

		public void copyDataTo(loadZipStruct other) {

			other.ZIP_CODE = this.ZIP_CODE;
			other.CITY_ID = this.CITY_ID;

		}

		public void copyKeysDataTo(loadZipStruct other) {

			other.ZIP_CODE = this.ZIP_CODE;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.ZIP_CODE = dis.readInt();

					this.CITY_ID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ZIP_CODE);

				// int

				dos.writeInt(this.CITY_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ZIP_CODE=" + String.valueOf(ZIP_CODE));
			sb.append(",CITY_ID=" + String.valueOf(CITY_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(loadZipStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ZIP_CODE, other.ZIP_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public int CITY_ID;

		public int getCITY_ID() {
			return this.CITY_ID;
		}

		public Integer zip;

		public Integer getZip() {
			return this.zip;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.CITY_ID = dis.readInt();

					this.zip = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CITY_ID);

				// Integer

				writeInteger(this.zip, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CITY_ID=" + String.valueOf(CITY_ID));
			sb.append(",zip=" + String.valueOf(zip));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CITY_ID;

		public int getCITY_ID() {
			return this.CITY_ID;
		}

		public Integer zip;

		public Integer getZip() {
			return this.zip;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CITY_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.CITY_ID != other.CITY_ID)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.CITY_ID = this.CITY_ID;
			other.zip = this.zip;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.CITY_ID = this.CITY_ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.CITY_ID = dis.readInt();

					this.zip = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CITY_ID);

				// Integer

				writeInteger(this.zip, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CITY_ID=" + String.valueOf(CITY_ID));
			sb.append(",zip=" + String.valueOf(zip));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CITY_ID, other.CITY_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class loadStateStruct implements
			routines.system.IPersistableRow<loadStateStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final loadStateStruct other = (loadStateStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(loadStateStruct other) {

			other.ID = this.ID;
			other.STATE = this.STATE;
			other.FULL_NAME = this.FULL_NAME;

		}

		public void copyKeysDataTo(loadStateStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.STATE = readString(dis);

					this.FULL_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.FULL_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",STATE=" + STATE);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(loadStateStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String state;

		public String getState() {
			return this.state;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("state=" + state);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class loadCityStruct implements
			routines.system.IPersistableRow<loadCityStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String SUMMARY;

		public String getSUMMARY() {
			return this.SUMMARY;
		}

		public String IMAGE_URL;

		public String getIMAGE_URL() {
			return this.IMAGE_URL;
		}

		public int STATE_ID;

		public int getSTATE_ID() {
			return this.STATE_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final loadCityStruct other = (loadCityStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(loadCityStruct other) {

			other.ID = this.ID;
			other.CITY = this.CITY;
			other.SUMMARY = this.SUMMARY;
			other.IMAGE_URL = this.IMAGE_URL;
			other.STATE_ID = this.STATE_ID;

		}

		public void copyKeysDataTo(loadCityStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.CITY = readString(dis);

					this.SUMMARY = readString(dis);

					this.IMAGE_URL = readString(dis);

					this.STATE_ID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.SUMMARY, dos);

				// String

				writeString(this.IMAGE_URL, dos);

				// int

				dos.writeInt(this.STATE_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",CITY=" + CITY);
			sb.append(",SUMMARY=" + SUMMARY);
			sb.append(",IMAGE_URL=" + IMAGE_URL);
			sb.append(",STATE_ID=" + String.valueOf(STATE_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(loadCityStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public Integer zip;

		public Integer getZip() {
			return this.zip;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.city = readString(dis);

					this.state = readString(dis);

					this.zip = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

				// Integer

				writeInteger(this.zip, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("city=" + city);
			sb.append(",state=" + state);
			sb.append(",zip=" + String.valueOf(zip));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class zipRowDataStruct implements
			routines.system.IPersistableRow<zipRowDataStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String city;

		public String getCity() {
			return this.city;
		}

		public Integer zip;

		public Integer getZip() {
			return this.zip;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.city = readString(dis);

					this.zip = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.city, dos);

				// Integer

				writeInteger(this.zip, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("city=" + city);
			sb.append(",zip=" + String.valueOf(zip));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(zipRowDataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class stateInfoStruct implements
			routines.system.IPersistableRow<stateInfoStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String state;

		public String getState() {
			return this.state;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("state=" + state);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(stateInfoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class stateCityStruct implements
			routines.system.IPersistableRow<stateCityStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public Integer zip;

		public Integer getZip() {
			return this.zip;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.city = readString(dis);

					this.state = readString(dis);

					this.zip = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

				// Integer

				writeInteger(this.zip, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("city=" + city);
			sb.append(",state=" + state);
			sb.append(",zip=" + String.valueOf(zip));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(stateCityStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public Integer zip;

		public Integer getZip() {
			return this.zip;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.city = readString(dis);

					this.state = readString(dis);

					this.country = readString(dis);

					this.zip = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.country, dos);

				// Integer

				writeInteger(this.zip, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("city=" + city);
			sb.append(",state=" + state);
			sb.append(",country=" + country);
			sb.append(",zip=" + String.valueOf(zip));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.city = readString(dis);

					this.state = readString(dis);

					this.country = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.country, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("city=" + city);
			sb.append(",state=" + state);
			sb.append(",country=" + country);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class newDataStruct implements
			routines.system.IPersistableRow<newDataStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		public String PROP_NAME;

		public String getPROP_NAME() {
			return this.PROP_NAME;
		}

		public float PRICE;

		public float getPRICE() {
			return this.PRICE;
		}

		public String SQFT;

		public String getSQFT() {
			return this.SQFT;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public float NUM_BEDS;

		public float getNUM_BEDS() {
			return this.NUM_BEDS;
		}

		public float NUM_BATHS;

		public float getNUM_BATHS() {
			return this.NUM_BATHS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public int DATA_SOURCE_ID;

		public int getDATA_SOURCE_ID() {
			return this.DATA_SOURCE_ID;
		}

		public int ZIP_CODE;

		public int getZIP_CODE() {
			return this.ZIP_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final newDataStruct other = (newDataStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(newDataStruct other) {

			other.ID = this.ID;
			other.UUID = this.UUID;
			other.PROP_NAME = this.PROP_NAME;
			other.PRICE = this.PRICE;
			other.SQFT = this.SQFT;
			other.DESCRIPTION = this.DESCRIPTION;
			other.NUM_BEDS = this.NUM_BEDS;
			other.NUM_BATHS = this.NUM_BATHS;
			other.TYPE = this.TYPE;
			other.STATUS = this.STATUS;
			other.DATA_SOURCE_ID = this.DATA_SOURCE_ID;
			other.ZIP_CODE = this.ZIP_CODE;

		}

		public void copyKeysDataTo(newDataStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.UUID = readString(dis);

					this.PROP_NAME = readString(dis);

					this.PRICE = dis.readFloat();

					this.SQFT = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.NUM_BEDS = dis.readFloat();

					this.NUM_BATHS = dis.readFloat();

					this.TYPE = readString(dis);

					this.STATUS = readString(dis);

					this.DATA_SOURCE_ID = dis.readInt();

					this.ZIP_CODE = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.UUID, dos);

				// String

				writeString(this.PROP_NAME, dos);

				// float

				dos.writeFloat(this.PRICE);

				// String

				writeString(this.SQFT, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// float

				dos.writeFloat(this.NUM_BEDS);

				// float

				dos.writeFloat(this.NUM_BATHS);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.STATUS, dos);

				// int

				dos.writeInt(this.DATA_SOURCE_ID);

				// int

				dos.writeInt(this.ZIP_CODE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",UUID=" + UUID);
			sb.append(",PROP_NAME=" + PROP_NAME);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append(",SQFT=" + SQFT);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",NUM_BEDS=" + String.valueOf(NUM_BEDS));
			sb.append(",NUM_BATHS=" + String.valueOf(NUM_BATHS));
			sb.append(",TYPE=" + TYPE);
			sb.append(",STATUS=" + STATUS);
			sb.append(",DATA_SOURCE_ID=" + String.valueOf(DATA_SOURCE_ID));
			sb.append(",ZIP_CODE=" + String.valueOf(ZIP_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(newDataStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String PROP_NAME;

		public String getPROP_NAME() {
			return this.PROP_NAME;
		}

		public float PRICE;

		public float getPRICE() {
			return this.PRICE;
		}

		public String SQFT;

		public String getSQFT() {
			return this.SQFT;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public float NUM_BEDS;

		public float getNUM_BEDS() {
			return this.NUM_BEDS;
		}

		public float NUM_BATHS;

		public float getNUM_BATHS() {
			return this.NUM_BATHS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public int DATA_SOURCE_ID;

		public int getDATA_SOURCE_ID() {
			return this.DATA_SOURCE_ID;
		}

		public String PROP_UUID;

		public String getPROP_UUID() {
			return this.PROP_UUID;
		}

		public Integer ZIP_CODE;

		public Integer getZIP_CODE() {
			return this.ZIP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.PROP_NAME = readString(dis);

					this.PRICE = dis.readFloat();

					this.SQFT = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.NUM_BEDS = dis.readFloat();

					this.NUM_BATHS = dis.readFloat();

					this.TYPE = readString(dis);

					this.STATUS = readString(dis);

					this.DATA_SOURCE_ID = dis.readInt();

					this.PROP_UUID = readString(dis);

					this.ZIP_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PROP_NAME, dos);

				// float

				dos.writeFloat(this.PRICE);

				// String

				writeString(this.SQFT, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// float

				dos.writeFloat(this.NUM_BEDS);

				// float

				dos.writeFloat(this.NUM_BATHS);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.STATUS, dos);

				// int

				dos.writeInt(this.DATA_SOURCE_ID);

				// String

				writeString(this.PROP_UUID, dos);

				// Integer

				writeInteger(this.ZIP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PROP_NAME=" + PROP_NAME);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append(",SQFT=" + SQFT);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",NUM_BEDS=" + String.valueOf(NUM_BEDS));
			sb.append(",NUM_BATHS=" + String.valueOf(NUM_BATHS));
			sb.append(",TYPE=" + TYPE);
			sb.append(",STATUS=" + STATUS);
			sb.append(",DATA_SOURCE_ID=" + String.valueOf(DATA_SOURCE_ID));
			sb.append(",PROP_UUID=" + PROP_UUID);
			sb.append(",ZIP_CODE=" + String.valueOf(ZIP_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String PROP_NAME;

		public String getPROP_NAME() {
			return this.PROP_NAME;
		}

		public float PRICE;

		public float getPRICE() {
			return this.PRICE;
		}

		public String SQFT;

		public String getSQFT() {
			return this.SQFT;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public float NUM_BEDS;

		public float getNUM_BEDS() {
			return this.NUM_BEDS;
		}

		public float NUM_BATHS;

		public float getNUM_BATHS() {
			return this.NUM_BATHS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public int DATA_SOURCE_ID;

		public int getDATA_SOURCE_ID() {
			return this.DATA_SOURCE_ID;
		}

		public Integer ZIP_CODE;

		public Integer getZIP_CODE() {
			return this.ZIP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.PROP_NAME = readString(dis);

					this.PRICE = dis.readFloat();

					this.SQFT = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.NUM_BEDS = dis.readFloat();

					this.NUM_BATHS = dis.readFloat();

					this.TYPE = readString(dis);

					this.STATUS = readString(dis);

					this.DATA_SOURCE_ID = dis.readInt();

					this.ZIP_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PROP_NAME, dos);

				// float

				dos.writeFloat(this.PRICE);

				// String

				writeString(this.SQFT, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// float

				dos.writeFloat(this.NUM_BEDS);

				// float

				dos.writeFloat(this.NUM_BATHS);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.STATUS, dos);

				// int

				dos.writeInt(this.DATA_SOURCE_ID);

				// Integer

				writeInteger(this.ZIP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PROP_NAME=" + PROP_NAME);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append(",SQFT=" + SQFT);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",NUM_BEDS=" + String.valueOf(NUM_BEDS));
			sb.append(",NUM_BATHS=" + String.valueOf(NUM_BATHS));
			sb.append(",TYPE=" + TYPE);
			sb.append(",STATUS=" + STATUS);
			sb.append(",DATA_SOURCE_ID=" + String.valueOf(DATA_SOURCE_ID));
			sb.append(",ZIP_CODE=" + String.valueOf(ZIP_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class loadDataStruct implements
			routines.system.IPersistableRow<loadDataStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String PROP_NAME;

		public String getPROP_NAME() {
			return this.PROP_NAME;
		}

		public float PRICE;

		public float getPRICE() {
			return this.PRICE;
		}

		public String SQFT;

		public String getSQFT() {
			return this.SQFT;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public float NUM_BEDS;

		public float getNUM_BEDS() {
			return this.NUM_BEDS;
		}

		public float NUM_BATHS;

		public float getNUM_BATHS() {
			return this.NUM_BATHS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public int DATA_SOURCE_ID;

		public int getDATA_SOURCE_ID() {
			return this.DATA_SOURCE_ID;
		}

		public Integer ZIP_CODE;

		public Integer getZIP_CODE() {
			return this.ZIP_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.PROP_NAME = readString(dis);

					this.PRICE = dis.readFloat();

					this.SQFT = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.NUM_BEDS = dis.readFloat();

					this.NUM_BATHS = dis.readFloat();

					this.TYPE = readString(dis);

					this.STATUS = readString(dis);

					this.DATA_SOURCE_ID = dis.readInt();

					this.ZIP_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PROP_NAME, dos);

				// float

				dos.writeFloat(this.PRICE);

				// String

				writeString(this.SQFT, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// float

				dos.writeFloat(this.NUM_BEDS);

				// float

				dos.writeFloat(this.NUM_BATHS);

				// String

				writeString(this.TYPE, dos);

				// String

				writeString(this.STATUS, dos);

				// int

				dos.writeInt(this.DATA_SOURCE_ID);

				// Integer

				writeInteger(this.ZIP_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PROP_NAME=" + PROP_NAME);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append(",SQFT=" + SQFT);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",NUM_BEDS=" + String.valueOf(NUM_BEDS));
			sb.append(",NUM_BATHS=" + String.valueOf(NUM_BATHS));
			sb.append(",TYPE=" + TYPE);
			sb.append(",STATUS=" + STATUS);
			sb.append(",DATA_SOURCE_ID=" + String.valueOf(DATA_SOURCE_ID));
			sb.append(",ZIP_CODE=" + String.valueOf(ZIP_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(loadDataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class zipCodeStruct implements
			routines.system.IPersistableRow<zipCodeStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public Integer zipcode__c;

		public Integer getZipcode__c() {
			return this.zipcode__c;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.zipcode__c = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.zipcode__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("zipcode__c=" + String.valueOf(zipcode__c));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(zipCodeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class propertyDataStruct implements
			routines.system.IPersistableRow<propertyDataStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String image_url;

		public String getImage_url() {
			return this.image_url;
		}

		public String image_title;

		public String getImage_title() {
			return this.image_title;
		}

		public String pba__propertytype__c;

		public String getPba__propertytype__c() {
			return this.pba__propertytype__c;
		}

		public String rented_status__c;

		public String getRented_status__c() {
			return this.rented_status__c;
		}

		public Integer zipcode__c;

		public Integer getZipcode__c() {
			return this.zipcode__c;
		}

		public String pba__city_pb__c;

		public String getPba__city_pb__c() {
			return this.pba__city_pb__c;
		}

		public String pba__description_pb__c;

		public String getPba__description_pb__c() {
			return this.pba__description_pb__c;
		}

		public String term_2__c;

		public String getTerm_2__c() {
			return this.term_2__c;
		}

		public String term_1__c;

		public String getTerm_1__c() {
			return this.term_1__c;
		}

		public String pba__status__c;

		public String getPba__status__c() {
			return this.pba__status__c;
		}

		public Integer year_built__c;

		public Integer getYear_built__c() {
			return this.year_built__c;
		}

		public String pba__address_pb__c;

		public String getPba__address_pb__c() {
			return this.pba__address_pb__c;
		}

		public Float financed_net_yield_1__c;

		public Float getFinanced_net_yield_1__c() {
			return this.financed_net_yield_1__c;
		}

		public Float monthly_cash_flow_with_financing_2__c;

		public Float getMonthly_cash_flow_with_financing_2__c() {
			return this.monthly_cash_flow_with_financing_2__c;
		}

		public Float financed_net_yield_2__c;

		public Float getFinanced_net_yield_2__c() {
			return this.financed_net_yield_2__c;
		}

		public Float monthly_cash_flow_with_financing_1__c;

		public Float getMonthly_cash_flow_with_financing_1__c() {
			return this.monthly_cash_flow_with_financing_1__c;
		}

		public Float interest_rate_2__c;

		public Float getInterest_rate_2__c() {
			return this.interest_rate_2__c;
		}

		public Float interest_rate_1__c;

		public Float getInterest_rate_1__c() {
			return this.interest_rate_1__c;
		}

		public Float monthly_cash_flow__c;

		public Float getMonthly_cash_flow__c() {
			return this.monthly_cash_flow__c;
		}

		public Float noi__c;

		public Float getNoi__c() {
			return this.noi__c;
		}

		public Float noi_with_financing_2__c;

		public Float getNoi_with_financing_2__c() {
			return this.noi_with_financing_2__c;
		}

		public Float noi_with_financing_1__c;

		public Float getNoi_with_financing_1__c() {
			return this.noi_with_financing_1__c;
		}

		public Float price_per_ft__c;

		public Float getPrice_per_ft__c() {
			return this.price_per_ft__c;
		}

		public Float price__c;

		public Float getPrice__c() {
			return this.price__c;
		}

		public Float yearly_interest_payment_1__c;

		public Float getYearly_interest_payment_1__c() {
			return this.yearly_interest_payment_1__c;
		}

		public Float monthly_interest_payment_2__c;

		public Float getMonthly_interest_payment_2__c() {
			return this.monthly_interest_payment_2__c;
		}

		public Float interest_payment_1__c;

		public Float getInterest_payment_1__c() {
			return this.interest_payment_1__c;
		}

		public Float down_payment_2__c;

		public Float getDown_payment_2__c() {
			return this.down_payment_2__c;
		}

		public Float down_payment_1__c;

		public Float getDown_payment_1__c() {
			return this.down_payment_1__c;
		}

		public Float cash_net_yield__c;

		public Float getCash_net_yield__c() {
			return this.cash_net_yield__c;
		}

		public Float monthly_management__c;

		public Float getMonthly_management__c() {
			return this.monthly_management__c;
		}

		public Float management__c;

		public Float getManagement__c() {
			return this.management__c;
		}

		public Float monthly_insurance__c;

		public Float getMonthly_insurance__c() {
			return this.monthly_insurance__c;
		}

		public Float insurance__c;

		public Float getInsurance__c() {
			return this.insurance__c;
		}

		public Float taxes__c;

		public Float getTaxes__c() {
			return this.taxes__c;
		}

		public Float monthly_taxes__c;

		public Float getMonthly_taxes__c() {
			return this.monthly_taxes__c;
		}

		public Float monthlyrent__c;

		public Float getMonthlyrent__c() {
			return this.monthlyrent__c;
		}

		public Float annual_rents__c;

		public Float getAnnual_rents__c() {
			return this.annual_rents__c;
		}

		public Float est_of_market_value__c;

		public Float getEst_of_market_value__c() {
			return this.est_of_market_value__c;
		}

		public Float est_value_per_rent_multiplier__c;

		public Float getEst_value_per_rent_multiplier__c() {
			return this.est_value_per_rent_multiplier__c;
		}

		public String estimated_value__c;

		public String getEstimated_value__c() {
			return this.estimated_value__c;
		}

		public Float est_replacement_cost_per_sq_ft__c;

		public Float getEst_replacement_cost_per_sq_ft__c() {
			return this.est_replacement_cost_per_sq_ft__c;
		}

		public Float est_replacement_cost__c;

		public Float getEst_replacement_cost__c() {
			return this.est_replacement_cost__c;
		}

		public Float pba__totalarea_pb__c;

		public Float getPba__totalarea_pb__c() {
			return this.pba__totalarea_pb__c;
		}

		public Float bedrooms__c;

		public Float getBedrooms__c() {
			return this.bedrooms__c;
		}

		public Float bathrooms__c;

		public Float getBathrooms__c() {
			return this.bathrooms__c;
		}

		public String customer;

		public String getCustomer() {
			return this.customer;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.image_url = readString(dis);

					this.image_title = readString(dis);

					this.pba__propertytype__c = readString(dis);

					this.rented_status__c = readString(dis);

					this.zipcode__c = readInteger(dis);

					this.pba__city_pb__c = readString(dis);

					this.pba__description_pb__c = readString(dis);

					this.term_2__c = readString(dis);

					this.term_1__c = readString(dis);

					this.pba__status__c = readString(dis);

					this.year_built__c = readInteger(dis);

					this.pba__address_pb__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.financed_net_yield_1__c = null;
					} else {
						this.financed_net_yield_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow_with_financing_2__c = null;
					} else {
						this.monthly_cash_flow_with_financing_2__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.financed_net_yield_2__c = null;
					} else {
						this.financed_net_yield_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow_with_financing_1__c = null;
					} else {
						this.monthly_cash_flow_with_financing_1__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_rate_2__c = null;
					} else {
						this.interest_rate_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_rate_1__c = null;
					} else {
						this.interest_rate_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow__c = null;
					} else {
						this.monthly_cash_flow__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi__c = null;
					} else {
						this.noi__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi_with_financing_2__c = null;
					} else {
						this.noi_with_financing_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi_with_financing_1__c = null;
					} else {
						this.noi_with_financing_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price_per_ft__c = null;
					} else {
						this.price_per_ft__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price__c = null;
					} else {
						this.price__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.yearly_interest_payment_1__c = null;
					} else {
						this.yearly_interest_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_interest_payment_2__c = null;
					} else {
						this.monthly_interest_payment_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_payment_1__c = null;
					} else {
						this.interest_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.down_payment_2__c = null;
					} else {
						this.down_payment_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.down_payment_1__c = null;
					} else {
						this.down_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cash_net_yield__c = null;
					} else {
						this.cash_net_yield__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_management__c = null;
					} else {
						this.monthly_management__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.management__c = null;
					} else {
						this.management__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_insurance__c = null;
					} else {
						this.monthly_insurance__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.insurance__c = null;
					} else {
						this.insurance__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.taxes__c = null;
					} else {
						this.taxes__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_taxes__c = null;
					} else {
						this.monthly_taxes__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthlyrent__c = null;
					} else {
						this.monthlyrent__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.annual_rents__c = null;
					} else {
						this.annual_rents__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_of_market_value__c = null;
					} else {
						this.est_of_market_value__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_value_per_rent_multiplier__c = null;
					} else {
						this.est_value_per_rent_multiplier__c = dis.readFloat();
					}

					this.estimated_value__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.est_replacement_cost_per_sq_ft__c = null;
					} else {
						this.est_replacement_cost_per_sq_ft__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_replacement_cost__c = null;
					} else {
						this.est_replacement_cost__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pba__totalarea_pb__c = null;
					} else {
						this.pba__totalarea_pb__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bedrooms__c = null;
					} else {
						this.bedrooms__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bathrooms__c = null;
					} else {
						this.bathrooms__c = dis.readFloat();
					}

					this.customer = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.image_url, dos);

				// String

				writeString(this.image_title, dos);

				// String

				writeString(this.pba__propertytype__c, dos);

				// String

				writeString(this.rented_status__c, dos);

				// Integer

				writeInteger(this.zipcode__c, dos);

				// String

				writeString(this.pba__city_pb__c, dos);

				// String

				writeString(this.pba__description_pb__c, dos);

				// String

				writeString(this.term_2__c, dos);

				// String

				writeString(this.term_1__c, dos);

				// String

				writeString(this.pba__status__c, dos);

				// Integer

				writeInteger(this.year_built__c, dos);

				// String

				writeString(this.pba__address_pb__c, dos);

				// Float

				if (this.financed_net_yield_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.financed_net_yield_1__c);
				}

				// Float

				if (this.monthly_cash_flow_with_financing_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow_with_financing_2__c);
				}

				// Float

				if (this.financed_net_yield_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.financed_net_yield_2__c);
				}

				// Float

				if (this.monthly_cash_flow_with_financing_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow_with_financing_1__c);
				}

				// Float

				if (this.interest_rate_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_rate_2__c);
				}

				// Float

				if (this.interest_rate_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_rate_1__c);
				}

				// Float

				if (this.monthly_cash_flow__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow__c);
				}

				// Float

				if (this.noi__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi__c);
				}

				// Float

				if (this.noi_with_financing_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi_with_financing_2__c);
				}

				// Float

				if (this.noi_with_financing_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi_with_financing_1__c);
				}

				// Float

				if (this.price_per_ft__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price_per_ft__c);
				}

				// Float

				if (this.price__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price__c);
				}

				// Float

				if (this.yearly_interest_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.yearly_interest_payment_1__c);
				}

				// Float

				if (this.monthly_interest_payment_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_interest_payment_2__c);
				}

				// Float

				if (this.interest_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_payment_1__c);
				}

				// Float

				if (this.down_payment_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.down_payment_2__c);
				}

				// Float

				if (this.down_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.down_payment_1__c);
				}

				// Float

				if (this.cash_net_yield__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cash_net_yield__c);
				}

				// Float

				if (this.monthly_management__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_management__c);
				}

				// Float

				if (this.management__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.management__c);
				}

				// Float

				if (this.monthly_insurance__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_insurance__c);
				}

				// Float

				if (this.insurance__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.insurance__c);
				}

				// Float

				if (this.taxes__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taxes__c);
				}

				// Float

				if (this.monthly_taxes__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_taxes__c);
				}

				// Float

				if (this.monthlyrent__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthlyrent__c);
				}

				// Float

				if (this.annual_rents__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.annual_rents__c);
				}

				// Float

				if (this.est_of_market_value__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_of_market_value__c);
				}

				// Float

				if (this.est_value_per_rent_multiplier__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_value_per_rent_multiplier__c);
				}

				// String

				writeString(this.estimated_value__c, dos);

				// Float

				if (this.est_replacement_cost_per_sq_ft__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_replacement_cost_per_sq_ft__c);
				}

				// Float

				if (this.est_replacement_cost__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_replacement_cost__c);
				}

				// Float

				if (this.pba__totalarea_pb__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.pba__totalarea_pb__c);
				}

				// Float

				if (this.bedrooms__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.bedrooms__c);
				}

				// Float

				if (this.bathrooms__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.bathrooms__c);
				}

				// String

				writeString(this.customer, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",image_url=" + image_url);
			sb.append(",image_title=" + image_title);
			sb.append(",pba__propertytype__c=" + pba__propertytype__c);
			sb.append(",rented_status__c=" + rented_status__c);
			sb.append(",zipcode__c=" + String.valueOf(zipcode__c));
			sb.append(",pba__city_pb__c=" + pba__city_pb__c);
			sb.append(",pba__description_pb__c=" + pba__description_pb__c);
			sb.append(",term_2__c=" + term_2__c);
			sb.append(",term_1__c=" + term_1__c);
			sb.append(",pba__status__c=" + pba__status__c);
			sb.append(",year_built__c=" + String.valueOf(year_built__c));
			sb.append(",pba__address_pb__c=" + pba__address_pb__c);
			sb.append(",financed_net_yield_1__c="
					+ String.valueOf(financed_net_yield_1__c));
			sb.append(",monthly_cash_flow_with_financing_2__c="
					+ String.valueOf(monthly_cash_flow_with_financing_2__c));
			sb.append(",financed_net_yield_2__c="
					+ String.valueOf(financed_net_yield_2__c));
			sb.append(",monthly_cash_flow_with_financing_1__c="
					+ String.valueOf(monthly_cash_flow_with_financing_1__c));
			sb.append(",interest_rate_2__c="
					+ String.valueOf(interest_rate_2__c));
			sb.append(",interest_rate_1__c="
					+ String.valueOf(interest_rate_1__c));
			sb.append(",monthly_cash_flow__c="
					+ String.valueOf(monthly_cash_flow__c));
			sb.append(",noi__c=" + String.valueOf(noi__c));
			sb.append(",noi_with_financing_2__c="
					+ String.valueOf(noi_with_financing_2__c));
			sb.append(",noi_with_financing_1__c="
					+ String.valueOf(noi_with_financing_1__c));
			sb.append(",price_per_ft__c=" + String.valueOf(price_per_ft__c));
			sb.append(",price__c=" + String.valueOf(price__c));
			sb.append(",yearly_interest_payment_1__c="
					+ String.valueOf(yearly_interest_payment_1__c));
			sb.append(",monthly_interest_payment_2__c="
					+ String.valueOf(monthly_interest_payment_2__c));
			sb.append(",interest_payment_1__c="
					+ String.valueOf(interest_payment_1__c));
			sb.append(",down_payment_2__c=" + String.valueOf(down_payment_2__c));
			sb.append(",down_payment_1__c=" + String.valueOf(down_payment_1__c));
			sb.append(",cash_net_yield__c=" + String.valueOf(cash_net_yield__c));
			sb.append(",monthly_management__c="
					+ String.valueOf(monthly_management__c));
			sb.append(",management__c=" + String.valueOf(management__c));
			sb.append(",monthly_insurance__c="
					+ String.valueOf(monthly_insurance__c));
			sb.append(",insurance__c=" + String.valueOf(insurance__c));
			sb.append(",taxes__c=" + String.valueOf(taxes__c));
			sb.append(",monthly_taxes__c=" + String.valueOf(monthly_taxes__c));
			sb.append(",monthlyrent__c=" + String.valueOf(monthlyrent__c));
			sb.append(",annual_rents__c=" + String.valueOf(annual_rents__c));
			sb.append(",est_of_market_value__c="
					+ String.valueOf(est_of_market_value__c));
			sb.append(",est_value_per_rent_multiplier__c="
					+ String.valueOf(est_value_per_rent_multiplier__c));
			sb.append(",estimated_value__c=" + estimated_value__c);
			sb.append(",est_replacement_cost_per_sq_ft__c="
					+ String.valueOf(est_replacement_cost_per_sq_ft__c));
			sb.append(",est_replacement_cost__c="
					+ String.valueOf(est_replacement_cost__c));
			sb.append(",pba__totalarea_pb__c="
					+ String.valueOf(pba__totalarea_pb__c));
			sb.append(",bedrooms__c=" + String.valueOf(bedrooms__c));
			sb.append(",bathrooms__c=" + String.valueOf(bathrooms__c));
			sb.append(",customer=" + customer);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(propertyDataStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String image_url;

		public String getImage_url() {
			return this.image_url;
		}

		public String image_title;

		public String getImage_title() {
			return this.image_title;
		}

		public String pba__propertytype__c;

		public String getPba__propertytype__c() {
			return this.pba__propertytype__c;
		}

		public String rented_status__c;

		public String getRented_status__c() {
			return this.rented_status__c;
		}

		public Integer zipcode__c;

		public Integer getZipcode__c() {
			return this.zipcode__c;
		}

		public String pba__city_pb__c;

		public String getPba__city_pb__c() {
			return this.pba__city_pb__c;
		}

		public String pba__description_pb__c;

		public String getPba__description_pb__c() {
			return this.pba__description_pb__c;
		}

		public String term_2__c;

		public String getTerm_2__c() {
			return this.term_2__c;
		}

		public String term_1__c;

		public String getTerm_1__c() {
			return this.term_1__c;
		}

		public String pba__status__c;

		public String getPba__status__c() {
			return this.pba__status__c;
		}

		public Integer year_built__c;

		public Integer getYear_built__c() {
			return this.year_built__c;
		}

		public String pba__address_pb__c;

		public String getPba__address_pb__c() {
			return this.pba__address_pb__c;
		}

		public Float financed_net_yield_1__c;

		public Float getFinanced_net_yield_1__c() {
			return this.financed_net_yield_1__c;
		}

		public Float monthly_cash_flow_with_financing_2__c;

		public Float getMonthly_cash_flow_with_financing_2__c() {
			return this.monthly_cash_flow_with_financing_2__c;
		}

		public Float financed_net_yield_2__c;

		public Float getFinanced_net_yield_2__c() {
			return this.financed_net_yield_2__c;
		}

		public Float monthly_cash_flow_with_financing_1__c;

		public Float getMonthly_cash_flow_with_financing_1__c() {
			return this.monthly_cash_flow_with_financing_1__c;
		}

		public Float interest_rate_2__c;

		public Float getInterest_rate_2__c() {
			return this.interest_rate_2__c;
		}

		public Float interest_rate_1__c;

		public Float getInterest_rate_1__c() {
			return this.interest_rate_1__c;
		}

		public Float monthly_cash_flow__c;

		public Float getMonthly_cash_flow__c() {
			return this.monthly_cash_flow__c;
		}

		public Float noi__c;

		public Float getNoi__c() {
			return this.noi__c;
		}

		public Float noi_with_financing_2__c;

		public Float getNoi_with_financing_2__c() {
			return this.noi_with_financing_2__c;
		}

		public Float noi_with_financing_1__c;

		public Float getNoi_with_financing_1__c() {
			return this.noi_with_financing_1__c;
		}

		public Float price_per_ft__c;

		public Float getPrice_per_ft__c() {
			return this.price_per_ft__c;
		}

		public Float price__c;

		public Float getPrice__c() {
			return this.price__c;
		}

		public Float yearly_interest_payment_1__c;

		public Float getYearly_interest_payment_1__c() {
			return this.yearly_interest_payment_1__c;
		}

		public Float monthly_interest_payment_2__c;

		public Float getMonthly_interest_payment_2__c() {
			return this.monthly_interest_payment_2__c;
		}

		public Float interest_payment_1__c;

		public Float getInterest_payment_1__c() {
			return this.interest_payment_1__c;
		}

		public Float down_payment_2__c;

		public Float getDown_payment_2__c() {
			return this.down_payment_2__c;
		}

		public Float down_payment_1__c;

		public Float getDown_payment_1__c() {
			return this.down_payment_1__c;
		}

		public Float cash_net_yield__c;

		public Float getCash_net_yield__c() {
			return this.cash_net_yield__c;
		}

		public Float monthly_management__c;

		public Float getMonthly_management__c() {
			return this.monthly_management__c;
		}

		public Float management__c;

		public Float getManagement__c() {
			return this.management__c;
		}

		public Float monthly_insurance__c;

		public Float getMonthly_insurance__c() {
			return this.monthly_insurance__c;
		}

		public Float insurance__c;

		public Float getInsurance__c() {
			return this.insurance__c;
		}

		public Float taxes__c;

		public Float getTaxes__c() {
			return this.taxes__c;
		}

		public Float monthly_taxes__c;

		public Float getMonthly_taxes__c() {
			return this.monthly_taxes__c;
		}

		public Float monthlyrent__c;

		public Float getMonthlyrent__c() {
			return this.monthlyrent__c;
		}

		public Float annual_rents__c;

		public Float getAnnual_rents__c() {
			return this.annual_rents__c;
		}

		public Float est_of_market_value__c;

		public Float getEst_of_market_value__c() {
			return this.est_of_market_value__c;
		}

		public Float est_value_per_rent_multiplier__c;

		public Float getEst_value_per_rent_multiplier__c() {
			return this.est_value_per_rent_multiplier__c;
		}

		public String estimated_value__c;

		public String getEstimated_value__c() {
			return this.estimated_value__c;
		}

		public Float est_replacement_cost_per_sq_ft__c;

		public Float getEst_replacement_cost_per_sq_ft__c() {
			return this.est_replacement_cost_per_sq_ft__c;
		}

		public Float est_replacement_cost__c;

		public Float getEst_replacement_cost__c() {
			return this.est_replacement_cost__c;
		}

		public Float pba__totalarea_pb__c;

		public Float getPba__totalarea_pb__c() {
			return this.pba__totalarea_pb__c;
		}

		public Float bedrooms__c;

		public Float getBedrooms__c() {
			return this.bedrooms__c;
		}

		public Float bathrooms__c;

		public Float getBathrooms__c() {
			return this.bathrooms__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.image_url = readString(dis);

					this.image_title = readString(dis);

					this.pba__propertytype__c = readString(dis);

					this.rented_status__c = readString(dis);

					this.zipcode__c = readInteger(dis);

					this.pba__city_pb__c = readString(dis);

					this.pba__description_pb__c = readString(dis);

					this.term_2__c = readString(dis);

					this.term_1__c = readString(dis);

					this.pba__status__c = readString(dis);

					this.year_built__c = readInteger(dis);

					this.pba__address_pb__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.financed_net_yield_1__c = null;
					} else {
						this.financed_net_yield_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow_with_financing_2__c = null;
					} else {
						this.monthly_cash_flow_with_financing_2__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.financed_net_yield_2__c = null;
					} else {
						this.financed_net_yield_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow_with_financing_1__c = null;
					} else {
						this.monthly_cash_flow_with_financing_1__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_rate_2__c = null;
					} else {
						this.interest_rate_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_rate_1__c = null;
					} else {
						this.interest_rate_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow__c = null;
					} else {
						this.monthly_cash_flow__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi__c = null;
					} else {
						this.noi__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi_with_financing_2__c = null;
					} else {
						this.noi_with_financing_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi_with_financing_1__c = null;
					} else {
						this.noi_with_financing_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price_per_ft__c = null;
					} else {
						this.price_per_ft__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price__c = null;
					} else {
						this.price__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.yearly_interest_payment_1__c = null;
					} else {
						this.yearly_interest_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_interest_payment_2__c = null;
					} else {
						this.monthly_interest_payment_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_payment_1__c = null;
					} else {
						this.interest_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.down_payment_2__c = null;
					} else {
						this.down_payment_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.down_payment_1__c = null;
					} else {
						this.down_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cash_net_yield__c = null;
					} else {
						this.cash_net_yield__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_management__c = null;
					} else {
						this.monthly_management__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.management__c = null;
					} else {
						this.management__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_insurance__c = null;
					} else {
						this.monthly_insurance__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.insurance__c = null;
					} else {
						this.insurance__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.taxes__c = null;
					} else {
						this.taxes__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_taxes__c = null;
					} else {
						this.monthly_taxes__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthlyrent__c = null;
					} else {
						this.monthlyrent__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.annual_rents__c = null;
					} else {
						this.annual_rents__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_of_market_value__c = null;
					} else {
						this.est_of_market_value__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_value_per_rent_multiplier__c = null;
					} else {
						this.est_value_per_rent_multiplier__c = dis.readFloat();
					}

					this.estimated_value__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.est_replacement_cost_per_sq_ft__c = null;
					} else {
						this.est_replacement_cost_per_sq_ft__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_replacement_cost__c = null;
					} else {
						this.est_replacement_cost__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pba__totalarea_pb__c = null;
					} else {
						this.pba__totalarea_pb__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bedrooms__c = null;
					} else {
						this.bedrooms__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bathrooms__c = null;
					} else {
						this.bathrooms__c = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.image_url, dos);

				// String

				writeString(this.image_title, dos);

				// String

				writeString(this.pba__propertytype__c, dos);

				// String

				writeString(this.rented_status__c, dos);

				// Integer

				writeInteger(this.zipcode__c, dos);

				// String

				writeString(this.pba__city_pb__c, dos);

				// String

				writeString(this.pba__description_pb__c, dos);

				// String

				writeString(this.term_2__c, dos);

				// String

				writeString(this.term_1__c, dos);

				// String

				writeString(this.pba__status__c, dos);

				// Integer

				writeInteger(this.year_built__c, dos);

				// String

				writeString(this.pba__address_pb__c, dos);

				// Float

				if (this.financed_net_yield_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.financed_net_yield_1__c);
				}

				// Float

				if (this.monthly_cash_flow_with_financing_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow_with_financing_2__c);
				}

				// Float

				if (this.financed_net_yield_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.financed_net_yield_2__c);
				}

				// Float

				if (this.monthly_cash_flow_with_financing_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow_with_financing_1__c);
				}

				// Float

				if (this.interest_rate_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_rate_2__c);
				}

				// Float

				if (this.interest_rate_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_rate_1__c);
				}

				// Float

				if (this.monthly_cash_flow__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow__c);
				}

				// Float

				if (this.noi__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi__c);
				}

				// Float

				if (this.noi_with_financing_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi_with_financing_2__c);
				}

				// Float

				if (this.noi_with_financing_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi_with_financing_1__c);
				}

				// Float

				if (this.price_per_ft__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price_per_ft__c);
				}

				// Float

				if (this.price__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price__c);
				}

				// Float

				if (this.yearly_interest_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.yearly_interest_payment_1__c);
				}

				// Float

				if (this.monthly_interest_payment_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_interest_payment_2__c);
				}

				// Float

				if (this.interest_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_payment_1__c);
				}

				// Float

				if (this.down_payment_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.down_payment_2__c);
				}

				// Float

				if (this.down_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.down_payment_1__c);
				}

				// Float

				if (this.cash_net_yield__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cash_net_yield__c);
				}

				// Float

				if (this.monthly_management__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_management__c);
				}

				// Float

				if (this.management__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.management__c);
				}

				// Float

				if (this.monthly_insurance__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_insurance__c);
				}

				// Float

				if (this.insurance__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.insurance__c);
				}

				// Float

				if (this.taxes__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taxes__c);
				}

				// Float

				if (this.monthly_taxes__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_taxes__c);
				}

				// Float

				if (this.monthlyrent__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthlyrent__c);
				}

				// Float

				if (this.annual_rents__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.annual_rents__c);
				}

				// Float

				if (this.est_of_market_value__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_of_market_value__c);
				}

				// Float

				if (this.est_value_per_rent_multiplier__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_value_per_rent_multiplier__c);
				}

				// String

				writeString(this.estimated_value__c, dos);

				// Float

				if (this.est_replacement_cost_per_sq_ft__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_replacement_cost_per_sq_ft__c);
				}

				// Float

				if (this.est_replacement_cost__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_replacement_cost__c);
				}

				// Float

				if (this.pba__totalarea_pb__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.pba__totalarea_pb__c);
				}

				// Float

				if (this.bedrooms__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.bedrooms__c);
				}

				// Float

				if (this.bathrooms__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.bathrooms__c);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",image_url=" + image_url);
			sb.append(",image_title=" + image_title);
			sb.append(",pba__propertytype__c=" + pba__propertytype__c);
			sb.append(",rented_status__c=" + rented_status__c);
			sb.append(",zipcode__c=" + String.valueOf(zipcode__c));
			sb.append(",pba__city_pb__c=" + pba__city_pb__c);
			sb.append(",pba__description_pb__c=" + pba__description_pb__c);
			sb.append(",term_2__c=" + term_2__c);
			sb.append(",term_1__c=" + term_1__c);
			sb.append(",pba__status__c=" + pba__status__c);
			sb.append(",year_built__c=" + String.valueOf(year_built__c));
			sb.append(",pba__address_pb__c=" + pba__address_pb__c);
			sb.append(",financed_net_yield_1__c="
					+ String.valueOf(financed_net_yield_1__c));
			sb.append(",monthly_cash_flow_with_financing_2__c="
					+ String.valueOf(monthly_cash_flow_with_financing_2__c));
			sb.append(",financed_net_yield_2__c="
					+ String.valueOf(financed_net_yield_2__c));
			sb.append(",monthly_cash_flow_with_financing_1__c="
					+ String.valueOf(monthly_cash_flow_with_financing_1__c));
			sb.append(",interest_rate_2__c="
					+ String.valueOf(interest_rate_2__c));
			sb.append(",interest_rate_1__c="
					+ String.valueOf(interest_rate_1__c));
			sb.append(",monthly_cash_flow__c="
					+ String.valueOf(monthly_cash_flow__c));
			sb.append(",noi__c=" + String.valueOf(noi__c));
			sb.append(",noi_with_financing_2__c="
					+ String.valueOf(noi_with_financing_2__c));
			sb.append(",noi_with_financing_1__c="
					+ String.valueOf(noi_with_financing_1__c));
			sb.append(",price_per_ft__c=" + String.valueOf(price_per_ft__c));
			sb.append(",price__c=" + String.valueOf(price__c));
			sb.append(",yearly_interest_payment_1__c="
					+ String.valueOf(yearly_interest_payment_1__c));
			sb.append(",monthly_interest_payment_2__c="
					+ String.valueOf(monthly_interest_payment_2__c));
			sb.append(",interest_payment_1__c="
					+ String.valueOf(interest_payment_1__c));
			sb.append(",down_payment_2__c=" + String.valueOf(down_payment_2__c));
			sb.append(",down_payment_1__c=" + String.valueOf(down_payment_1__c));
			sb.append(",cash_net_yield__c=" + String.valueOf(cash_net_yield__c));
			sb.append(",monthly_management__c="
					+ String.valueOf(monthly_management__c));
			sb.append(",management__c=" + String.valueOf(management__c));
			sb.append(",monthly_insurance__c="
					+ String.valueOf(monthly_insurance__c));
			sb.append(",insurance__c=" + String.valueOf(insurance__c));
			sb.append(",taxes__c=" + String.valueOf(taxes__c));
			sb.append(",monthly_taxes__c=" + String.valueOf(monthly_taxes__c));
			sb.append(",monthlyrent__c=" + String.valueOf(monthlyrent__c));
			sb.append(",annual_rents__c=" + String.valueOf(annual_rents__c));
			sb.append(",est_of_market_value__c="
					+ String.valueOf(est_of_market_value__c));
			sb.append(",est_value_per_rent_multiplier__c="
					+ String.valueOf(est_value_per_rent_multiplier__c));
			sb.append(",estimated_value__c=" + estimated_value__c);
			sb.append(",est_replacement_cost_per_sq_ft__c="
					+ String.valueOf(est_replacement_cost_per_sq_ft__c));
			sb.append(",est_replacement_cost__c="
					+ String.valueOf(est_replacement_cost__c));
			sb.append(",pba__totalarea_pb__c="
					+ String.valueOf(pba__totalarea_pb__c));
			sb.append(",bedrooms__c=" + String.valueOf(bedrooms__c));
			sb.append(",bathrooms__c=" + String.valueOf(bathrooms__c));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputXML_1Struct implements
			routines.system.IPersistableRow<after_tFileInputXML_1Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String image_url;

		public String getImage_url() {
			return this.image_url;
		}

		public String image_title;

		public String getImage_title() {
			return this.image_title;
		}

		public String pba__propertytype__c;

		public String getPba__propertytype__c() {
			return this.pba__propertytype__c;
		}

		public String rented_status__c;

		public String getRented_status__c() {
			return this.rented_status__c;
		}

		public Integer zipcode__c;

		public Integer getZipcode__c() {
			return this.zipcode__c;
		}

		public String pba__city_pb__c;

		public String getPba__city_pb__c() {
			return this.pba__city_pb__c;
		}

		public String pba__description_pb__c;

		public String getPba__description_pb__c() {
			return this.pba__description_pb__c;
		}

		public String term_2__c;

		public String getTerm_2__c() {
			return this.term_2__c;
		}

		public String term_1__c;

		public String getTerm_1__c() {
			return this.term_1__c;
		}

		public String pba__status__c;

		public String getPba__status__c() {
			return this.pba__status__c;
		}

		public Integer year_built__c;

		public Integer getYear_built__c() {
			return this.year_built__c;
		}

		public String pba__address_pb__c;

		public String getPba__address_pb__c() {
			return this.pba__address_pb__c;
		}

		public Float financed_net_yield_1__c;

		public Float getFinanced_net_yield_1__c() {
			return this.financed_net_yield_1__c;
		}

		public Float monthly_cash_flow_with_financing_2__c;

		public Float getMonthly_cash_flow_with_financing_2__c() {
			return this.monthly_cash_flow_with_financing_2__c;
		}

		public Float financed_net_yield_2__c;

		public Float getFinanced_net_yield_2__c() {
			return this.financed_net_yield_2__c;
		}

		public Float monthly_cash_flow_with_financing_1__c;

		public Float getMonthly_cash_flow_with_financing_1__c() {
			return this.monthly_cash_flow_with_financing_1__c;
		}

		public Float interest_rate_2__c;

		public Float getInterest_rate_2__c() {
			return this.interest_rate_2__c;
		}

		public Float interest_rate_1__c;

		public Float getInterest_rate_1__c() {
			return this.interest_rate_1__c;
		}

		public Float monthly_cash_flow__c;

		public Float getMonthly_cash_flow__c() {
			return this.monthly_cash_flow__c;
		}

		public Float noi__c;

		public Float getNoi__c() {
			return this.noi__c;
		}

		public Float noi_with_financing_2__c;

		public Float getNoi_with_financing_2__c() {
			return this.noi_with_financing_2__c;
		}

		public Float noi_with_financing_1__c;

		public Float getNoi_with_financing_1__c() {
			return this.noi_with_financing_1__c;
		}

		public Float price_per_ft__c;

		public Float getPrice_per_ft__c() {
			return this.price_per_ft__c;
		}

		public Float price__c;

		public Float getPrice__c() {
			return this.price__c;
		}

		public Float yearly_interest_payment_1__c;

		public Float getYearly_interest_payment_1__c() {
			return this.yearly_interest_payment_1__c;
		}

		public Float monthly_interest_payment_2__c;

		public Float getMonthly_interest_payment_2__c() {
			return this.monthly_interest_payment_2__c;
		}

		public Float interest_payment_1__c;

		public Float getInterest_payment_1__c() {
			return this.interest_payment_1__c;
		}

		public Float down_payment_2__c;

		public Float getDown_payment_2__c() {
			return this.down_payment_2__c;
		}

		public Float down_payment_1__c;

		public Float getDown_payment_1__c() {
			return this.down_payment_1__c;
		}

		public Float cash_net_yield__c;

		public Float getCash_net_yield__c() {
			return this.cash_net_yield__c;
		}

		public Float monthly_management__c;

		public Float getMonthly_management__c() {
			return this.monthly_management__c;
		}

		public Float management__c;

		public Float getManagement__c() {
			return this.management__c;
		}

		public Float monthly_insurance__c;

		public Float getMonthly_insurance__c() {
			return this.monthly_insurance__c;
		}

		public Float insurance__c;

		public Float getInsurance__c() {
			return this.insurance__c;
		}

		public Float taxes__c;

		public Float getTaxes__c() {
			return this.taxes__c;
		}

		public Float monthly_taxes__c;

		public Float getMonthly_taxes__c() {
			return this.monthly_taxes__c;
		}

		public Float monthlyrent__c;

		public Float getMonthlyrent__c() {
			return this.monthlyrent__c;
		}

		public Float annual_rents__c;

		public Float getAnnual_rents__c() {
			return this.annual_rents__c;
		}

		public Float est_of_market_value__c;

		public Float getEst_of_market_value__c() {
			return this.est_of_market_value__c;
		}

		public Float est_value_per_rent_multiplier__c;

		public Float getEst_value_per_rent_multiplier__c() {
			return this.est_value_per_rent_multiplier__c;
		}

		public String estimated_value__c;

		public String getEstimated_value__c() {
			return this.estimated_value__c;
		}

		public Float est_replacement_cost_per_sq_ft__c;

		public Float getEst_replacement_cost_per_sq_ft__c() {
			return this.est_replacement_cost_per_sq_ft__c;
		}

		public Float est_replacement_cost__c;

		public Float getEst_replacement_cost__c() {
			return this.est_replacement_cost__c;
		}

		public Float pba__totalarea_pb__c;

		public Float getPba__totalarea_pb__c() {
			return this.pba__totalarea_pb__c;
		}

		public Float bedrooms__c;

		public Float getBedrooms__c() {
			return this.bedrooms__c;
		}

		public Float bathrooms__c;

		public Float getBathrooms__c() {
			return this.bathrooms__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.image_url = readString(dis);

					this.image_title = readString(dis);

					this.pba__propertytype__c = readString(dis);

					this.rented_status__c = readString(dis);

					this.zipcode__c = readInteger(dis);

					this.pba__city_pb__c = readString(dis);

					this.pba__description_pb__c = readString(dis);

					this.term_2__c = readString(dis);

					this.term_1__c = readString(dis);

					this.pba__status__c = readString(dis);

					this.year_built__c = readInteger(dis);

					this.pba__address_pb__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.financed_net_yield_1__c = null;
					} else {
						this.financed_net_yield_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow_with_financing_2__c = null;
					} else {
						this.monthly_cash_flow_with_financing_2__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.financed_net_yield_2__c = null;
					} else {
						this.financed_net_yield_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow_with_financing_1__c = null;
					} else {
						this.monthly_cash_flow_with_financing_1__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_rate_2__c = null;
					} else {
						this.interest_rate_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_rate_1__c = null;
					} else {
						this.interest_rate_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow__c = null;
					} else {
						this.monthly_cash_flow__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi__c = null;
					} else {
						this.noi__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi_with_financing_2__c = null;
					} else {
						this.noi_with_financing_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi_with_financing_1__c = null;
					} else {
						this.noi_with_financing_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price_per_ft__c = null;
					} else {
						this.price_per_ft__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price__c = null;
					} else {
						this.price__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.yearly_interest_payment_1__c = null;
					} else {
						this.yearly_interest_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_interest_payment_2__c = null;
					} else {
						this.monthly_interest_payment_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_payment_1__c = null;
					} else {
						this.interest_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.down_payment_2__c = null;
					} else {
						this.down_payment_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.down_payment_1__c = null;
					} else {
						this.down_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cash_net_yield__c = null;
					} else {
						this.cash_net_yield__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_management__c = null;
					} else {
						this.monthly_management__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.management__c = null;
					} else {
						this.management__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_insurance__c = null;
					} else {
						this.monthly_insurance__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.insurance__c = null;
					} else {
						this.insurance__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.taxes__c = null;
					} else {
						this.taxes__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_taxes__c = null;
					} else {
						this.monthly_taxes__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthlyrent__c = null;
					} else {
						this.monthlyrent__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.annual_rents__c = null;
					} else {
						this.annual_rents__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_of_market_value__c = null;
					} else {
						this.est_of_market_value__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_value_per_rent_multiplier__c = null;
					} else {
						this.est_value_per_rent_multiplier__c = dis.readFloat();
					}

					this.estimated_value__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.est_replacement_cost_per_sq_ft__c = null;
					} else {
						this.est_replacement_cost_per_sq_ft__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_replacement_cost__c = null;
					} else {
						this.est_replacement_cost__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pba__totalarea_pb__c = null;
					} else {
						this.pba__totalarea_pb__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bedrooms__c = null;
					} else {
						this.bedrooms__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bathrooms__c = null;
					} else {
						this.bathrooms__c = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.image_url, dos);

				// String

				writeString(this.image_title, dos);

				// String

				writeString(this.pba__propertytype__c, dos);

				// String

				writeString(this.rented_status__c, dos);

				// Integer

				writeInteger(this.zipcode__c, dos);

				// String

				writeString(this.pba__city_pb__c, dos);

				// String

				writeString(this.pba__description_pb__c, dos);

				// String

				writeString(this.term_2__c, dos);

				// String

				writeString(this.term_1__c, dos);

				// String

				writeString(this.pba__status__c, dos);

				// Integer

				writeInteger(this.year_built__c, dos);

				// String

				writeString(this.pba__address_pb__c, dos);

				// Float

				if (this.financed_net_yield_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.financed_net_yield_1__c);
				}

				// Float

				if (this.monthly_cash_flow_with_financing_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow_with_financing_2__c);
				}

				// Float

				if (this.financed_net_yield_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.financed_net_yield_2__c);
				}

				// Float

				if (this.monthly_cash_flow_with_financing_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow_with_financing_1__c);
				}

				// Float

				if (this.interest_rate_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_rate_2__c);
				}

				// Float

				if (this.interest_rate_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_rate_1__c);
				}

				// Float

				if (this.monthly_cash_flow__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow__c);
				}

				// Float

				if (this.noi__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi__c);
				}

				// Float

				if (this.noi_with_financing_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi_with_financing_2__c);
				}

				// Float

				if (this.noi_with_financing_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi_with_financing_1__c);
				}

				// Float

				if (this.price_per_ft__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price_per_ft__c);
				}

				// Float

				if (this.price__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price__c);
				}

				// Float

				if (this.yearly_interest_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.yearly_interest_payment_1__c);
				}

				// Float

				if (this.monthly_interest_payment_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_interest_payment_2__c);
				}

				// Float

				if (this.interest_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_payment_1__c);
				}

				// Float

				if (this.down_payment_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.down_payment_2__c);
				}

				// Float

				if (this.down_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.down_payment_1__c);
				}

				// Float

				if (this.cash_net_yield__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cash_net_yield__c);
				}

				// Float

				if (this.monthly_management__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_management__c);
				}

				// Float

				if (this.management__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.management__c);
				}

				// Float

				if (this.monthly_insurance__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_insurance__c);
				}

				// Float

				if (this.insurance__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.insurance__c);
				}

				// Float

				if (this.taxes__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taxes__c);
				}

				// Float

				if (this.monthly_taxes__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_taxes__c);
				}

				// Float

				if (this.monthlyrent__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthlyrent__c);
				}

				// Float

				if (this.annual_rents__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.annual_rents__c);
				}

				// Float

				if (this.est_of_market_value__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_of_market_value__c);
				}

				// Float

				if (this.est_value_per_rent_multiplier__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_value_per_rent_multiplier__c);
				}

				// String

				writeString(this.estimated_value__c, dos);

				// Float

				if (this.est_replacement_cost_per_sq_ft__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_replacement_cost_per_sq_ft__c);
				}

				// Float

				if (this.est_replacement_cost__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_replacement_cost__c);
				}

				// Float

				if (this.pba__totalarea_pb__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.pba__totalarea_pb__c);
				}

				// Float

				if (this.bedrooms__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.bedrooms__c);
				}

				// Float

				if (this.bathrooms__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.bathrooms__c);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",image_url=" + image_url);
			sb.append(",image_title=" + image_title);
			sb.append(",pba__propertytype__c=" + pba__propertytype__c);
			sb.append(",rented_status__c=" + rented_status__c);
			sb.append(",zipcode__c=" + String.valueOf(zipcode__c));
			sb.append(",pba__city_pb__c=" + pba__city_pb__c);
			sb.append(",pba__description_pb__c=" + pba__description_pb__c);
			sb.append(",term_2__c=" + term_2__c);
			sb.append(",term_1__c=" + term_1__c);
			sb.append(",pba__status__c=" + pba__status__c);
			sb.append(",year_built__c=" + String.valueOf(year_built__c));
			sb.append(",pba__address_pb__c=" + pba__address_pb__c);
			sb.append(",financed_net_yield_1__c="
					+ String.valueOf(financed_net_yield_1__c));
			sb.append(",monthly_cash_flow_with_financing_2__c="
					+ String.valueOf(monthly_cash_flow_with_financing_2__c));
			sb.append(",financed_net_yield_2__c="
					+ String.valueOf(financed_net_yield_2__c));
			sb.append(",monthly_cash_flow_with_financing_1__c="
					+ String.valueOf(monthly_cash_flow_with_financing_1__c));
			sb.append(",interest_rate_2__c="
					+ String.valueOf(interest_rate_2__c));
			sb.append(",interest_rate_1__c="
					+ String.valueOf(interest_rate_1__c));
			sb.append(",monthly_cash_flow__c="
					+ String.valueOf(monthly_cash_flow__c));
			sb.append(",noi__c=" + String.valueOf(noi__c));
			sb.append(",noi_with_financing_2__c="
					+ String.valueOf(noi_with_financing_2__c));
			sb.append(",noi_with_financing_1__c="
					+ String.valueOf(noi_with_financing_1__c));
			sb.append(",price_per_ft__c=" + String.valueOf(price_per_ft__c));
			sb.append(",price__c=" + String.valueOf(price__c));
			sb.append(",yearly_interest_payment_1__c="
					+ String.valueOf(yearly_interest_payment_1__c));
			sb.append(",monthly_interest_payment_2__c="
					+ String.valueOf(monthly_interest_payment_2__c));
			sb.append(",interest_payment_1__c="
					+ String.valueOf(interest_payment_1__c));
			sb.append(",down_payment_2__c=" + String.valueOf(down_payment_2__c));
			sb.append(",down_payment_1__c=" + String.valueOf(down_payment_1__c));
			sb.append(",cash_net_yield__c=" + String.valueOf(cash_net_yield__c));
			sb.append(",monthly_management__c="
					+ String.valueOf(monthly_management__c));
			sb.append(",management__c=" + String.valueOf(management__c));
			sb.append(",monthly_insurance__c="
					+ String.valueOf(monthly_insurance__c));
			sb.append(",insurance__c=" + String.valueOf(insurance__c));
			sb.append(",taxes__c=" + String.valueOf(taxes__c));
			sb.append(",monthly_taxes__c=" + String.valueOf(monthly_taxes__c));
			sb.append(",monthlyrent__c=" + String.valueOf(monthlyrent__c));
			sb.append(",annual_rents__c=" + String.valueOf(annual_rents__c));
			sb.append(",est_of_market_value__c="
					+ String.valueOf(est_of_market_value__c));
			sb.append(",est_value_per_rent_multiplier__c="
					+ String.valueOf(est_value_per_rent_multiplier__c));
			sb.append(",estimated_value__c=" + estimated_value__c);
			sb.append(",est_replacement_cost_per_sq_ft__c="
					+ String.valueOf(est_replacement_cost_per_sq_ft__c));
			sb.append(",est_replacement_cost__c="
					+ String.valueOf(est_replacement_cost__c));
			sb.append(",pba__totalarea_pb__c="
					+ String.valueOf(pba__totalarea_pb__c));
			sb.append(",bedrooms__c=" + String.valueOf(bedrooms__c));
			sb.append(",bathrooms__c=" + String.valueOf(bathrooms__c));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputXML_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tMysqlInput_5Process(globalMap);
				tMysqlInput_3Process(globalMap);
				tMysqlInput_10Process(globalMap);
				tMysqlInput_7Process(globalMap);
				tMysqlInput_8Process(globalMap);

				row1Struct row1 = new row1Struct();
				zipCodeStruct zipCode = new zipCodeStruct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				zipRowDataStruct zipRowData = new zipRowDataStruct();
				out1Struct out1 = new out1Struct();
				row10Struct row10 = new row10Struct();
				loadZipStruct loadZip = new loadZipStruct();
				stateInfoStruct stateInfo = new stateInfoStruct();
				row13Struct row13 = new row13Struct();
				loadStateStruct loadState = new loadStateStruct();
				stateCityStruct stateCity = new stateCityStruct();
				row5Struct row5 = new row5Struct();
				loadCityStruct loadCity = new loadCityStruct();
				propertyDataStruct propertyData = new propertyDataStruct();
				loadDataStruct loadData = new loadDataStruct();
				row9Struct row9 = new row9Struct();
				row14Struct row14 = new row14Struct();
				newDataStruct newData = new newDataStruct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tFileInputJSON_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "PROPERTY_DATA";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlOutput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlOutput_1) {
					conn_tMysqlOutput_1 = dataSources_tMysqlOutput_1.get("")
							.getConnection();
				} else {
					String dbProperties_tMysqlOutput_1 = context.talon_AdditionalParams;
					String url_tMysqlOutput_1 = null;
					if (dbProperties_tMysqlOutput_1 == null
							|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
						url_tMysqlOutput_1 = "jdbc:mysql://"
								+ context.talon_Server + ":"
								+ context.talon_Port + "/"
								+ context.talon_Database + "?"
								+ "rewriteBatchedStatements=true";
					} else {
						String properties_tMysqlOutput_1 = context.talon_AdditionalParams;
						if (!properties_tMysqlOutput_1
								.contains("rewriteBatchedStatements")) {
							properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
						}

						url_tMysqlOutput_1 = "jdbc:mysql://"
								+ context.talon_Server + ":"
								+ context.talon_Port + "/"
								+ context.talon_Database + "?"
								+ properties_tMysqlOutput_1;
					}
					String dbUser_tMysqlOutput_1 = context.talon_Login;
					String dbPwd_tMysqlOutput_1 = context.talon_Password;
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");
					conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
							url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
							dbPwd_tMysqlOutput_1);
				}

				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 1;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				String insert_tMysqlOutput_1 = "INSERT INTO `"
						+ "PROPERTY_DATA"
						+ "` (`ID`,`UUID`,`PROP_NAME`,`PRICE`,`SQFT`,`DESCRIPTION`,`NUM_BEDS`,`NUM_BATHS`,`TYPE`,`STATUS`,`DATA_SOURCE_ID`,`ZIP_CODE`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());
				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				newDataStruct newData_tmp = new newDataStruct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());
				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tJoin_3 begin ] start
				 */

				ok_Hash.put("tJoin_3", false);
				start_Hash.put("tJoin_3", System.currentTimeMillis());
				currentComponent = "tJoin_3";

				int tos_count_tJoin_3 = 0;
				final java.util.Map<getCurrentPropertiesStruct, getCurrentPropertiesStruct> tHash_tJoin_3 = (java.util.Map<getCurrentPropertiesStruct, getCurrentPropertiesStruct>) globalMap
						.get("tHash_getCurrentProperties");

				class Util_tJoin_3 {
					getCurrentPropertiesStruct lookupValue = null;
					getCurrentPropertiesStruct getCurrentPropertiesHashKey = new getCurrentPropertiesStruct();

					public boolean isJoined(loadDataStruct mainRow) {
						getCurrentPropertiesHashKey.PROP_NAME = mainRow.PROP_NAME;
						getCurrentPropertiesHashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_3
								.get(getCurrentPropertiesHashKey);
						if (lookupValue != null) {
							return true;
						}
						return false;
					}
				}

				Util_tJoin_3 util_tJoin_3 = new Util_tJoin_3();

				int nb_line_tJoin_3 = 0;

				/**
				 * [tJoin_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());
				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<custDataStruct> tHash_Lookup_custData = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<custDataStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<custDataStruct>) globalMap
						.get("tHash_Lookup_custData"));

				custDataStruct custDataHashKey = new custDataStruct();
				custDataStruct custDataDefault = new custDataStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				loadDataStruct loadData_tmp = new loadDataStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				zipCodeStruct zipCode_tmp = new zipCodeStruct();
				propertyDataStruct propertyData_tmp = new propertyDataStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				String os_tFileInputXML_1 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1
						|| os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(String[] node)
							throws javax.xml.transform.TransformerException {
						if (node[0] != null && node[1] != null
								&& ("true").equals(node[1])) {
							return true;
						}
						return false;
					}

					public boolean isMissing(String[] node)
							throws javax.xml.transform.TransformerException {
						return node[0] == null ? true : false;
					}

					public boolean isEmpty(String[] node)
							throws javax.xml.transform.TransformerException {
						if (node[0] != null) {
							return node[0].length() == 0;
						}
						return false;
					}
				}
				XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

				String[] queryPaths_tFileInputXML_1 = new String[] { "name",
						"name" + "/@xsi:nil", "../media/images/image/url",
						"../media/images/image/url" + "/@xsi:nil",
						"../media/images/image/title",
						"../media/images/image/title" + "/@xsi:nil",
						"pba__propertytype__c",
						"pba__propertytype__c" + "/@xsi:nil",
						"rented_status__c", "rented_status__c" + "/@xsi:nil",
						"zipcode__c", "zipcode__c" + "/@xsi:nil",
						"pba__city_pb__c", "pba__city_pb__c" + "/@xsi:nil",
						"pba__description_pb__c",
						"pba__description_pb__c" + "/@xsi:nil", "term_2__c",
						"term_2__c" + "/@xsi:nil", "term_1__c",
						"term_1__c" + "/@xsi:nil", "pba__status__c",
						"pba__status__c" + "/@xsi:nil", "year_built__c",
						"year_built__c" + "/@xsi:nil", "pba__address_pb__c",
						"pba__address_pb__c" + "/@xsi:nil",
						"financed_net_yield_1__c",
						"financed_net_yield_1__c" + "/@xsi:nil",
						"monthly_cash_flow_with_financing_2__c",
						"monthly_cash_flow_with_financing_2__c" + "/@xsi:nil",
						"financed_net_yield_2__c",
						"financed_net_yield_2__c" + "/@xsi:nil",
						"monthly_cash_flow_with_financing_1__c",
						"monthly_cash_flow_with_financing_1__c" + "/@xsi:nil",
						"interest_rate_2__c",
						"interest_rate_2__c" + "/@xsi:nil",
						"interest_rate_1__c",
						"interest_rate_1__c" + "/@xsi:nil",
						"monthly_cash_flow__c",
						"monthly_cash_flow__c" + "/@xsi:nil", "noi__c",
						"noi__c" + "/@xsi:nil", "noi_with_financing_2__c",
						"noi_with_financing_2__c" + "/@xsi:nil",
						"noi_with_financing_1__c",
						"noi_with_financing_1__c" + "/@xsi:nil",
						"price_per_ft__c", "price_per_ft__c" + "/@xsi:nil",
						"price__c", "price__c" + "/@xsi:nil",
						"yearly_interest_payment_1__c",
						"yearly_interest_payment_1__c" + "/@xsi:nil",
						"monthly_interest_payment_2__c",
						"monthly_interest_payment_2__c" + "/@xsi:nil",
						"interest_payment_1__c",
						"interest_payment_1__c" + "/@xsi:nil",
						"down_payment_2__c", "down_payment_2__c" + "/@xsi:nil",
						"down_payment_1__c", "down_payment_1__c" + "/@xsi:nil",
						"cash_net_yield__c", "cash_net_yield__c" + "/@xsi:nil",
						"monthly_management__c",
						"monthly_management__c" + "/@xsi:nil", "management__c",
						"management__c" + "/@xsi:nil", "monthly_insurance__c",
						"monthly_insurance__c" + "/@xsi:nil", "insurance__c",
						"insurance__c" + "/@xsi:nil", "taxes__c",
						"taxes__c" + "/@xsi:nil", "monthly_taxes__c",
						"monthly_taxes__c" + "/@xsi:nil", "monthlyrent__c",
						"monthlyrent__c" + "/@xsi:nil", "annual_rents__c",
						"annual_rents__c" + "/@xsi:nil",
						"est_of_market_value__c",
						"est_of_market_value__c" + "/@xsi:nil",
						"est_value_per_rent_multiplier__c",
						"est_value_per_rent_multiplier__c" + "/@xsi:nil",
						"estimated_value__c",
						"estimated_value__c" + "/@xsi:nil",
						"est_replacement_cost_per_sq_ft__c",
						"est_replacement_cost_per_sq_ft__c" + "/@xsi:nil",
						"est_replacement_cost__c",
						"est_replacement_cost__c" + "/@xsi:nil",
						"pba__totalarea_pb__c",
						"pba__totalarea_pb__c" + "/@xsi:nil", "bedrooms__c",
						"bedrooms__c" + "/@xsi:nil", "bathrooms__c",
						"bathrooms__c" + "/@xsi:nil" };

				boolean[] asXMLs_tFileInputXML_1 = new boolean[] { false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false };

				String str_tFileInputXML_1 = "";
				String[] node_tFileInputXML_1 = null;
				org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper(
						"/result/listings/listing/data",
						queryPaths_tFileInputXML_1, asXMLs_tFileInputXML_1);
				looper_tFileInputXML_1.setEncoding("UTF-8");
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = ((java.io.InputStream) globalMap
							.get("tFileFetch_1_INPUT_STREAM"));
				} catch (Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null
						&& filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1
								.toString().replaceFirst("//", "/");
					}
				}
				if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
					looper_tFileInputXML_1
							.parse((java.io.InputStream) filename_tFileInputXML_1);
				} else {
					looper_tFileInputXML_1.parse(String
							.valueOf(filename_tFileInputXML_1));
				}
				java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1 = looper_tFileInputXML_1
						.iterator();
				while (it_tFileInputXML_1.hasNext()) {
					java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1
							.next();
					nb_line_tFileInputXML_1++;
					row1 = null;
					boolean whetherReject_tFileInputXML_1 = false;
					row1 = new row1Struct();
					try {
						str_tFileInputXML_1 = row_tFileInputXML_1.get("name");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("name" + "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.name = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.name = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.name = null;
						} else {
							row1.name = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("../media/images/image/url");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("../media/images/image/url"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.image_url = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.image_url = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.image_url = null;
						} else {
							row1.image_url = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("../media/images/image/title");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("../media/images/image/title"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.image_title = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.image_title = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.image_title = null;
						} else {
							row1.image_title = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__propertytype__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__propertytype__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__propertytype__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__propertytype__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__propertytype__c = null;
						} else {
							row1.pba__propertytype__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("rented_status__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("rented_status__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.rented_status__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.rented_status__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.rented_status__c = null;
						} else {
							row1.rented_status__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("zipcode__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("zipcode__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.zipcode__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.zipcode__c = null;
						} else {
							row1.zipcode__c = ParserUtils
									.parseTo_Integer(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__city_pb__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__city_pb__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__city_pb__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__city_pb__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__city_pb__c = null;
						} else {
							row1.pba__city_pb__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__description_pb__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("pba__description_pb__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__description_pb__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__description_pb__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__description_pb__c = null;
						} else {
							row1.pba__description_pb__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("term_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("term_2__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.term_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.term_2__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.term_2__c = null;
						} else {
							row1.term_2__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("term_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("term_1__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.term_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.term_1__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.term_1__c = null;
						} else {
							row1.term_1__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__status__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__status__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__status__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__status__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__status__c = null;
						} else {
							row1.pba__status__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("year_built__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("year_built__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.year_built__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.year_built__c = null;
						} else {
							row1.year_built__c = ParserUtils
									.parseTo_Integer(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__address_pb__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__address_pb__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__address_pb__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__address_pb__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__address_pb__c = null;
						} else {
							row1.pba__address_pb__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("financed_net_yield_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("financed_net_yield_1__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.financed_net_yield_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.financed_net_yield_1__c = null;
						} else {
							row1.financed_net_yield_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_cash_flow_with_financing_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("monthly_cash_flow_with_financing_2__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_cash_flow_with_financing_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_cash_flow_with_financing_2__c = null;
						} else {
							row1.monthly_cash_flow_with_financing_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("financed_net_yield_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("financed_net_yield_2__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.financed_net_yield_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.financed_net_yield_2__c = null;
						} else {
							row1.financed_net_yield_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_cash_flow_with_financing_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("monthly_cash_flow_with_financing_1__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_cash_flow_with_financing_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_cash_flow_with_financing_1__c = null;
						} else {
							row1.monthly_cash_flow_with_financing_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("interest_rate_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("interest_rate_2__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.interest_rate_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.interest_rate_2__c = null;
						} else {
							row1.interest_rate_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("interest_rate_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("interest_rate_1__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.interest_rate_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.interest_rate_1__c = null;
						} else {
							row1.interest_rate_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_cash_flow__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthly_cash_flow__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_cash_flow__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_cash_flow__c = null;
						} else {
							row1.monthly_cash_flow__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1.get("noi__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("noi__c" + "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.noi__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.noi__c = null;
						} else {
							row1.noi__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("noi_with_financing_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("noi_with_financing_2__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.noi_with_financing_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.noi_with_financing_2__c = null;
						} else {
							row1.noi_with_financing_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("noi_with_financing_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("noi_with_financing_1__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.noi_with_financing_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.noi_with_financing_1__c = null;
						} else {
							row1.noi_with_financing_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("price_per_ft__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("price_per_ft__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.price_per_ft__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.price_per_ft__c = null;
						} else {
							row1.price_per_ft__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("price__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("price__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.price__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.price__c = null;
						} else {
							row1.price__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("yearly_interest_payment_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("yearly_interest_payment_1__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.yearly_interest_payment_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.yearly_interest_payment_1__c = null;
						} else {
							row1.yearly_interest_payment_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_interest_payment_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("monthly_interest_payment_2__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_interest_payment_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_interest_payment_2__c = null;
						} else {
							row1.monthly_interest_payment_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("interest_payment_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("interest_payment_1__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.interest_payment_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.interest_payment_1__c = null;
						} else {
							row1.interest_payment_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("down_payment_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("down_payment_2__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.down_payment_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.down_payment_2__c = null;
						} else {
							row1.down_payment_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("down_payment_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("down_payment_1__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.down_payment_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.down_payment_1__c = null;
						} else {
							row1.down_payment_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("cash_net_yield__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("cash_net_yield__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.cash_net_yield__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.cash_net_yield__c = null;
						} else {
							row1.cash_net_yield__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_management__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthly_management__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_management__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_management__c = null;
						} else {
							row1.monthly_management__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("management__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("management__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.management__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.management__c = null;
						} else {
							row1.management__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_insurance__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthly_insurance__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_insurance__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_insurance__c = null;
						} else {
							row1.monthly_insurance__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("insurance__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("insurance__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.insurance__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.insurance__c = null;
						} else {
							row1.insurance__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("taxes__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("taxes__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.taxes__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.taxes__c = null;
						} else {
							row1.taxes__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_taxes__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthly_taxes__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_taxes__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_taxes__c = null;
						} else {
							row1.monthly_taxes__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthlyrent__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthlyrent__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthlyrent__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthlyrent__c = null;
						} else {
							row1.monthlyrent__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("annual_rents__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("annual_rents__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.annual_rents__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.annual_rents__c = null;
						} else {
							row1.annual_rents__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("est_of_market_value__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("est_of_market_value__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.est_of_market_value__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.est_of_market_value__c = null;
						} else {
							row1.est_of_market_value__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("est_value_per_rent_multiplier__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("est_value_per_rent_multiplier__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.est_value_per_rent_multiplier__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.est_value_per_rent_multiplier__c = null;
						} else {
							row1.est_value_per_rent_multiplier__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("estimated_value__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("estimated_value__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.estimated_value__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.estimated_value__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.estimated_value__c = null;
						} else {
							row1.estimated_value__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("est_replacement_cost_per_sq_ft__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("est_replacement_cost_per_sq_ft__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.est_replacement_cost_per_sq_ft__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.est_replacement_cost_per_sq_ft__c = null;
						} else {
							row1.est_replacement_cost_per_sq_ft__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("est_replacement_cost__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("est_replacement_cost__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.est_replacement_cost__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.est_replacement_cost__c = null;
						} else {
							row1.est_replacement_cost__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__totalarea_pb__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__totalarea_pb__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__totalarea_pb__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.pba__totalarea_pb__c = null;
						} else {
							row1.pba__totalarea_pb__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("bedrooms__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("bedrooms__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.bedrooms__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.bedrooms__c = null;
						} else {
							row1.bedrooms__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("bathrooms__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("bathrooms__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.bathrooms__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.bathrooms__c = null;
						} else {
							row1.bathrooms__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}

					} catch (Exception e) {
						whetherReject_tFileInputXML_1 = true;
						System.err.println(e.getMessage());
						row1 = null;
					}

					/**
					 * [tFileInputXML_1 begin ] stop
					 */
					/**
					 * [tFileInputXML_1 main ] start
					 */

					currentComponent = "tFileInputXML_1";

					tos_count_tFileInputXML_1++;

					/**
					 * [tFileInputXML_1 main ] stop
					 */
					// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							zipCode = null;
							propertyData = null;

							// # Output table : 'zipCode'
							zipCode_tmp.zipcode__c = row1.zipcode__c;
							zipCode = zipCode_tmp;

							// # Output table : 'propertyData'
							propertyData_tmp.name = row1.name;
							propertyData_tmp.image_url = row1.image_url;
							propertyData_tmp.image_title = row1.image_title;
							propertyData_tmp.pba__propertytype__c = row1.pba__propertytype__c;
							propertyData_tmp.rented_status__c = row1.rented_status__c;
							propertyData_tmp.zipcode__c = row1.zipcode__c;
							propertyData_tmp.pba__city_pb__c = row1.pba__city_pb__c;
							propertyData_tmp.pba__description_pb__c = row1.pba__description_pb__c;
							propertyData_tmp.term_2__c = row1.term_2__c;
							propertyData_tmp.term_1__c = row1.term_1__c;
							propertyData_tmp.pba__status__c = row1.pba__status__c;
							propertyData_tmp.year_built__c = row1.year_built__c;
							propertyData_tmp.pba__address_pb__c = row1.pba__address_pb__c;
							propertyData_tmp.financed_net_yield_1__c = row1.financed_net_yield_1__c;
							propertyData_tmp.monthly_cash_flow_with_financing_2__c = row1.monthly_cash_flow_with_financing_2__c;
							propertyData_tmp.financed_net_yield_2__c = row1.financed_net_yield_2__c;
							propertyData_tmp.monthly_cash_flow_with_financing_1__c = row1.monthly_cash_flow_with_financing_1__c;
							propertyData_tmp.interest_rate_2__c = row1.interest_rate_2__c;
							propertyData_tmp.interest_rate_1__c = row1.interest_rate_1__c;
							propertyData_tmp.monthly_cash_flow__c = row1.monthly_cash_flow__c;
							propertyData_tmp.noi__c = row1.noi__c;
							propertyData_tmp.noi_with_financing_2__c = row1.noi_with_financing_2__c;
							propertyData_tmp.noi_with_financing_1__c = row1.noi_with_financing_1__c;
							propertyData_tmp.price_per_ft__c = row1.price_per_ft__c;
							propertyData_tmp.price__c = row1.price__c;
							propertyData_tmp.yearly_interest_payment_1__c = row1.yearly_interest_payment_1__c;
							propertyData_tmp.monthly_interest_payment_2__c = row1.monthly_interest_payment_2__c;
							propertyData_tmp.interest_payment_1__c = row1.interest_payment_1__c;
							propertyData_tmp.down_payment_2__c = row1.down_payment_2__c;
							propertyData_tmp.down_payment_1__c = row1.down_payment_1__c;
							propertyData_tmp.cash_net_yield__c = row1.cash_net_yield__c;
							propertyData_tmp.monthly_management__c = row1.monthly_management__c;
							propertyData_tmp.management__c = row1.management__c;
							propertyData_tmp.monthly_insurance__c = row1.monthly_insurance__c;
							propertyData_tmp.insurance__c = row1.insurance__c;
							propertyData_tmp.taxes__c = row1.taxes__c;
							propertyData_tmp.monthly_taxes__c = row1.monthly_taxes__c;
							propertyData_tmp.monthlyrent__c = row1.monthlyrent__c;
							propertyData_tmp.annual_rents__c = row1.annual_rents__c;
							propertyData_tmp.est_of_market_value__c = row1.est_of_market_value__c;
							propertyData_tmp.est_value_per_rent_multiplier__c = row1.est_value_per_rent_multiplier__c;
							propertyData_tmp.estimated_value__c = row1.estimated_value__c;
							propertyData_tmp.est_replacement_cost_per_sq_ft__c = row1.est_replacement_cost_per_sq_ft__c;
							propertyData_tmp.est_replacement_cost__c = row1.est_replacement_cost__c;
							propertyData_tmp.pba__totalarea_pb__c = row1.pba__totalarea_pb__c;
							propertyData_tmp.bedrooms__c = row1.bedrooms__c;
							propertyData_tmp.bathrooms__c = row1.bathrooms__c;
							propertyData_tmp.customer = context.cusomterName;
							propertyData = propertyData_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "zipCode"
						if (zipCode != null) {

							/**
							 * [tFlowToIterate_1 main ] start
							 */

							currentComponent = "tFlowToIterate_1";

							globalMap.put("zipCode", zipCode.zipcode__c);
							nb_line_tFlowToIterate_1++;
							counter_tFlowToIterate_1++;
							globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
									counter_tFlowToIterate_1);

							tos_count_tFlowToIterate_1++;

							/**
							 * [tFlowToIterate_1 main ] stop
							 */
							NB_ITERATE_tFileInputJSON_1++;
							iterateLoop++;

							/**
							 * [tMysqlOutput_5 begin ] start
							 */

							ok_Hash.put("tMysqlOutput_5", false);
							start_Hash.put("tMysqlOutput_5",
									System.currentTimeMillis());
							currentComponent = "tMysqlOutput_5";

							int tos_count_tMysqlOutput_5 = 0;

							int nb_line_tMysqlOutput_5 = 0;
							int nb_line_update_tMysqlOutput_5 = 0;
							int nb_line_inserted_tMysqlOutput_5 = 0;
							int nb_line_deleted_tMysqlOutput_5 = 0;
							int nb_line_rejected_tMysqlOutput_5 = 0;

							int deletedCount_tMysqlOutput_5 = 0;
							int updatedCount_tMysqlOutput_5 = 0;
							int insertedCount_tMysqlOutput_5 = 0;

							int rejectedCount_tMysqlOutput_5 = 0;

							String tableName_tMysqlOutput_5 = "ZIP_CODES";
							boolean whetherReject_tMysqlOutput_5 = false;

							java.util.Calendar calendar_tMysqlOutput_5 = java.util.Calendar
									.getInstance();
							calendar_tMysqlOutput_5.set(1, 0, 1, 0, 0, 0);
							long year1_tMysqlOutput_5 = calendar_tMysqlOutput_5
									.getTime().getTime();
							calendar_tMysqlOutput_5.set(10000, 0, 1, 0, 0, 0);
							long year10000_tMysqlOutput_5 = calendar_tMysqlOutput_5
									.getTime().getTime();
							long date_tMysqlOutput_5;

							java.sql.Connection conn_tMysqlOutput_5 = null;
							java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlOutput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != dataSources_tMysqlOutput_5) {
								conn_tMysqlOutput_5 = dataSources_tMysqlOutput_5
										.get("").getConnection();
							} else {
								String dbProperties_tMysqlOutput_5 = context.talon_AdditionalParams;
								String url_tMysqlOutput_5 = null;
								if (dbProperties_tMysqlOutput_5 == null
										|| dbProperties_tMysqlOutput_5.trim()
												.length() == 0) {
									url_tMysqlOutput_5 = "jdbc:mysql://"
											+ context.talon_Server + ":"
											+ context.talon_Port + "/"
											+ context.talon_Database + "?"
											+ "rewriteBatchedStatements=true";
								} else {
									String properties_tMysqlOutput_5 = context.talon_AdditionalParams;
									if (!properties_tMysqlOutput_5
											.contains("rewriteBatchedStatements")) {
										properties_tMysqlOutput_5 += "&rewriteBatchedStatements=true";
									}

									url_tMysqlOutput_5 = "jdbc:mysql://"
											+ context.talon_Server + ":"
											+ context.talon_Port + "/"
											+ context.talon_Database + "?"
											+ properties_tMysqlOutput_5;
								}
								String dbUser_tMysqlOutput_5 = context.talon_Login;
								String dbPwd_tMysqlOutput_5 = context.talon_Password;
								java.lang.Class
										.forName("org.gjt.mm.mysql.Driver");
								conn_tMysqlOutput_5 = java.sql.DriverManager
										.getConnection(url_tMysqlOutput_5,
												dbUser_tMysqlOutput_5,
												dbPwd_tMysqlOutput_5);
							}

							conn_tMysqlOutput_5.setAutoCommit(false);
							int commitEvery_tMysqlOutput_5 = 10000;
							int commitCounter_tMysqlOutput_5 = 0;

							int count_tMysqlOutput_5 = 0;

							String insert_tMysqlOutput_5 = "INSERT INTO `"
									+ "ZIP_CODES"
									+ "` (`ZIP_CODE`,`CITY_ID`) VALUES (?,?)";
							int batchSize_tMysqlOutput_5 = 100;
							int batchSizeCounter_tMysqlOutput_5 = 0;

							java.sql.PreparedStatement pstmt_tMysqlOutput_5 = conn_tMysqlOutput_5
									.prepareStatement(insert_tMysqlOutput_5);

							/**
							 * [tMysqlOutput_5 begin ] stop
							 */

							/**
							 * [tMap_13 begin ] start
							 */

							ok_Hash.put("tMap_13", false);
							start_Hash.put("tMap_13",
									System.currentTimeMillis());
							currentComponent = "tMap_13";

							int tos_count_tMap_13 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_13__Struct {
							}
							Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							loadZipStruct loadZip_tmp = new loadZipStruct();
							// ###############################

							/**
							 * [tMap_13 begin ] stop
							 */

							/**
							 * [tJoin_4 begin ] start
							 */

							ok_Hash.put("tJoin_4", false);
							start_Hash.put("tJoin_4",
									System.currentTimeMillis());
							currentComponent = "tJoin_4";

							int tos_count_tJoin_4 = 0;
							final java.util.Map<row6Struct, row6Struct> tHash_tJoin_4 = (java.util.Map<row6Struct, row6Struct>) globalMap
									.get("tHash_row6");

							class Util_tJoin_4 {
								row6Struct lookupValue = null;
								row6Struct row6HashKey = new row6Struct();

								public boolean isJoined(out1Struct mainRow) {
									row6HashKey.ZIP_CODE = mainRow.zip;
									row6HashKey.hashCodeDirty = true;
									lookupValue = tHash_tJoin_4
											.get(row6HashKey);
									if (lookupValue != null) {
										return true;
									}
									return false;
								}
							}

							Util_tJoin_4 util_tJoin_4 = new Util_tJoin_4();

							int nb_line_tJoin_4 = 0;

							/**
							 * [tJoin_4 begin ] stop
							 */

							/**
							 * [tMap_12 begin ] start
							 */

							ok_Hash.put("tMap_12", false);
							start_Hash.put("tMap_12",
									System.currentTimeMillis());
							currentComponent = "tMap_12";

							int tos_count_tMap_12 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = null;

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_Cache_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
									.<row12Struct> getLookup(org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH);

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_Real_row12 = null;

							row12Struct row12HashKey = new row12Struct();
							row12Struct row12Default = new row12Struct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_12__Struct {
							}
							Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							out1Struct out1_tmp = new out1Struct();
							// ###############################

							/**
							 * [tMap_12 begin ] stop
							 */

							/**
							 * [tMysqlOutput_7 begin ] start
							 */

							ok_Hash.put("tMysqlOutput_7", false);
							start_Hash.put("tMysqlOutput_7",
									System.currentTimeMillis());
							currentComponent = "tMysqlOutput_7";

							int tos_count_tMysqlOutput_7 = 0;

							int nb_line_tMysqlOutput_7 = 0;
							int nb_line_update_tMysqlOutput_7 = 0;
							int nb_line_inserted_tMysqlOutput_7 = 0;
							int nb_line_deleted_tMysqlOutput_7 = 0;
							int nb_line_rejected_tMysqlOutput_7 = 0;

							int deletedCount_tMysqlOutput_7 = 0;
							int updatedCount_tMysqlOutput_7 = 0;
							int insertedCount_tMysqlOutput_7 = 0;

							int rejectedCount_tMysqlOutput_7 = 0;

							String tableName_tMysqlOutput_7 = "STATE";
							boolean whetherReject_tMysqlOutput_7 = false;

							java.util.Calendar calendar_tMysqlOutput_7 = java.util.Calendar
									.getInstance();
							calendar_tMysqlOutput_7.set(1, 0, 1, 0, 0, 0);
							long year1_tMysqlOutput_7 = calendar_tMysqlOutput_7
									.getTime().getTime();
							calendar_tMysqlOutput_7.set(10000, 0, 1, 0, 0, 0);
							long year10000_tMysqlOutput_7 = calendar_tMysqlOutput_7
									.getTime().getTime();
							long date_tMysqlOutput_7;

							java.sql.Connection conn_tMysqlOutput_7 = null;
							java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlOutput_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != dataSources_tMysqlOutput_7) {
								conn_tMysqlOutput_7 = dataSources_tMysqlOutput_7
										.get("").getConnection();
							} else {
								String dbProperties_tMysqlOutput_7 = context.talon_AdditionalParams;
								String url_tMysqlOutput_7 = null;
								if (dbProperties_tMysqlOutput_7 == null
										|| dbProperties_tMysqlOutput_7.trim()
												.length() == 0) {
									url_tMysqlOutput_7 = "jdbc:mysql://"
											+ context.talon_Server + ":"
											+ context.talon_Port + "/"
											+ context.talon_Database + "?"
											+ "rewriteBatchedStatements=true";
								} else {
									String properties_tMysqlOutput_7 = context.talon_AdditionalParams;
									if (!properties_tMysqlOutput_7
											.contains("rewriteBatchedStatements")) {
										properties_tMysqlOutput_7 += "&rewriteBatchedStatements=true";
									}

									url_tMysqlOutput_7 = "jdbc:mysql://"
											+ context.talon_Server + ":"
											+ context.talon_Port + "/"
											+ context.talon_Database + "?"
											+ properties_tMysqlOutput_7;
								}
								String dbUser_tMysqlOutput_7 = context.talon_Login;
								String dbPwd_tMysqlOutput_7 = context.talon_Password;
								java.lang.Class
										.forName("org.gjt.mm.mysql.Driver");
								conn_tMysqlOutput_7 = java.sql.DriverManager
										.getConnection(url_tMysqlOutput_7,
												dbUser_tMysqlOutput_7,
												dbPwd_tMysqlOutput_7);
							}

							conn_tMysqlOutput_7.setAutoCommit(false);
							int commitEvery_tMysqlOutput_7 = 10000;
							int commitCounter_tMysqlOutput_7 = 0;

							int count_tMysqlOutput_7 = 0;

							String insert_tMysqlOutput_7 = "INSERT INTO `"
									+ "STATE"
									+ "` (`ID`,`STATE`,`FULL_NAME`) VALUES (?,?,?)";
							int batchSize_tMysqlOutput_7 = 100;
							int batchSizeCounter_tMysqlOutput_7 = 0;

							java.sql.PreparedStatement pstmt_tMysqlOutput_7 = conn_tMysqlOutput_7
									.prepareStatement(insert_tMysqlOutput_7);

							/**
							 * [tMysqlOutput_7 begin ] stop
							 */

							/**
							 * [tMap_9 begin ] start
							 */

							ok_Hash.put("tMap_9", false);
							start_Hash
									.put("tMap_9", System.currentTimeMillis());
							currentComponent = "tMap_9";

							int tos_count_tMap_9 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_9__Struct {
							}
							Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							loadStateStruct loadState_tmp = new loadStateStruct();
							// ###############################

							/**
							 * [tMap_9 begin ] stop
							 */

							/**
							 * [tJoin_6 begin ] start
							 */

							ok_Hash.put("tJoin_6", false);
							start_Hash.put("tJoin_6",
									System.currentTimeMillis());
							currentComponent = "tJoin_6";

							int tos_count_tJoin_6 = 0;
							final java.util.Map<row11Struct, row11Struct> tHash_tJoin_6 = (java.util.Map<row11Struct, row11Struct>) globalMap
									.get("tHash_row11");

							class Util_tJoin_6 {
								row11Struct lookupValue = null;
								row11Struct row11HashKey = new row11Struct();

								public boolean isJoined(stateInfoStruct mainRow) {
									row11HashKey.STATE = mainRow.state;
									row11HashKey.hashCodeDirty = true;
									lookupValue = tHash_tJoin_6
											.get(row11HashKey);
									if (lookupValue != null) {
										return true;
									}
									return false;
								}
							}

							Util_tJoin_6 util_tJoin_6 = new Util_tJoin_6();

							int nb_line_tJoin_6 = 0;

							/**
							 * [tJoin_6 begin ] stop
							 */

							/**
							 * [tMysqlOutput_3 begin ] start
							 */

							ok_Hash.put("tMysqlOutput_3", false);
							start_Hash.put("tMysqlOutput_3",
									System.currentTimeMillis());
							currentComponent = "tMysqlOutput_3";

							int tos_count_tMysqlOutput_3 = 0;

							int nb_line_tMysqlOutput_3 = 0;
							int nb_line_update_tMysqlOutput_3 = 0;
							int nb_line_inserted_tMysqlOutput_3 = 0;
							int nb_line_deleted_tMysqlOutput_3 = 0;
							int nb_line_rejected_tMysqlOutput_3 = 0;

							int deletedCount_tMysqlOutput_3 = 0;
							int updatedCount_tMysqlOutput_3 = 0;
							int insertedCount_tMysqlOutput_3 = 0;

							int rejectedCount_tMysqlOutput_3 = 0;

							String tableName_tMysqlOutput_3 = "CITY";
							boolean whetherReject_tMysqlOutput_3 = false;

							java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar
									.getInstance();
							calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
							long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3
									.getTime().getTime();
							calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
							long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3
									.getTime().getTime();
							long date_tMysqlOutput_3;

							java.sql.Connection conn_tMysqlOutput_3 = null;
							java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlOutput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != dataSources_tMysqlOutput_3) {
								conn_tMysqlOutput_3 = dataSources_tMysqlOutput_3
										.get("").getConnection();
							} else {
								String dbProperties_tMysqlOutput_3 = context.talon_AdditionalParams;
								String url_tMysqlOutput_3 = null;
								if (dbProperties_tMysqlOutput_3 == null
										|| dbProperties_tMysqlOutput_3.trim()
												.length() == 0) {
									url_tMysqlOutput_3 = "jdbc:mysql://"
											+ context.talon_Server + ":"
											+ context.talon_Port + "/"
											+ context.talon_Database + "?"
											+ "rewriteBatchedStatements=true";
								} else {
									String properties_tMysqlOutput_3 = context.talon_AdditionalParams;
									if (!properties_tMysqlOutput_3
											.contains("rewriteBatchedStatements")) {
										properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
									}

									url_tMysqlOutput_3 = "jdbc:mysql://"
											+ context.talon_Server + ":"
											+ context.talon_Port + "/"
											+ context.talon_Database + "?"
											+ properties_tMysqlOutput_3;
								}
								String dbUser_tMysqlOutput_3 = context.talon_Login;
								String dbPwd_tMysqlOutput_3 = context.talon_Password;
								java.lang.Class
										.forName("org.gjt.mm.mysql.Driver");
								conn_tMysqlOutput_3 = java.sql.DriverManager
										.getConnection(url_tMysqlOutput_3,
												dbUser_tMysqlOutput_3,
												dbPwd_tMysqlOutput_3);
							}

							conn_tMysqlOutput_3.setAutoCommit(false);
							int commitEvery_tMysqlOutput_3 = 10000;
							int commitCounter_tMysqlOutput_3 = 0;

							int count_tMysqlOutput_3 = 0;

							String insert_tMysqlOutput_3 = "INSERT INTO `"
									+ "CITY"
									+ "` (`ID`,`CITY`,`SUMMARY`,`IMAGE_URL`,`STATE_ID`) VALUES (?,?,?,?,?)";
							int batchSize_tMysqlOutput_3 = 100;
							int batchSizeCounter_tMysqlOutput_3 = 0;

							java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
									.prepareStatement(insert_tMysqlOutput_3);

							/**
							 * [tMysqlOutput_3 begin ] stop
							 */

							/**
							 * [tMap_3 begin ] start
							 */

							ok_Hash.put("tMap_3", false);
							start_Hash
									.put("tMap_3", System.currentTimeMillis());
							currentComponent = "tMap_3";

							int tos_count_tMap_3 = 0;

							// ###############################
							// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = null;

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_Cache_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
									.<row15Struct> getLookup(org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH);

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_Real_row15 = null;

							row15Struct row15HashKey = new row15Struct();
							row15Struct row15Default = new row15Struct();
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_3__Struct {
							}
							Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							loadCityStruct loadCity_tmp = new loadCityStruct();
							// ###############################

							/**
							 * [tMap_3 begin ] stop
							 */

							/**
							 * [tJoin_5 begin ] start
							 */

							ok_Hash.put("tJoin_5", false);
							start_Hash.put("tJoin_5",
									System.currentTimeMillis());
							currentComponent = "tJoin_5";

							int tos_count_tJoin_5 = 0;
							final java.util.Map<row4Struct, row4Struct> tHash_tJoin_5 = (java.util.Map<row4Struct, row4Struct>) globalMap
									.get("tHash_row4");

							class Util_tJoin_5 {
								row4Struct lookupValue = null;
								row4Struct row4HashKey = new row4Struct();

								public boolean isJoined(stateCityStruct mainRow) {
									row4HashKey.CITY = mainRow.city;
									row4HashKey.hashCodeDirty = true;
									lookupValue = tHash_tJoin_5
											.get(row4HashKey);
									if (lookupValue != null) {
										return true;
									}
									return false;
								}
							}

							Util_tJoin_5 util_tJoin_5 = new Util_tJoin_5();

							int nb_line_tJoin_5 = 0;

							/**
							 * [tJoin_5 begin ] stop
							 */

							/**
							 * [tMap_10 begin ] start
							 */

							ok_Hash.put("tMap_10", false);
							start_Hash.put("tMap_10",
									System.currentTimeMillis());
							currentComponent = "tMap_10";

							int tos_count_tMap_10 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_10__Struct {
							}
							Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							zipRowDataStruct zipRowData_tmp = new zipRowDataStruct();
							stateInfoStruct stateInfo_tmp = new stateInfoStruct();
							stateCityStruct stateCity_tmp = new stateCityStruct();
							// ###############################

							/**
							 * [tMap_10 begin ] stop
							 */

							/**
							 * [tJavaRow_1 begin ] start
							 */

							ok_Hash.put("tJavaRow_1", false);
							start_Hash.put("tJavaRow_1",
									System.currentTimeMillis());
							currentComponent = "tJavaRow_1";

							int tos_count_tJavaRow_1 = 0;

							int nb_line_tJavaRow_1 = 0;

							/**
							 * [tJavaRow_1 begin ] stop
							 */

							/**
							 * [tFileInputJSON_1 begin ] start
							 */

							ok_Hash.put("tFileInputJSON_1", false);
							start_Hash.put("tFileInputJSON_1",
									System.currentTimeMillis());
							currentComponent = "tFileInputJSON_1";

							int tos_count_tFileInputJSON_1 = 0;
							class JSONUtil_tFileInputJSON_1 {
								public int getData(
										String query,
										javax.script.Invocable invocableEngine,
										java.util.List<org.json.simple.JSONArray> jsonResultList,
										int recordMaxSize) {
									try {
										// only 2 types: String/Boolean
										String resultObj = invocableEngine
												.invokeFunction("jsonPath",
														query).toString();
										if (!"false".equals(resultObj)) {
											org.json.simple.JSONArray resultArray = (org.json.simple.JSONArray) org.json.simple.JSONValue
													.parse(resultObj);
											jsonResultList.add(resultArray);
											if (recordMaxSize != -1
													&& recordMaxSize != resultArray
															.size()) {
												// just give an error, don't
												// stop
												System.err
														.println("The Json resource datas maybe have some problems, please make sure the data structure with the same fields.");
											}
											recordMaxSize = Math.max(
													recordMaxSize,
													resultArray.size());
										} else {
											System.err
													.println("Can't find any data with JSONPath "
															+ query);
											// add null to take a place in
											// List(buffer)
											jsonResultList.add(null);
										}
									} catch (Exception e) {
										e.printStackTrace();
									}
									return recordMaxSize;
								}

								void setRowValue_0(
										row2Struct row2,
										java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_1,
										int nbResultArray_tFileInputJSON_1)
										throws java.io.UnsupportedEncodingException {
									if (JSONResultList_tFileInputJSON_1.get(0) != null
											&& nbResultArray_tFileInputJSON_1 < JSONResultList_tFileInputJSON_1
													.get(0).size()
											&& JSONResultList_tFileInputJSON_1
													.get(0)
													.get(nbResultArray_tFileInputJSON_1) != null) {

										row2.city = JSONResultList_tFileInputJSON_1
												.get(0)
												.get(nbResultArray_tFileInputJSON_1)
												.toString();
									} else {

										row2.city = null;

									}
									if (JSONResultList_tFileInputJSON_1.get(1) != null
											&& nbResultArray_tFileInputJSON_1 < JSONResultList_tFileInputJSON_1
													.get(1).size()
											&& JSONResultList_tFileInputJSON_1
													.get(1)
													.get(nbResultArray_tFileInputJSON_1) != null) {

										row2.state = JSONResultList_tFileInputJSON_1
												.get(1)
												.get(nbResultArray_tFileInputJSON_1)
												.toString();
									} else {

										row2.state = null;

									}
									if (JSONResultList_tFileInputJSON_1.get(2) != null
											&& nbResultArray_tFileInputJSON_1 < JSONResultList_tFileInputJSON_1
													.get(2).size()
											&& JSONResultList_tFileInputJSON_1
													.get(2)
													.get(nbResultArray_tFileInputJSON_1) != null) {

										row2.country = JSONResultList_tFileInputJSON_1
												.get(2)
												.get(nbResultArray_tFileInputJSON_1)
												.toString();
									} else {

										row2.country = null;

									}
								}
							}
							int nb_line_tFileInputJSON_1 = 0;

							javax.script.ScriptEngineManager scriptEngineMgr_tFileInputJSON_1 = new javax.script.ScriptEngineManager();
							javax.script.ScriptEngine jsEngine_tFileInputJSON_1 = scriptEngineMgr_tFileInputJSON_1
									.getEngineByName("JavaScript");
							if (jsEngine_tFileInputJSON_1 == null) {
								System.err
										.println("No script engine found for JavaScript");
							}
							java.io.InputStream jsonis_tFileInputJSON_1 = com.jsonpath.test.ReadJar.class
									.getResource("json.js").openStream();
							jsEngine_tFileInputJSON_1
									.eval(new java.io.BufferedReader(
											new java.io.InputStreamReader(
													jsonis_tFileInputJSON_1)));

							java.io.InputStream jsonpathis_tFileInputJSON_1 = com.jsonpath.test.ReadJar.class
									.getResource("jsonpath.js").openStream();
							jsEngine_tFileInputJSON_1
									.eval(new java.io.BufferedReader(
											new java.io.InputStreamReader(
													jsonpathis_tFileInputJSON_1)));

							java.net.URL url_tFileInputJSON_1 = new java.net.URL(
									"http://ziptasticapi.com/"
											+ ((Integer) globalMap
													.get("zipCode")));
							java.net.URLConnection urlConn_tFileInputJSON_1 = url_tFileInputJSON_1
									.openConnection();
							java.io.InputStreamReader fr_tFileInputJSON_1 = new java.io.InputStreamReader(
									urlConn_tFileInputJSON_1.getInputStream(),
									"UTF-8");
							java.lang.Object jsonText_tFileInputJSON_1 = org.json.simple.JSONValue
									.parse(fr_tFileInputJSON_1);
							jsEngine_tFileInputJSON_1.eval("var obj="
									+ jsonText_tFileInputJSON_1.toString());

							java.util.List<org.json.simple.JSONArray> JSONResultList_tFileInputJSON_1 = new java.util.ArrayList<org.json.simple.JSONArray>();

							int recordMaxSize_tFileInputJSON_1 = -1;
							javax.script.Invocable invocableEngine_tFileInputJSON_1 = (javax.script.Invocable) jsEngine_tFileInputJSON_1;

							JSONUtil_tFileInputJSON_1 jsonUtil_tFileInputJSON_1 = new JSONUtil_tFileInputJSON_1();

							recordMaxSize_tFileInputJSON_1 = jsonUtil_tFileInputJSON_1
									.getData("city",
											invocableEngine_tFileInputJSON_1,
											JSONResultList_tFileInputJSON_1,
											recordMaxSize_tFileInputJSON_1);

							recordMaxSize_tFileInputJSON_1 = jsonUtil_tFileInputJSON_1
									.getData("state",
											invocableEngine_tFileInputJSON_1,
											JSONResultList_tFileInputJSON_1,
											recordMaxSize_tFileInputJSON_1);

							recordMaxSize_tFileInputJSON_1 = jsonUtil_tFileInputJSON_1
									.getData("country",
											invocableEngine_tFileInputJSON_1,
											JSONResultList_tFileInputJSON_1,
											recordMaxSize_tFileInputJSON_1);

							for (int nbResultArray_tFileInputJSON_1 = 0; nbResultArray_tFileInputJSON_1 < recordMaxSize_tFileInputJSON_1; nbResultArray_tFileInputJSON_1++) {

								nb_line_tFileInputJSON_1++;
								jsonUtil_tFileInputJSON_1.setRowValue_0(row2,
										JSONResultList_tFileInputJSON_1,
										nbResultArray_tFileInputJSON_1);

								/**
								 * [tFileInputJSON_1 begin ] stop
								 */
								/**
								 * [tFileInputJSON_1 main ] start
								 */

								currentComponent = "tFileInputJSON_1";

								tos_count_tFileInputJSON_1++;

								/**
								 * [tFileInputJSON_1 main ] stop
								 */

								/**
								 * [tJavaRow_1 main ] start
								 */

								currentComponent = "tJavaRow_1";

								// Code generated according to input schema and
								// output schema
								row3.city = row2.city;
								row3.state = row2.state;
								row3.country = row2.country;
								row3.zip = ((Integer) globalMap.get("zipCode"));

								nb_line_tJavaRow_1++;

								tos_count_tJavaRow_1++;

								/**
								 * [tJavaRow_1 main ] stop
								 */

								/**
								 * [tMap_10 main ] start
								 */

								currentComponent = "tMap_10";

								boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_10 = false;
								boolean mainRowRejected_tMap_10 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
									// ###############################
									// # Output tables

									zipRowData = null;
									stateInfo = null;
									stateCity = null;

									// # Output table : 'zipRowData'
									zipRowData_tmp.city = row3.city;
									zipRowData_tmp.zip = row3.zip;
									zipRowData = zipRowData_tmp;

									// # Output table : 'stateInfo'
									stateInfo_tmp.state = row3.state;
									stateInfo = stateInfo_tmp;

									// # Output table : 'stateCity'
									stateCity_tmp.city = row3.city;
									stateCity_tmp.state = row3.state;
									stateCity_tmp.zip = row3.zip;
									stateCity = stateCity_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_10 = false;

								tos_count_tMap_10++;

								/**
								 * [tMap_10 main ] stop
								 */
								// Start of branch "zipRowData"
								if (zipRowData != null) {
									row10 = null;

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row12"
									// /////////////////////////////////////////////

									boolean forceLooprow12 = false;

									row12Struct row12ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_12 = false;

										row12HashKey.CITY = zipRowData.city;

										row12HashKey.hashCodeDirty = true;

										tHash_Lookup_Cache_row12
												.lookup(row12HashKey);
										if (tHash_Lookup_Cache_row12.hasNext()) { // G_TM_M_835

											tHash_Lookup_row12 = tHash_Lookup_Cache_row12;

										} // G_TM_M_834
										else { // G_TM_M_835

											tMysqlInput_1Process(globalMap);

											tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
													.get("tHash_Lookup_row12"));

											tHash_Lookup_row12.initGet();

											tHash_Lookup_row12
													.lookup(row12HashKey);

										} // G_TM_M_835

										if (!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_12 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row12 != null
											&& tHash_Lookup_row12
													.getCount(row12HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.CITY = '"
										// + row12HashKey.CITY + "'");
									} // G 071

									row12Struct row12 = null;

									row12Struct fromLookup_row12 = null;
									row12 = row12Default;

									if (tHash_Lookup_row12 != null
											&& tHash_Lookup_row12.hasNext()) { // G
																				// 099

										fromLookup_row12 = tHash_Lookup_row12
												.next();

									} // G 099

									if (fromLookup_row12 != null) {
										row12 = fromLookup_row12;
									}

									if (tHash_Lookup_Cache_row12 != tHash_Lookup_row12) {
										tHash_Lookup_Cache_row12.put(row12);
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										out1 = null;

										if (!rejectedInnerJoin_tMap_12) {

											// # Output table : 'out1'
											out1_tmp.CITY_ID = row12.ID;
											out1_tmp.zip = zipRowData.zip;
											out1 = out1_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */
									// Start of branch "out1"
									if (out1 != null) {
										row10 = null;

										/**
										 * [tJoin_4 main ] start
										 */

										currentComponent = "tJoin_4";

										row10 = null;

										row10 = new row10Struct();
										row10.CITY_ID = out1.CITY_ID;
										row10.zip = out1.zip;

										if (util_tJoin_4.isJoined(out1)) {
											row10 = null;
										}

										else {

										}

										// /////////////////////

										tos_count_tJoin_4++;

										/**
										 * [tJoin_4 main ] stop
										 */
										// Start of branch "row10"
										if (row10 != null) {

											/**
											 * [tMap_13 main ] start
											 */

											currentComponent = "tMap_13";

											boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_13 = false;
											boolean mainRowRejected_tMap_13 = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
												// ###############################
												// # Output tables

												loadZip = null;

												// # Output table : 'loadZip'
												loadZip_tmp.ZIP_CODE = row10.zip;
												loadZip_tmp.CITY_ID = row10.CITY_ID;
												loadZip = loadZip_tmp;
												// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_13 = false;

											tos_count_tMap_13++;

											/**
											 * [tMap_13 main ] stop
											 */
											// Start of branch "loadZip"
											if (loadZip != null) {

												/**
												 * [tMysqlOutput_5 main ] start
												 */

												currentComponent = "tMysqlOutput_5";

												whetherReject_tMysqlOutput_5 = false;
												pstmt_tMysqlOutput_5.setInt(1,
														loadZip.ZIP_CODE);

												pstmt_tMysqlOutput_5.setInt(2,
														loadZip.CITY_ID);

												pstmt_tMysqlOutput_5.addBatch();
												nb_line_tMysqlOutput_5++;

												batchSizeCounter_tMysqlOutput_5++;

												if (batchSize_tMysqlOutput_5 <= batchSizeCounter_tMysqlOutput_5) {
													try {
														int countSum_tMysqlOutput_5 = 0;
														for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
																.executeBatch()) {
															countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
																	: countEach_tMysqlOutput_5);
														}

														insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

													} catch (java.sql.BatchUpdateException e) {

														int countSum_tMysqlOutput_5 = 0;
														for (int countEach_tMysqlOutput_5 : e
																.getUpdateCounts()) {
															countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
																	: countEach_tMysqlOutput_5);
														}

														insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

														System.err.println(e
																.getMessage());

													}

													batchSizeCounter_tMysqlOutput_5 = 0;
												}

												commitCounter_tMysqlOutput_5++;

												if (commitEvery_tMysqlOutput_5 <= commitCounter_tMysqlOutput_5) {

													try {
														int countSum_tMysqlOutput_5 = 0;
														for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
																.executeBatch()) {
															countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
																	: countEach_tMysqlOutput_5);
														}

														insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

													} catch (java.sql.BatchUpdateException e) {

														int countSum_tMysqlOutput_5 = 0;
														for (int countEach_tMysqlOutput_5 : e
																.getUpdateCounts()) {
															countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
																	: countEach_tMysqlOutput_5);
														}

														insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

														System.out.println(e
																.getMessage());

													}
													conn_tMysqlOutput_5
															.commit();

													commitCounter_tMysqlOutput_5 = 0;

												}

												tos_count_tMysqlOutput_5++;

												/**
												 * [tMysqlOutput_5 main ] stop
												 */

											} // End of branch "loadZip"

										} // End of branch "row10"

									} // End of branch "out1"

								} // End of branch "zipRowData"

								// Start of branch "stateInfo"
								if (stateInfo != null) {
									row13 = null;

									/**
									 * [tJoin_6 main ] start
									 */

									currentComponent = "tJoin_6";

									row13 = null;

									row13 = new row13Struct();
									row13.state = stateInfo.state;

									if (util_tJoin_6.isJoined(stateInfo)) {
										row13 = null;
									}

									else {

									}

									// /////////////////////

									tos_count_tJoin_6++;

									/**
									 * [tJoin_6 main ] stop
									 */
									// Start of branch "row13"
									if (row13 != null) {

										/**
										 * [tMap_9 main ] start
										 */

										currentComponent = "tMap_9";

										boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_9 = false;
										boolean mainRowRejected_tMap_9 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
											// ###############################
											// # Output tables

											loadState = null;

											// # Output table : 'loadState'
											loadState_tmp.ID = 0;
											loadState_tmp.STATE = row13.state;
											loadState_tmp.FULL_NAME = null;
											loadState = loadState_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_9 = false;

										tos_count_tMap_9++;

										/**
										 * [tMap_9 main ] stop
										 */
										// Start of branch "loadState"
										if (loadState != null) {

											/**
											 * [tMysqlOutput_7 main ] start
											 */

											currentComponent = "tMysqlOutput_7";

											whetherReject_tMysqlOutput_7 = false;
											pstmt_tMysqlOutput_7.setInt(1,
													loadState.ID);

											if (loadState.STATE == null) {
												pstmt_tMysqlOutput_7.setNull(2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tMysqlOutput_7.setString(
														2, loadState.STATE);
											}

											if (loadState.FULL_NAME == null) {
												pstmt_tMysqlOutput_7.setNull(3,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tMysqlOutput_7.setString(
														3, loadState.FULL_NAME);
											}

											pstmt_tMysqlOutput_7.addBatch();
											nb_line_tMysqlOutput_7++;

											batchSizeCounter_tMysqlOutput_7++;

											if (batchSize_tMysqlOutput_7 <= batchSizeCounter_tMysqlOutput_7) {
												try {
													int countSum_tMysqlOutput_7 = 0;
													for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
															.executeBatch()) {
														countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
																: countEach_tMysqlOutput_7);
													}

													insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

												} catch (java.sql.BatchUpdateException e) {

													int countSum_tMysqlOutput_7 = 0;
													for (int countEach_tMysqlOutput_7 : e
															.getUpdateCounts()) {
														countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
																: countEach_tMysqlOutput_7);
													}

													insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

													System.err.println(e
															.getMessage());

												}

												batchSizeCounter_tMysqlOutput_7 = 0;
											}

											commitCounter_tMysqlOutput_7++;

											if (commitEvery_tMysqlOutput_7 <= commitCounter_tMysqlOutput_7) {

												try {
													int countSum_tMysqlOutput_7 = 0;
													for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
															.executeBatch()) {
														countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
																: countEach_tMysqlOutput_7);
													}

													insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

												} catch (java.sql.BatchUpdateException e) {

													int countSum_tMysqlOutput_7 = 0;
													for (int countEach_tMysqlOutput_7 : e
															.getUpdateCounts()) {
														countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
																: countEach_tMysqlOutput_7);
													}

													insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

													System.out.println(e
															.getMessage());

												}
												conn_tMysqlOutput_7.commit();

												commitCounter_tMysqlOutput_7 = 0;

											}

											tos_count_tMysqlOutput_7++;

											/**
											 * [tMysqlOutput_7 main ] stop
											 */

										} // End of branch "loadState"

									} // End of branch "row13"

								} // End of branch "stateInfo"

								// Start of branch "stateCity"
								if (stateCity != null) {
									row5 = null;

									/**
									 * [tJoin_5 main ] start
									 */

									currentComponent = "tJoin_5";

									row5 = null;

									row5 = new row5Struct();
									row5.city = stateCity.city;
									row5.state = stateCity.state;
									row5.zip = stateCity.zip;

									if (util_tJoin_5.isJoined(stateCity)) {
										row5 = null;
									}

									else {

									}

									// /////////////////////

									tos_count_tJoin_5++;

									/**
									 * [tJoin_5 main ] stop
									 */
									// Start of branch "row5"
									if (row5 != null) {

										/**
										 * [tMap_3 main ] start
										 */

										currentComponent = "tMap_3";

										boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_3 = false;
										boolean mainRowRejected_tMap_3 = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table "row15"
										// /////////////////////////////////////////////

										boolean forceLooprow15 = false;

										row15Struct row15ObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_3 = false;

											row15HashKey.STATE = row5.state;

											row15HashKey.hashCodeDirty = true;

											tHash_Lookup_Cache_row15
													.lookup(row15HashKey);
											if (tHash_Lookup_Cache_row15
													.hasNext()) { // G_TM_M_835

												tHash_Lookup_row15 = tHash_Lookup_Cache_row15;

											} // G_TM_M_834
											else { // G_TM_M_835

												tMysqlInput_11Process(globalMap);

												tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
														.get("tHash_Lookup_row15"));

												tHash_Lookup_row15.initGet();

												tHash_Lookup_row15
														.lookup(row15HashKey);

											} // G_TM_M_835

											if (!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

												rejectedInnerJoin_tMap_3 = true;

											} // G_TM_M_090

										} // G_TM_M_020

										if (tHash_Lookup_row15 != null
												&& tHash_Lookup_row15
														.getCount(row15HashKey) > 1) { // G
																						// 071

											// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.STATE = '"
											// + row15HashKey.STATE + "'");
										} // G 071

										row15Struct row15 = null;

										row15Struct fromLookup_row15 = null;
										row15 = row15Default;

										if (tHash_Lookup_row15 != null
												&& tHash_Lookup_row15.hasNext()) { // G
																					// 099

											fromLookup_row15 = tHash_Lookup_row15
													.next();

										} // G 099

										if (fromLookup_row15 != null) {
											row15 = fromLookup_row15;
										}

										if (tHash_Lookup_Cache_row15 != tHash_Lookup_row15) {
											tHash_Lookup_Cache_row15.put(row15);
										}

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
											// ###############################
											// # Output tables

											loadCity = null;

											if (!rejectedInnerJoin_tMap_3) {

												// # Output table : 'loadCity'
												loadCity_tmp.ID = 0;
												loadCity_tmp.CITY = row5.city;
												loadCity_tmp.SUMMARY = "na";
												loadCity_tmp.IMAGE_URL = "na";
												loadCity_tmp.STATE_ID = row15.ID;
												loadCity = loadCity_tmp;
											} // closing inner join bracket (2)
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_3 = false;

										tos_count_tMap_3++;

										/**
										 * [tMap_3 main ] stop
										 */
										// Start of branch "loadCity"
										if (loadCity != null) {

											/**
											 * [tMysqlOutput_3 main ] start
											 */

											currentComponent = "tMysqlOutput_3";

											whetherReject_tMysqlOutput_3 = false;
											pstmt_tMysqlOutput_3.setInt(1,
													loadCity.ID);

											if (loadCity.CITY == null) {
												pstmt_tMysqlOutput_3.setNull(2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tMysqlOutput_3.setString(
														2, loadCity.CITY);
											}

											if (loadCity.SUMMARY == null) {
												pstmt_tMysqlOutput_3.setNull(3,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tMysqlOutput_3.setString(
														3, loadCity.SUMMARY);
											}

											if (loadCity.IMAGE_URL == null) {
												pstmt_tMysqlOutput_3.setNull(4,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tMysqlOutput_3.setString(
														4, loadCity.IMAGE_URL);
											}

											pstmt_tMysqlOutput_3.setInt(5,
													loadCity.STATE_ID);

											pstmt_tMysqlOutput_3.addBatch();
											nb_line_tMysqlOutput_3++;

											batchSizeCounter_tMysqlOutput_3++;

											if (batchSize_tMysqlOutput_3 <= batchSizeCounter_tMysqlOutput_3) {
												try {
													int countSum_tMysqlOutput_3 = 0;
													for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
															.executeBatch()) {
														countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
																: countEach_tMysqlOutput_3);
													}

													insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

												} catch (java.sql.BatchUpdateException e) {

													int countSum_tMysqlOutput_3 = 0;
													for (int countEach_tMysqlOutput_3 : e
															.getUpdateCounts()) {
														countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
																: countEach_tMysqlOutput_3);
													}

													insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

													System.err.println(e
															.getMessage());

												}

												batchSizeCounter_tMysqlOutput_3 = 0;
											}

											commitCounter_tMysqlOutput_3++;

											if (commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

												try {
													int countSum_tMysqlOutput_3 = 0;
													for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
															.executeBatch()) {
														countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
																: countEach_tMysqlOutput_3);
													}

													insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

												} catch (java.sql.BatchUpdateException e) {

													int countSum_tMysqlOutput_3 = 0;
													for (int countEach_tMysqlOutput_3 : e
															.getUpdateCounts()) {
														countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
																: countEach_tMysqlOutput_3);
													}

													insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

													System.out.println(e
															.getMessage());

												}
												conn_tMysqlOutput_3.commit();

												commitCounter_tMysqlOutput_3 = 0;

											}

											tos_count_tMysqlOutput_3++;

											/**
											 * [tMysqlOutput_3 main ] stop
											 */

										} // End of branch "loadCity"

									} // End of branch "row5"

								} // End of branch "stateCity"

								/**
								 * [tFileInputJSON_1 end ] start
								 */

								currentComponent = "tFileInputJSON_1";

							}
							globalMap.put("tFileInputJSON_1_NB_LINE",
									nb_line_tFileInputJSON_1);

							ok_Hash.put("tFileInputJSON_1", true);
							end_Hash.put("tFileInputJSON_1",
									System.currentTimeMillis());

							/**
							 * [tFileInputJSON_1 end ] stop
							 */

							/**
							 * [tJavaRow_1 end ] start
							 */

							currentComponent = "tJavaRow_1";

							globalMap.put("tJavaRow_1_NB_LINE",
									nb_line_tJavaRow_1);

							ok_Hash.put("tJavaRow_1", true);
							end_Hash.put("tJavaRow_1",
									System.currentTimeMillis());

							/**
							 * [tJavaRow_1 end ] stop
							 */

							/**
							 * [tMap_10 end ] start
							 */

							currentComponent = "tMap_10";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_10", true);
							end_Hash.put("tMap_10", System.currentTimeMillis());

							/**
							 * [tMap_10 end ] stop
							 */

							/**
							 * [tJoin_5 end ] start
							 */

							currentComponent = "tJoin_5";

							ok_Hash.put("tJoin_5", true);
							end_Hash.put("tJoin_5", System.currentTimeMillis());

							/**
							 * [tJoin_5 end ] stop
							 */

							/**
							 * [tMap_3 end ] start
							 */

							currentComponent = "tMap_3";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_3", true);
							end_Hash.put("tMap_3", System.currentTimeMillis());

							/**
							 * [tMap_3 end ] stop
							 */

							/**
							 * [tMysqlOutput_3 end ] start
							 */

							currentComponent = "tMysqlOutput_3";

							try {
								if (batchSizeCounter_tMysqlOutput_3 != 0) {
									int countSum_tMysqlOutput_3 = 0;
									for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
											.executeBatch()) {
										countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
												: countEach_tMysqlOutput_3);
									}

									insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

								}

							} catch (java.sql.BatchUpdateException e) {

								int countSum_tMysqlOutput_3 = 0;
								for (int countEach_tMysqlOutput_3 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
											: countEach_tMysqlOutput_3);
								}

								insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

								System.err.println(e.getMessage());

							}
							batchSizeCounter_tMysqlOutput_3 = 0;

							try {
								if (pstmt_tMysqlOutput_3 != null) {
									int countSum_tMysqlOutput_3 = 0;
									for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
											.executeBatch()) {
										countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
												: countEach_tMysqlOutput_3);
									}

									insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

								}
							} catch (java.sql.BatchUpdateException e) {

								int countSum_tMysqlOutput_3 = 0;
								for (int countEach_tMysqlOutput_3 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
											: countEach_tMysqlOutput_3);
								}

								insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

								System.out.println(e.getMessage());

							}

							if (pstmt_tMysqlOutput_3 != null) {

								pstmt_tMysqlOutput_3.close();

							}

							conn_tMysqlOutput_3.commit();

							conn_tMysqlOutput_3.close();

							nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3
									+ deletedCount_tMysqlOutput_3;
							nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3
									+ updatedCount_tMysqlOutput_3;
							nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3
									+ insertedCount_tMysqlOutput_3;
							nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3
									+ rejectedCount_tMysqlOutput_3;

							globalMap.put("tMysqlOutput_3_NB_LINE",
									nb_line_tMysqlOutput_3);
							globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",
									nb_line_update_tMysqlOutput_3);
							globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",
									nb_line_inserted_tMysqlOutput_3);
							globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",
									nb_line_deleted_tMysqlOutput_3);
							globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED",
									nb_line_rejected_tMysqlOutput_3);

							ok_Hash.put("tMysqlOutput_3", true);
							end_Hash.put("tMysqlOutput_3",
									System.currentTimeMillis());

							/**
							 * [tMysqlOutput_3 end ] stop
							 */

							/**
							 * [tJoin_6 end ] start
							 */

							currentComponent = "tJoin_6";

							ok_Hash.put("tJoin_6", true);
							end_Hash.put("tJoin_6", System.currentTimeMillis());

							/**
							 * [tJoin_6 end ] stop
							 */

							/**
							 * [tMap_9 end ] start
							 */

							currentComponent = "tMap_9";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_9", true);
							end_Hash.put("tMap_9", System.currentTimeMillis());

							/**
							 * [tMap_9 end ] stop
							 */

							/**
							 * [tMysqlOutput_7 end ] start
							 */

							currentComponent = "tMysqlOutput_7";

							try {
								if (batchSizeCounter_tMysqlOutput_7 != 0) {
									int countSum_tMysqlOutput_7 = 0;
									for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
											.executeBatch()) {
										countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
												: countEach_tMysqlOutput_7);
									}

									insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

								}

							} catch (java.sql.BatchUpdateException e) {

								int countSum_tMysqlOutput_7 = 0;
								for (int countEach_tMysqlOutput_7 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
											: countEach_tMysqlOutput_7);
								}

								insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

								System.err.println(e.getMessage());

							}
							batchSizeCounter_tMysqlOutput_7 = 0;

							try {
								if (pstmt_tMysqlOutput_7 != null) {
									int countSum_tMysqlOutput_7 = 0;
									for (int countEach_tMysqlOutput_7 : pstmt_tMysqlOutput_7
											.executeBatch()) {
										countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
												: countEach_tMysqlOutput_7);
									}

									insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

								}
							} catch (java.sql.BatchUpdateException e) {

								int countSum_tMysqlOutput_7 = 0;
								for (int countEach_tMysqlOutput_7 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_7 += (countEach_tMysqlOutput_7 < 0 ? 0
											: countEach_tMysqlOutput_7);
								}

								insertedCount_tMysqlOutput_7 += countSum_tMysqlOutput_7;

								System.out.println(e.getMessage());

							}

							if (pstmt_tMysqlOutput_7 != null) {

								pstmt_tMysqlOutput_7.close();

							}

							conn_tMysqlOutput_7.commit();

							conn_tMysqlOutput_7.close();

							nb_line_deleted_tMysqlOutput_7 = nb_line_deleted_tMysqlOutput_7
									+ deletedCount_tMysqlOutput_7;
							nb_line_update_tMysqlOutput_7 = nb_line_update_tMysqlOutput_7
									+ updatedCount_tMysqlOutput_7;
							nb_line_inserted_tMysqlOutput_7 = nb_line_inserted_tMysqlOutput_7
									+ insertedCount_tMysqlOutput_7;
							nb_line_rejected_tMysqlOutput_7 = nb_line_rejected_tMysqlOutput_7
									+ rejectedCount_tMysqlOutput_7;

							globalMap.put("tMysqlOutput_7_NB_LINE",
									nb_line_tMysqlOutput_7);
							globalMap.put("tMysqlOutput_7_NB_LINE_UPDATED",
									nb_line_update_tMysqlOutput_7);
							globalMap.put("tMysqlOutput_7_NB_LINE_INSERTED",
									nb_line_inserted_tMysqlOutput_7);
							globalMap.put("tMysqlOutput_7_NB_LINE_DELETED",
									nb_line_deleted_tMysqlOutput_7);
							globalMap.put("tMysqlOutput_7_NB_LINE_REJECTED",
									nb_line_rejected_tMysqlOutput_7);

							ok_Hash.put("tMysqlOutput_7", true);
							end_Hash.put("tMysqlOutput_7",
									System.currentTimeMillis());

							/**
							 * [tMysqlOutput_7 end ] stop
							 */

							/**
							 * [tMap_12 end ] start
							 */

							currentComponent = "tMap_12";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_12", true);
							end_Hash.put("tMap_12", System.currentTimeMillis());

							/**
							 * [tMap_12 end ] stop
							 */

							/**
							 * [tJoin_4 end ] start
							 */

							currentComponent = "tJoin_4";

							ok_Hash.put("tJoin_4", true);
							end_Hash.put("tJoin_4", System.currentTimeMillis());

							/**
							 * [tJoin_4 end ] stop
							 */

							/**
							 * [tMap_13 end ] start
							 */

							currentComponent = "tMap_13";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_13", true);
							end_Hash.put("tMap_13", System.currentTimeMillis());

							/**
							 * [tMap_13 end ] stop
							 */

							/**
							 * [tMysqlOutput_5 end ] start
							 */

							currentComponent = "tMysqlOutput_5";

							try {
								if (batchSizeCounter_tMysqlOutput_5 != 0) {
									int countSum_tMysqlOutput_5 = 0;
									for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
											.executeBatch()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

								}

							} catch (java.sql.BatchUpdateException e) {

								int countSum_tMysqlOutput_5 = 0;
								for (int countEach_tMysqlOutput_5 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
											: countEach_tMysqlOutput_5);
								}

								insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

								System.err.println(e.getMessage());

							}
							batchSizeCounter_tMysqlOutput_5 = 0;

							try {
								if (pstmt_tMysqlOutput_5 != null) {
									int countSum_tMysqlOutput_5 = 0;
									for (int countEach_tMysqlOutput_5 : pstmt_tMysqlOutput_5
											.executeBatch()) {
										countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
												: countEach_tMysqlOutput_5);
									}

									insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

								}
							} catch (java.sql.BatchUpdateException e) {

								int countSum_tMysqlOutput_5 = 0;
								for (int countEach_tMysqlOutput_5 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_5 += (countEach_tMysqlOutput_5 < 0 ? 0
											: countEach_tMysqlOutput_5);
								}

								insertedCount_tMysqlOutput_5 += countSum_tMysqlOutput_5;

								System.out.println(e.getMessage());

							}

							if (pstmt_tMysqlOutput_5 != null) {

								pstmt_tMysqlOutput_5.close();

							}

							conn_tMysqlOutput_5.commit();

							conn_tMysqlOutput_5.close();

							nb_line_deleted_tMysqlOutput_5 = nb_line_deleted_tMysqlOutput_5
									+ deletedCount_tMysqlOutput_5;
							nb_line_update_tMysqlOutput_5 = nb_line_update_tMysqlOutput_5
									+ updatedCount_tMysqlOutput_5;
							nb_line_inserted_tMysqlOutput_5 = nb_line_inserted_tMysqlOutput_5
									+ insertedCount_tMysqlOutput_5;
							nb_line_rejected_tMysqlOutput_5 = nb_line_rejected_tMysqlOutput_5
									+ rejectedCount_tMysqlOutput_5;

							globalMap.put("tMysqlOutput_5_NB_LINE",
									nb_line_tMysqlOutput_5);
							globalMap.put("tMysqlOutput_5_NB_LINE_UPDATED",
									nb_line_update_tMysqlOutput_5);
							globalMap.put("tMysqlOutput_5_NB_LINE_INSERTED",
									nb_line_inserted_tMysqlOutput_5);
							globalMap.put("tMysqlOutput_5_NB_LINE_DELETED",
									nb_line_deleted_tMysqlOutput_5);
							globalMap.put("tMysqlOutput_5_NB_LINE_REJECTED",
									nb_line_rejected_tMysqlOutput_5);

							ok_Hash.put("tMysqlOutput_5", true);
							end_Hash.put("tMysqlOutput_5",
									System.currentTimeMillis());

							/**
							 * [tMysqlOutput_5 end ] stop
							 */

						} // End of branch "zipCode"

						// Start of branch "propertyData"
						if (propertyData != null) {
							row9 = null;

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "custData"
							// /////////////////////////////////////////////

							boolean forceLoopcustData = false;

							custDataStruct custDataObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								custDataHashKey.CUST_NAME = propertyData.customer;

								custDataHashKey.hashCodeDirty = true;

								tHash_Lookup_custData.lookup(custDataHashKey);

								if (!tHash_Lookup_custData.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_4 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_custData != null
									&& tHash_Lookup_custData
											.getCount(custDataHashKey) > 1) { // G
																				// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'custData' and it contains more one result from keys :  custData.CUST_NAME = '"
								// + custDataHashKey.CUST_NAME + "'");
							} // G 071

							custDataStruct custData = null;

							custDataStruct fromLookup_custData = null;
							custData = custDataDefault;

							if (tHash_Lookup_custData != null
									&& tHash_Lookup_custData.hasNext()) { // G
																			// 099

								fromLookup_custData = tHash_Lookup_custData
										.next();

							} // G 099

							if (fromLookup_custData != null) {
								custData = fromLookup_custData;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								loadData = null;

								if (!rejectedInnerJoin_tMap_4) {

									// # Output table : 'loadData'
									loadData_tmp.PROP_NAME = propertyData.name;
									loadData_tmp.PRICE = propertyData.price__c;
									loadData_tmp.SQFT = "0";
									loadData_tmp.DESCRIPTION = propertyData.pba__description_pb__c;
									loadData_tmp.NUM_BEDS = propertyData.bedrooms__c;
									loadData_tmp.NUM_BATHS = propertyData.bathrooms__c;
									loadData_tmp.TYPE = propertyData.pba__propertytype__c;
									loadData_tmp.STATUS = propertyData.pba__status__c;
									loadData_tmp.DATA_SOURCE_ID = custData.DATA_SOURCE_ID;
									loadData_tmp.ZIP_CODE = propertyData.zipcode__c;
									loadData = loadData_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "loadData"
							if (loadData != null) {
								row9 = null;

								/**
								 * [tJoin_3 main ] start
								 */

								currentComponent = "tJoin_3";

								row9 = null;

								row9 = new row9Struct();
								row9.PROP_NAME = loadData.PROP_NAME;
								row9.PRICE = loadData.PRICE;
								row9.SQFT = loadData.SQFT;
								row9.DESCRIPTION = loadData.DESCRIPTION;
								row9.NUM_BEDS = loadData.NUM_BEDS;
								row9.NUM_BATHS = loadData.NUM_BATHS;
								row9.TYPE = loadData.TYPE;
								row9.STATUS = loadData.STATUS;
								row9.DATA_SOURCE_ID = loadData.DATA_SOURCE_ID;
								row9.ZIP_CODE = loadData.ZIP_CODE;

								if (util_tJoin_3.isJoined(loadData)) {
									row9 = null;
								}

								else {

								}

								// /////////////////////

								tos_count_tJoin_3++;

								/**
								 * [tJoin_3 main ] stop
								 */
								// Start of branch "row9"
								if (row9 != null) {

									/**
									 * [tJavaRow_3 main ] start
									 */

									currentComponent = "tJavaRow_3";

									// Code generated according to input schema
									// and output schema
									System.out
											.println("***** Loading New Property Data for:"
													+ row9.PROP_NAME + " *****");
									row14.PROP_NAME = row9.PROP_NAME;
									row14.PRICE = row9.PRICE;
									row14.SQFT = row9.SQFT;
									row14.DESCRIPTION = row9.DESCRIPTION;
									row14.NUM_BEDS = row9.NUM_BEDS;
									row14.NUM_BATHS = row9.NUM_BATHS;
									row14.TYPE = row9.TYPE;
									row14.STATUS = row9.STATUS;
									row14.ZIP_CODE = row9.ZIP_CODE;
									row14.DATA_SOURCE_ID = row9.DATA_SOURCE_ID;
									row14.PROP_UUID = UUID.randomUUID()
											.toString();

									nb_line_tJavaRow_3++;

									tos_count_tJavaRow_3++;

									/**
									 * [tJavaRow_3 main ] stop
									 */

									/**
									 * [tMap_8 main ] start
									 */

									currentComponent = "tMap_8";

									boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_8 = false;
									boolean mainRowRejected_tMap_8 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
										// ###############################
										// # Output tables

										newData = null;

										// # Output table : 'newData'
										newData_tmp.ID = 0;
										newData_tmp.UUID = row14.PROP_UUID;
										newData_tmp.PROP_NAME = row14.PROP_NAME;
										newData_tmp.PRICE = row14.PRICE;
										newData_tmp.SQFT = row14.SQFT;
										newData_tmp.DESCRIPTION = row14.DESCRIPTION;
										newData_tmp.NUM_BEDS = row14.NUM_BEDS;
										newData_tmp.NUM_BATHS = row14.NUM_BATHS;
										newData_tmp.TYPE = row14.TYPE;
										newData_tmp.STATUS = row14.STATUS;
										newData_tmp.DATA_SOURCE_ID = row14.DATA_SOURCE_ID;
										newData_tmp.ZIP_CODE = row14.ZIP_CODE;
										newData = newData_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_8 = false;

									tos_count_tMap_8++;

									/**
									 * [tMap_8 main ] stop
									 */
									// Start of branch "newData"
									if (newData != null) {

										/**
										 * [tMysqlOutput_1 main ] start
										 */

										currentComponent = "tMysqlOutput_1";

										whetherReject_tMysqlOutput_1 = false;
										pstmt_tMysqlOutput_1.setInt(1,
												newData.ID);

										if (newData.UUID == null) {
											pstmt_tMysqlOutput_1.setNull(2,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tMysqlOutput_1.setString(2,
													newData.UUID);
										}

										if (newData.PROP_NAME == null) {
											pstmt_tMysqlOutput_1.setNull(3,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tMysqlOutput_1.setString(3,
													newData.PROP_NAME);
										}

										pstmt_tMysqlOutput_1.setFloat(4,
												newData.PRICE);

										if (newData.SQFT == null) {
											pstmt_tMysqlOutput_1.setNull(5,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tMysqlOutput_1.setString(5,
													newData.SQFT);
										}

										if (newData.DESCRIPTION == null) {
											pstmt_tMysqlOutput_1.setNull(6,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tMysqlOutput_1.setString(6,
													newData.DESCRIPTION);
										}

										pstmt_tMysqlOutput_1.setFloat(7,
												newData.NUM_BEDS);

										pstmt_tMysqlOutput_1.setFloat(8,
												newData.NUM_BATHS);

										if (newData.TYPE == null) {
											pstmt_tMysqlOutput_1.setNull(9,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tMysqlOutput_1.setString(9,
													newData.TYPE);
										}

										if (newData.STATUS == null) {
											pstmt_tMysqlOutput_1.setNull(10,
													java.sql.Types.VARCHAR);
										} else {
											pstmt_tMysqlOutput_1.setString(10,
													newData.STATUS);
										}

										pstmt_tMysqlOutput_1.setInt(11,
												newData.DATA_SOURCE_ID);

										pstmt_tMysqlOutput_1.setInt(12,
												newData.ZIP_CODE);

										try {
											insertedCount_tMysqlOutput_1 = insertedCount_tMysqlOutput_1
													+ pstmt_tMysqlOutput_1
															.executeUpdate();
											nb_line_tMysqlOutput_1++;
										} catch (Exception e) {
											whetherReject_tMysqlOutput_1 = true;
											System.err.print(e.getMessage());
										}
										commitCounter_tMysqlOutput_1++;

										if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

											try {
												int countSum_tMysqlOutput_1 = 0;
												for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
														.executeBatch()) {
													countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
															: countEach_tMysqlOutput_1);
												}

												insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tMysqlOutput_1 = 0;
												for (int countEach_tMysqlOutput_1 : e
														.getUpdateCounts()) {
													countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
															: countEach_tMysqlOutput_1);
												}

												insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

												System.out.println(e
														.getMessage());

											}
											conn_tMysqlOutput_1.commit();

											commitCounter_tMysqlOutput_1 = 0;

										}

										tos_count_tMysqlOutput_1++;

										/**
										 * [tMysqlOutput_1 main ] stop
										 */

									} // End of branch "newData"

								} // End of branch "row9"

							} // End of branch "loadData"

						} // End of branch "propertyData"

					} // End of branch "row1"

					/**
					 * [tFileInputXML_1 end ] start
					 */

					currentComponent = "tFileInputXML_1";

				}
				try {
					looper_tFileInputXML_1.handleTaskResponse();
				} catch (Exception e) {

					System.err.println(e.getMessage());

				}
				globalMap.put("tFileInputXML_1_NB_LINE",
						nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_custData != null) {
					tHash_Lookup_custData.endGet();
				}
				globalMap.remove("tHash_Lookup_custData");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tJoin_3 end ] start
				 */

				currentComponent = "tJoin_3";

				ok_Hash.put("tJoin_3", true);
				end_Hash.put("tJoin_3", System.currentTimeMillis());

				/**
				 * [tJoin_3 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (pstmt_tMysqlOutput_1 != null) {
						int countSum_tMysqlOutput_1 = 0;
						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: countEach_tMysqlOutput_1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}
				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.out.println(e.getMessage());

				}

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				conn_tMysqlOutput_1.commit();

				conn_tMysqlOutput_1.close();

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputXML_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJava_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tJoin_4"
			globalMap.put("tHash_row6", null);

			// free memory for "tMap_12"
			globalMap.put("tHash_Lookup_row12", null);

			// free memory for "tJoin_6"
			globalMap.put("tHash_row11", null);

			// free memory for "tMap_3"
			globalMap.put("tHash_Lookup_row15", null);

			// free memory for "tJoin_5"
			globalMap.put("tHash_row4", null);

			// free memory for "tJoin_3"
			globalMap.put("tHash_getCurrentProperties", null);

			// free memory for "tMap_4"
			globalMap.put("tHash_Lookup_custData", null);

		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());
				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out
						.println("***** Loading Property Finacial Data *****");

				/**
				 * [tJava_1 begin ] stop
				 */
				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */
				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());
				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;
				class DealChildJobLibrary_tRunJob_1 {

					public String replaceJarPathsFromCrcMap(
							String originalClassPathLine) throws Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap")
								.getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois
									.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine,
									crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when
																		// not
																		// use
																		// cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line,
							java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap
								.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line,
							java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line
									.replace(libStringFinder,
											"../../../cache/lib/" + crc + "/"
													+ jarName);
						} else if (line
								.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc
											+ "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/"
											+ jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

				/**
				 * [tRunJob_1 begin ] stop
				 */
				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
				String osName_tRunJob_1 = System.getProperty("os.name");
				if (osName_tRunJob_1 != null
						&& osName_tRunJob_1.toLowerCase().startsWith("win")) {

					paraList_tRunJob_1.add("java");

					paraList_tRunJob_1.add("-Xms256M");

					paraList_tRunJob_1.add("-Xmx1024M");

					paraList_tRunJob_1.add("-cp");

					paraList_tRunJob_1
							.add(dealChildJobLibrary_tRunJob_1
									.replaceJarPathsFromCrcMap("../lib/advancedPersistentLookupLib-1.0.jar;../lib/commons-codec-1.3.jar;../lib/commons-collections-3.2.jar;../lib/commons-httpclient-3.0.1.jar;../lib/commons-logging-1.1.jar;../lib/dom4j-1.6.1.jar;../lib/jboss-serialization.jar;../lib/jcifs-1.3.0.jar;../lib/log4j-1.2.15.jar;../lib/mysql-connector-java-5.1.22-bin.jar;../lib/TalendSAX.jar;../lib/trove.jar;../lib/systemRoutines.jar;../lib/userRoutines.jar;.;getpropfinacials_0_2.jar;getpropfinacials_0_2.jar;loadfinacialdata_0_1.jar;loadpropertyimages_0_2.jar;"));

					paraList_tRunJob_1
							.add("talonetl.getpropfinacials_0_2.getPropFinacials");

					paraList_tRunJob_1.add("--father_pid=" + pid);

					paraList_tRunJob_1.add("--root_pid=" + rootPid);

					paraList_tRunJob_1.add("--father_node=tRunJob_1");

					paraList_tRunJob_1.add("--context=Default");

					paraList_tRunJob_1.add("%*");

				} else {

					paraList_tRunJob_1.add("java");

					paraList_tRunJob_1.add("-Xms256M");

					paraList_tRunJob_1.add("-Xmx1024M");

					paraList_tRunJob_1.add("-cp");

					paraList_tRunJob_1
							.add(dealChildJobLibrary_tRunJob_1
									.replaceJarPathsFromCrcMap(
											"$ROOT_PATH/../lib/advancedPersistentLookupLib-1.0.jar:$ROOT_PATH/../lib/commons-codec-1.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.jar:$ROOT_PATH/../lib/commons-httpclient-3.0.1.jar:$ROOT_PATH/../lib/commons-logging-1.1.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jcifs-1.3.0.jar:$ROOT_PATH/../lib/log4j-1.2.15.jar:$ROOT_PATH/../lib/mysql-connector-java-5.1.22-bin.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH:$ROOT_PATH/../lib/systemRoutines.jar:$ROOT_PATH/../lib/userRoutines.jar::.:$ROOT_PATH/getpropfinacials_0_2.jar:$ROOT_PATH/getpropfinacials_0_2.jar:$ROOT_PATH/loadfinacialdata_0_1.jar:$ROOT_PATH/loadpropertyimages_0_2.jar:")
									.replace("$ROOT_PATH",
											System.getProperty("user.dir")));

					paraList_tRunJob_1
							.add("talonetl.getpropfinacials_0_2.getPropFinacials");

					paraList_tRunJob_1.add("--father_pid=" + pid);

					paraList_tRunJob_1.add("--root_pid=" + rootPid);

					paraList_tRunJob_1.add("--father_node=tRunJob_1");

					paraList_tRunJob_1.add("--context=Default");

					paraList_tRunJob_1.add("$@");

				}

				// for feature:10589
				paraList_tRunJob_1.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);
				}

				parentContextMap_tRunJob_1.put("propertySourceUri",
						context.propertySourceUri);
				parentContextMap_tRunJob_1.put("cusomterName",
						context.cusomterName);
				parentContextMap_tRunJob_1.put("talon_Password",
						context.talon_Password);
				parentContextMap_tRunJob_1.put("talon_AdditionalParams",
						context.talon_AdditionalParams);
				parentContextMap_tRunJob_1
						.put("talon_Port", context.talon_Port);
				parentContextMap_tRunJob_1.put("talon_Database",
						context.talon_Database);
				parentContextMap_tRunJob_1.put("talon_Server",
						context.talon_Server);
				parentContextMap_tRunJob_1.put("talon_Login",
						context.talon_Login);
				parentContextMap_tRunJob_1.put("cityStatsInfoApiUri",
						context.cityStatsInfoApiUri);
				parentContextMap_tRunJob_1.put("authId", context.authId);
				parentContextMap_tRunJob_1.put("authToken", context.authToken);

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = context.propertySourceUri;
				paraList_tRunJob_1.add("--context_param propertySourceUri="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				parentContextMap_tRunJob_1.put("propertySourceUri",
						obj_tRunJob_1);
				Runtime runtime_tRunJob_1 = Runtime.getRuntime();
				final Process ps_tRunJob_1;
				ps_tRunJob_1 = runtime_tRunJob_1
						.exec((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				Thread normal_tRunJob_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tRunJob_1.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.out.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				normal_tRunJob_1.start();

				final StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
				Thread error_tRunJob_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tRunJob_1.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									errorMsg_tRunJob_1.append(line)
											.append("\n");
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				error_tRunJob_1.start();

				// 0 indicates normal termination
				int result_tRunJob_1 = ps_tRunJob_1.waitFor();
				normal_tRunJob_1.join(10000);
				error_tRunJob_1.join(10000);

				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", result_tRunJob_1);
				if (result_tRunJob_1 != 0) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							errorMsg_tRunJob_1.toString());

					throw new RuntimeException("Child job return "
							+ result_tRunJob_1
							+ ". It doesn't terminate normally.\n"
							+ errorMsg_tRunJob_1.toString());

				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */
				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tRunJob_2Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());
				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;
				class DealChildJobLibrary_tRunJob_2 {

					public String replaceJarPathsFromCrcMap(
							String originalClassPathLine) throws Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap")
								.getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois
									.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine,
									crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when
																		// not
																		// use
																		// cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line,
							java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap
								.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line,
							java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line
									.replace(libStringFinder,
											"../../../cache/lib/" + crc + "/"
													+ jarName);
						} else if (line
								.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc
											+ "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/"
											+ jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

				/**
				 * [tRunJob_2 begin ] stop
				 */
				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
				String osName_tRunJob_2 = System.getProperty("os.name");
				if (osName_tRunJob_2 != null
						&& osName_tRunJob_2.toLowerCase().startsWith("win")) {

					paraList_tRunJob_2.add("java");

					paraList_tRunJob_2.add("-Xms256M");

					paraList_tRunJob_2.add("-Xmx1024M");

					paraList_tRunJob_2.add("-cp");

					paraList_tRunJob_2
							.add(dealChildJobLibrary_tRunJob_2
									.replaceJarPathsFromCrcMap("../lib/advancedPersistentLookupLib-1.0.jar;../lib/commons-codec-1.3.jar;../lib/commons-collections-3.2.jar;../lib/commons-httpclient-3.0.1.jar;../lib/commons-logging-1.1.jar;../lib/dom4j-1.6.1.jar;../lib/jboss-serialization.jar;../lib/jcifs-1.3.0.jar;../lib/log4j-1.2.15.jar;../lib/mysql-connector-java-5.1.22-bin.jar;../lib/TalendSAX.jar;../lib/trove.jar;../lib/systemRoutines.jar;../lib/userRoutines.jar;.;loadpropertyimages_0_2.jar;getpropfinacials_0_2.jar;loadfinacialdata_0_1.jar;loadpropertyimages_0_2.jar;"));

					paraList_tRunJob_2
							.add("talonetl.loadpropertyimages_0_2.loadPropertyImages");

					paraList_tRunJob_2.add("--father_pid=" + pid);

					paraList_tRunJob_2.add("--root_pid=" + rootPid);

					paraList_tRunJob_2.add("--father_node=tRunJob_2");

					paraList_tRunJob_2.add("--context=Default");

					paraList_tRunJob_2.add("%*");

				} else {

					paraList_tRunJob_2.add("java");

					paraList_tRunJob_2.add("-Xms256M");

					paraList_tRunJob_2.add("-Xmx1024M");

					paraList_tRunJob_2.add("-cp");

					paraList_tRunJob_2
							.add(dealChildJobLibrary_tRunJob_2
									.replaceJarPathsFromCrcMap(
											"$ROOT_PATH/../lib/advancedPersistentLookupLib-1.0.jar:$ROOT_PATH/../lib/commons-codec-1.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.jar:$ROOT_PATH/../lib/commons-httpclient-3.0.1.jar:$ROOT_PATH/../lib/commons-logging-1.1.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jcifs-1.3.0.jar:$ROOT_PATH/../lib/log4j-1.2.15.jar:$ROOT_PATH/../lib/mysql-connector-java-5.1.22-bin.jar:$ROOT_PATH/../lib/TalendSAX.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH:$ROOT_PATH/../lib/systemRoutines.jar:$ROOT_PATH/../lib/userRoutines.jar::.:$ROOT_PATH/loadpropertyimages_0_2.jar:$ROOT_PATH/getpropfinacials_0_2.jar:$ROOT_PATH/loadfinacialdata_0_1.jar:$ROOT_PATH/loadpropertyimages_0_2.jar:")
									.replace("$ROOT_PATH",
											System.getProperty("user.dir")));

					paraList_tRunJob_2
							.add("talonetl.loadpropertyimages_0_2.loadPropertyImages");

					paraList_tRunJob_2.add("--father_pid=" + pid);

					paraList_tRunJob_2.add("--root_pid=" + rootPid);

					paraList_tRunJob_2.add("--father_node=tRunJob_2");

					paraList_tRunJob_2.add("--context=Default");

					paraList_tRunJob_2.add("$@");

				}

				// for feature:10589
				paraList_tRunJob_2.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("propertySourceUri",
						context.propertySourceUri);
				parentContextMap_tRunJob_2.put("cusomterName",
						context.cusomterName);
				parentContextMap_tRunJob_2.put("talon_Password",
						context.talon_Password);
				parentContextMap_tRunJob_2.put("talon_AdditionalParams",
						context.talon_AdditionalParams);
				parentContextMap_tRunJob_2
						.put("talon_Port", context.talon_Port);
				parentContextMap_tRunJob_2.put("talon_Database",
						context.talon_Database);
				parentContextMap_tRunJob_2.put("talon_Server",
						context.talon_Server);
				parentContextMap_tRunJob_2.put("talon_Login",
						context.talon_Login);
				parentContextMap_tRunJob_2.put("cityStatsInfoApiUri",
						context.cityStatsInfoApiUri);
				parentContextMap_tRunJob_2.put("authId", context.authId);
				parentContextMap_tRunJob_2.put("authToken", context.authToken);

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = context.propertySourceUri;
				paraList_tRunJob_2.add("--context_param propertySourceUri="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("propertySourceUri",
						obj_tRunJob_2);
				Runtime runtime_tRunJob_2 = Runtime.getRuntime();
				final Process ps_tRunJob_2;
				ps_tRunJob_2 = runtime_tRunJob_2
						.exec((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				Thread normal_tRunJob_2 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tRunJob_2.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									System.out.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				normal_tRunJob_2.start();

				final StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
				Thread error_tRunJob_2 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tRunJob_2.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {
									errorMsg_tRunJob_2.append(line)
											.append("\n");
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {
							ioe.printStackTrace();
						}
					}
				};
				error_tRunJob_2.start();

				// 0 indicates normal termination
				int result_tRunJob_2 = ps_tRunJob_2.waitFor();
				normal_tRunJob_2.join(10000);
				error_tRunJob_2.join(10000);

				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", result_tRunJob_2);
				if (result_tRunJob_2 != 0) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							errorMsg_tRunJob_2.toString());

					throw new RuntimeException("Child job return "
							+ result_tRunJob_2
							+ ". It doesn't terminate normally.\n"
							+ errorMsg_tRunJob_2.toString());

				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */
				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public static class getCurrentPropertiesStruct
			implements
			routines.system.IPersistableComparableLookupRow<getCurrentPropertiesStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		public String PROP_NAME;

		public String getPROP_NAME() {
			return this.PROP_NAME;
		}

		public float PRICE;

		public float getPRICE() {
			return this.PRICE;
		}

		public String SQFT;

		public String getSQFT() {
			return this.SQFT;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public float NUM_BEDS;

		public float getNUM_BEDS() {
			return this.NUM_BEDS;
		}

		public float NUM_BATHS;

		public float getNUM_BATHS() {
			return this.NUM_BATHS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public int DATA_SOURCE_ID;

		public int getDATA_SOURCE_ID() {
			return this.DATA_SOURCE_ID;
		}

		public int ZIP_CODE;

		public int getZIP_CODE() {
			return this.ZIP_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PROP_NAME == null) ? 0 : this.PROP_NAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final getCurrentPropertiesStruct other = (getCurrentPropertiesStruct) obj;

			if (this.PROP_NAME == null) {
				if (other.PROP_NAME != null)
					return false;
			} else if (!this.PROP_NAME.equals(other.PROP_NAME))
				return false;

			return true;
		}

		public void copyDataTo(getCurrentPropertiesStruct other) {

			other.ID = this.ID;
			other.UUID = this.UUID;
			other.PROP_NAME = this.PROP_NAME;
			other.PRICE = this.PRICE;
			other.SQFT = this.SQFT;
			other.DESCRIPTION = this.DESCRIPTION;
			other.NUM_BEDS = this.NUM_BEDS;
			other.NUM_BATHS = this.NUM_BATHS;
			other.TYPE = this.TYPE;
			other.STATUS = this.STATUS;
			other.DATA_SOURCE_ID = this.DATA_SOURCE_ID;
			other.ZIP_CODE = this.ZIP_CODE;

		}

		public void copyKeysDataTo(getCurrentPropertiesStruct other) {

			other.PROP_NAME = this.PROP_NAME;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.PROP_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PROP_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID = dis.readInt();

				this.UUID = readString(dis, ois);

				this.PRICE = dis.readFloat();

				this.SQFT = readString(dis, ois);

				this.DESCRIPTION = readString(dis, ois);

				this.NUM_BEDS = dis.readFloat();

				this.NUM_BATHS = dis.readFloat();

				this.TYPE = readString(dis, ois);

				this.STATUS = readString(dis, ois);

				this.DATA_SOURCE_ID = dis.readInt();

				this.ZIP_CODE = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ID);

				writeString(this.UUID, dos, oos);

				dos.writeFloat(this.PRICE);

				writeString(this.SQFT, dos, oos);

				writeString(this.DESCRIPTION, dos, oos);

				dos.writeFloat(this.NUM_BEDS);

				dos.writeFloat(this.NUM_BATHS);

				writeString(this.TYPE, dos, oos);

				writeString(this.STATUS, dos, oos);

				dos.writeInt(this.DATA_SOURCE_ID);

				dos.writeInt(this.ZIP_CODE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",UUID=" + UUID);
			sb.append(",PROP_NAME=" + PROP_NAME);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append(",SQFT=" + SQFT);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",NUM_BEDS=" + String.valueOf(NUM_BEDS));
			sb.append(",NUM_BATHS=" + String.valueOf(NUM_BATHS));
			sb.append(",TYPE=" + TYPE);
			sb.append(",STATUS=" + STATUS);
			sb.append(",DATA_SOURCE_ID=" + String.valueOf(DATA_SOURCE_ID));
			sb.append(",ZIP_CODE=" + String.valueOf(ZIP_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(getCurrentPropertiesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PROP_NAME, other.PROP_NAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				getCurrentPropertiesStruct getCurrentProperties = new getCurrentPropertiesStruct();

				/**
				 * [tHash_getCurrentProperties begin ] start
				 */

				ok_Hash.put("tHash_getCurrentProperties", false);
				start_Hash.put("tHash_getCurrentProperties",
						System.currentTimeMillis());
				currentComponent = "tHash_getCurrentProperties";

				int tos_count_tHash_getCurrentProperties = 0;

				java.util.Map<getCurrentPropertiesStruct, getCurrentPropertiesStruct> tHash_getCurrentProperties = new java.util.LinkedHashMap<getCurrentPropertiesStruct, getCurrentPropertiesStruct>();
				globalMap.put("tHash_getCurrentProperties",
						tHash_getCurrentProperties);

				/**
				 * [tHash_getCurrentProperties begin ] stop
				 */

				/**
				 * [tMysqlInput_5 begin ] start
				 */

				ok_Hash.put("tMysqlInput_5", false);
				start_Hash.put("tMysqlInput_5", System.currentTimeMillis());
				currentComponent = "tMysqlInput_5";

				int tos_count_tMysqlInput_5 = 0;

				java.util.Calendar calendar_tMysqlInput_5 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_5 = calendar_tMysqlInput_5
						.getTime();
				int nb_line_tMysqlInput_5 = 0;
				java.sql.Connection conn_tMysqlInput_5 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_5) {
					conn_tMysqlInput_5 = dataSources_tMysqlInput_5.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_5 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_5 = context.talon_Login;
					String dbPwd_tMysqlInput_5 = context.talon_Password;
					conn_tMysqlInput_5 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_5, dbUser_tMysqlInput_5,
							dbPwd_tMysqlInput_5);
				}

				java.sql.Statement stmt_tMysqlInput_5 = conn_tMysqlInput_5
						.createStatement();

				String dbquery_tMysqlInput_5 = "SELECT    `PROPERTY_DATA`.`ID`,    `PROPERTY_DATA`.`UUID`,    `PROPERTY_DATA`.`PROP_NAME`,    `PROPERTY_DATA`.`PRICE`,    `PROPERTY_DATA`.`SQFT`,    `PROPERTY_DATA`.`DESCRIPTION`,    `PROPERTY_DATA`.`NUM_BEDS`,    `PROPERTY_DATA`.`NUM_BATHS`,    `PROPERTY_DATA`.`TYPE`,    `PROPERTY_DATA`.`STATUS`,    `PROPERTY_DATA`.`ZIP_CODE`,    `PROPERTY_DATA`.`DATA_SOURCE_ID` FROM `PROPERTY_DATA`";

				globalMap.put("tMysqlInput_5_QUERY", dbquery_tMysqlInput_5);

				java.sql.ResultSet rs_tMysqlInput_5 = stmt_tMysqlInput_5
						.executeQuery(dbquery_tMysqlInput_5);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_5 = rs_tMysqlInput_5
						.getMetaData();
				int colQtyInRs_tMysqlInput_5 = rsmd_tMysqlInput_5
						.getColumnCount();

				String tmpContent_tMysqlInput_5 = null;
				while (rs_tMysqlInput_5.next()) {
					nb_line_tMysqlInput_5++;

					if (colQtyInRs_tMysqlInput_5 < 1) {
						getCurrentProperties.ID = 0;
					} else {

						if (rs_tMysqlInput_5.getObject(1) != null) {
							getCurrentProperties.ID = rs_tMysqlInput_5
									.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 2) {
						getCurrentProperties.UUID = null;
					} else {

						tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
								.getString(2);
						if (tmpContent_tMysqlInput_5 != null) {
							getCurrentProperties.UUID = tmpContent_tMysqlInput_5;
						} else {
							getCurrentProperties.UUID = null;
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 3) {
						getCurrentProperties.PROP_NAME = null;
					} else {

						tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
								.getString(3);
						if (tmpContent_tMysqlInput_5 != null) {
							getCurrentProperties.PROP_NAME = tmpContent_tMysqlInput_5;
						} else {
							getCurrentProperties.PROP_NAME = null;
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 4) {
						getCurrentProperties.PRICE = 0;
					} else {

						if (rs_tMysqlInput_5.getObject(4) != null) {
							getCurrentProperties.PRICE = rs_tMysqlInput_5
									.getFloat(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 5) {
						getCurrentProperties.SQFT = null;
					} else {

						tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
								.getString(5);
						if (tmpContent_tMysqlInput_5 != null) {
							getCurrentProperties.SQFT = tmpContent_tMysqlInput_5;
						} else {
							getCurrentProperties.SQFT = null;
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 6) {
						getCurrentProperties.DESCRIPTION = null;
					} else {

						tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
								.getString(6);
						if (tmpContent_tMysqlInput_5 != null) {
							getCurrentProperties.DESCRIPTION = tmpContent_tMysqlInput_5;
						} else {
							getCurrentProperties.DESCRIPTION = null;
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 7) {
						getCurrentProperties.NUM_BEDS = 0;
					} else {

						if (rs_tMysqlInput_5.getObject(7) != null) {
							getCurrentProperties.NUM_BEDS = rs_tMysqlInput_5
									.getFloat(7);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 8) {
						getCurrentProperties.NUM_BATHS = 0;
					} else {

						if (rs_tMysqlInput_5.getObject(8) != null) {
							getCurrentProperties.NUM_BATHS = rs_tMysqlInput_5
									.getFloat(8);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 9) {
						getCurrentProperties.TYPE = null;
					} else {

						tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
								.getString(9);
						if (tmpContent_tMysqlInput_5 != null) {
							getCurrentProperties.TYPE = tmpContent_tMysqlInput_5;
						} else {
							getCurrentProperties.TYPE = null;
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 10) {
						getCurrentProperties.STATUS = null;
					} else {

						tmpContent_tMysqlInput_5 = rs_tMysqlInput_5
								.getString(10);
						if (tmpContent_tMysqlInput_5 != null) {
							getCurrentProperties.STATUS = tmpContent_tMysqlInput_5;
						} else {
							getCurrentProperties.STATUS = null;
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 11) {
						getCurrentProperties.DATA_SOURCE_ID = 0;
					} else {

						if (rs_tMysqlInput_5.getObject(11) != null) {
							getCurrentProperties.DATA_SOURCE_ID = rs_tMysqlInput_5
									.getInt(11);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_5 < 12) {
						getCurrentProperties.ZIP_CODE = 0;
					} else {

						if (rs_tMysqlInput_5.getObject(12) != null) {
							getCurrentProperties.ZIP_CODE = rs_tMysqlInput_5
									.getInt(12);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tMysqlInput_5 begin ] stop
					 */
					/**
					 * [tMysqlInput_5 main ] start
					 */

					currentComponent = "tMysqlInput_5";

					tos_count_tMysqlInput_5++;

					/**
					 * [tMysqlInput_5 main ] stop
					 */

					/**
					 * [tHash_getCurrentProperties main ] start
					 */

					currentComponent = "tHash_getCurrentProperties";

					getCurrentPropertiesStruct getCurrentProperties_HashRow = new getCurrentPropertiesStruct();

					getCurrentProperties_HashRow.ID = getCurrentProperties.ID;
					getCurrentProperties_HashRow.UUID = getCurrentProperties.UUID;
					getCurrentProperties_HashRow.PROP_NAME = getCurrentProperties.PROP_NAME;
					getCurrentProperties_HashRow.PRICE = getCurrentProperties.PRICE;
					getCurrentProperties_HashRow.SQFT = getCurrentProperties.SQFT;
					getCurrentProperties_HashRow.DESCRIPTION = getCurrentProperties.DESCRIPTION;
					getCurrentProperties_HashRow.NUM_BEDS = getCurrentProperties.NUM_BEDS;
					getCurrentProperties_HashRow.NUM_BATHS = getCurrentProperties.NUM_BATHS;
					getCurrentProperties_HashRow.TYPE = getCurrentProperties.TYPE;
					getCurrentProperties_HashRow.STATUS = getCurrentProperties.STATUS;
					getCurrentProperties_HashRow.DATA_SOURCE_ID = getCurrentProperties.DATA_SOURCE_ID;
					getCurrentProperties_HashRow.ZIP_CODE = getCurrentProperties.ZIP_CODE;
					tHash_getCurrentProperties.put(
							getCurrentProperties_HashRow,
							getCurrentProperties_HashRow);

					tos_count_tHash_getCurrentProperties++;

					/**
					 * [tHash_getCurrentProperties main ] stop
					 */

					/**
					 * [tMysqlInput_5 end ] start
					 */

					currentComponent = "tMysqlInput_5";

				}
				rs_tMysqlInput_5.close();
				stmt_tMysqlInput_5.close();
				conn_tMysqlInput_5.close();

				globalMap.put("tMysqlInput_5_NB_LINE", nb_line_tMysqlInput_5);

				ok_Hash.put("tMysqlInput_5", true);
				end_Hash.put("tMysqlInput_5", System.currentTimeMillis());

				/**
				 * [tMysqlInput_5 end ] stop
				 */

				/**
				 * [tHash_getCurrentProperties end ] start
				 */

				currentComponent = "tHash_getCurrentProperties";

				ok_Hash.put("tHash_getCurrentProperties", true);
				end_Hash.put("tHash_getCurrentProperties",
						System.currentTimeMillis());

				/**
				 * [tHash_getCurrentProperties end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String CUST_UUID;

		public String getCUST_UUID() {
			return this.CUST_UUID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CUST_UUID == null) ? 0 : this.CUST_UUID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.CUST_UUID == null) {
				if (other.CUST_UUID != null)
					return false;
			} else if (!this.CUST_UUID.equals(other.CUST_UUID))
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.ID = this.ID;
			other.NAME = this.NAME;
			other.CUST_UUID = this.CUST_UUID;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.CUST_UUID = this.CUST_UUID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.CUST_UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CUST_UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID = dis.readInt();

				this.NAME = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ID);

				writeString(this.NAME, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",NAME=" + NAME);
			sb.append(",CUST_UUID=" + CUST_UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CUST_UUID, other.CUST_UUID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tMysqlInput_4 - inputs:(after_tMysqlInput_3)
				// outputs:(row8,row8) | target node:tAdvancedHash_row8 -
				// inputs:(row8) outputs:()
				// linked node: tMap_11 - inputs:(row8,row7)
				// outputs:(custData,custData)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tMysqlInput_4 begin ] start
				 */

				ok_Hash.put("tMysqlInput_4", false);
				start_Hash.put("tMysqlInput_4", System.currentTimeMillis());
				currentComponent = "tMysqlInput_4";

				int tos_count_tMysqlInput_4 = 0;

				java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4
						.getTime();
				int nb_line_tMysqlInput_4 = 0;
				java.sql.Connection conn_tMysqlInput_4 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_4) {
					conn_tMysqlInput_4 = dataSources_tMysqlInput_4.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_4 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_4 = context.talon_Login;
					String dbPwd_tMysqlInput_4 = context.talon_Password;
					conn_tMysqlInput_4 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_4, dbUser_tMysqlInput_4,
							dbPwd_tMysqlInput_4);
				}

				java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4
						.createStatement();

				String dbquery_tMysqlInput_4 = "SELECT    `DATA_SOURCE`.`ID`,    `DATA_SOURCE`.`NAME`,    `DATA_SOURCE`.`CUST_UUID` FROM `DATA_SOURCE`";

				globalMap.put("tMysqlInput_4_QUERY", dbquery_tMysqlInput_4);

				java.sql.ResultSet rs_tMysqlInput_4 = stmt_tMysqlInput_4
						.executeQuery(dbquery_tMysqlInput_4);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4
						.getMetaData();
				int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4
						.getColumnCount();

				String tmpContent_tMysqlInput_4 = null;
				while (rs_tMysqlInput_4.next()) {
					nb_line_tMysqlInput_4++;

					if (colQtyInRs_tMysqlInput_4 < 1) {
						row8.ID = 0;
					} else {

						if (rs_tMysqlInput_4.getObject(1) != null) {
							row8.ID = rs_tMysqlInput_4.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_4 < 2) {
						row8.NAME = null;
					} else {

						tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
								.getString(2);
						if (tmpContent_tMysqlInput_4 != null) {
							row8.NAME = tmpContent_tMysqlInput_4;
						} else {
							row8.NAME = null;
						}

					}
					if (colQtyInRs_tMysqlInput_4 < 3) {
						row8.CUST_UUID = null;
					} else {

						tmpContent_tMysqlInput_4 = rs_tMysqlInput_4
								.getString(3);
						if (tmpContent_tMysqlInput_4 != null) {
							row8.CUST_UUID = tmpContent_tMysqlInput_4;
						} else {
							row8.CUST_UUID = null;
						}

					}

					/**
					 * [tMysqlInput_4 begin ] stop
					 */
					/**
					 * [tMysqlInput_4 main ] start
					 */

					currentComponent = "tMysqlInput_4";

					tos_count_tMysqlInput_4++;

					/**
					 * [tMysqlInput_4 main ] stop
					 */

					/**
					 * [tAdvancedHash_row8 main ] start
					 */

					currentComponent = "tAdvancedHash_row8";

					row8Struct row8_HashRow = new row8Struct();

					row8_HashRow.ID = row8.ID;

					row8_HashRow.NAME = row8.NAME;

					row8_HashRow.CUST_UUID = row8.CUST_UUID;

					tHash_Lookup_row8.put(row8_HashRow);

					tos_count_tAdvancedHash_row8++;

					/**
					 * [tAdvancedHash_row8 main ] stop
					 */

					/**
					 * [tMysqlInput_4 end ] start
					 */

					currentComponent = "tMysqlInput_4";

				}
				rs_tMysqlInput_4.close();
				stmt_tMysqlInput_4.close();
				conn_tMysqlInput_4.close();

				globalMap.put("tMysqlInput_4_NB_LINE", nb_line_tMysqlInput_4);

				ok_Hash.put("tMysqlInput_4", true);
				end_Hash.put("tMysqlInput_4", System.currentTimeMillis());

				/**
				 * [tMysqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class custDataStruct implements
			routines.system.IPersistableComparableLookupRow<custDataStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CUST_NAME;

		public String getCUST_NAME() {
			return this.CUST_NAME;
		}

		public int DATA_SOURCE_ID;

		public int getDATA_SOURCE_ID() {
			return this.DATA_SOURCE_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CUST_NAME == null) ? 0 : this.CUST_NAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final custDataStruct other = (custDataStruct) obj;

			if (this.CUST_NAME == null) {
				if (other.CUST_NAME != null)
					return false;
			} else if (!this.CUST_NAME.equals(other.CUST_NAME))
				return false;

			return true;
		}

		public void copyDataTo(custDataStruct other) {

			other.CUST_NAME = this.CUST_NAME;
			other.DATA_SOURCE_ID = this.DATA_SOURCE_ID;

		}

		public void copyKeysDataTo(custDataStruct other) {

			other.CUST_NAME = this.CUST_NAME;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.CUST_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CUST_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DATA_SOURCE_ID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.DATA_SOURCE_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CUST_NAME=" + CUST_NAME);
			sb.append(",DATA_SOURCE_ID=" + String.valueOf(DATA_SOURCE_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(custDataStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CUST_NAME, other.CUST_NAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		public String CUST_NAME;

		public String getCUST_NAME() {
			return this.CUST_NAME;
		}

		public byte ENABLED;

		public byte getENABLED() {
			return this.ENABLED;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.UUID = readString(dis);

					this.CUST_NAME = readString(dis);

					this.ENABLED = dis.readByte();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.UUID, dos);

				// String

				writeString(this.CUST_NAME, dos);

				// byte

				dos.writeByte(this.ENABLED);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",UUID=" + UUID);
			sb.append(",CUST_NAME=" + CUST_NAME);
			sb.append(",ENABLED=" + String.valueOf(ENABLED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tMysqlInput_3Struct implements
			routines.system.IPersistableRow<after_tMysqlInput_3Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		public String CUST_NAME;

		public String getCUST_NAME() {
			return this.CUST_NAME;
		}

		public byte ENABLED;

		public byte getENABLED() {
			return this.ENABLED;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tMysqlInput_3Struct other = (after_tMysqlInput_3Struct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(after_tMysqlInput_3Struct other) {

			other.ID = this.ID;
			other.UUID = this.UUID;
			other.CUST_NAME = this.CUST_NAME;
			other.ENABLED = this.ENABLED;

		}

		public void copyKeysDataTo(after_tMysqlInput_3Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.UUID = readString(dis);

					this.CUST_NAME = readString(dis);

					this.ENABLED = dis.readByte();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.UUID, dos);

				// String

				writeString(this.CUST_NAME, dos);

				// byte

				dos.writeByte(this.ENABLED);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",UUID=" + UUID);
			sb.append(",CUST_NAME=" + CUST_NAME);
			sb.append(",ENABLED=" + String.valueOf(ENABLED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tMysqlInput_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tMysqlInput_4Process(globalMap);

				row7Struct row7 = new row7Struct();
				custDataStruct custData = new custDataStruct();

				/**
				 * [tAdvancedHash_custData begin ] start
				 */

				ok_Hash.put("tAdvancedHash_custData", false);
				start_Hash.put("tAdvancedHash_custData",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_custData";

				int tos_count_tAdvancedHash_custData = 0;

				// connection name:custData
				// source node:tMap_11 - inputs:(row8,row7)
				// outputs:(custData,custData) | target
				// node:tAdvancedHash_custData - inputs:(custData) outputs:()
				// linked node: tMap_4 - inputs:(propertyData,custData)
				// outputs:(loadData)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_custData = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<custDataStruct> tHash_Lookup_custData = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<custDataStruct> getLookup(matchingModeEnum_custData);

				globalMap.put("tHash_Lookup_custData", tHash_Lookup_custData);

				/**
				 * [tAdvancedHash_custData begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());
				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				custDataStruct custData_tmp = new custDataStruct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tMysqlInput_3 begin ] start
				 */

				ok_Hash.put("tMysqlInput_3", false);
				start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
				currentComponent = "tMysqlInput_3";

				int tos_count_tMysqlInput_3 = 0;

				java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3
						.getTime();
				int nb_line_tMysqlInput_3 = 0;
				java.sql.Connection conn_tMysqlInput_3 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_3) {
					conn_tMysqlInput_3 = dataSources_tMysqlInput_3.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_3 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_3 = context.talon_Login;
					String dbPwd_tMysqlInput_3 = context.talon_Password;
					conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_3, dbUser_tMysqlInput_3,
							dbPwd_tMysqlInput_3);
				}

				java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3
						.createStatement();

				String dbquery_tMysqlInput_3 = "SELECT    `CUSTOMER`.`ID`,    `CUSTOMER`.`UUID`,    `CUSTOMER`.`CUST_NAME`,    `CUSTOMER`.`ENABLED` FROM `CUSTOMER` ";

				globalMap.put("tMysqlInput_3_QUERY", dbquery_tMysqlInput_3);

				java.sql.ResultSet rs_tMysqlInput_3 = stmt_tMysqlInput_3
						.executeQuery(dbquery_tMysqlInput_3);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3
						.getMetaData();
				int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3
						.getColumnCount();

				String tmpContent_tMysqlInput_3 = null;
				while (rs_tMysqlInput_3.next()) {
					nb_line_tMysqlInput_3++;

					if (colQtyInRs_tMysqlInput_3 < 1) {
						row7.ID = 0;
					} else {

						if (rs_tMysqlInput_3.getObject(1) != null) {
							row7.ID = rs_tMysqlInput_3.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_3 < 2) {
						row7.UUID = null;
					} else {

						tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
								.getString(2);
						if (tmpContent_tMysqlInput_3 != null) {
							row7.UUID = tmpContent_tMysqlInput_3;
						} else {
							row7.UUID = null;
						}

					}
					if (colQtyInRs_tMysqlInput_3 < 3) {
						row7.CUST_NAME = null;
					} else {

						tmpContent_tMysqlInput_3 = rs_tMysqlInput_3
								.getString(3);
						if (tmpContent_tMysqlInput_3 != null) {
							row7.CUST_NAME = tmpContent_tMysqlInput_3;
						} else {
							row7.CUST_NAME = null;
						}

					}
					if (colQtyInRs_tMysqlInput_3 < 4) {
						row7.ENABLED = 0;
					} else {

						if (rs_tMysqlInput_3.getObject(4) != null) {
							row7.ENABLED = rs_tMysqlInput_3.getByte(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tMysqlInput_3 begin ] stop
					 */
					/**
					 * [tMysqlInput_3 main ] start
					 */

					currentComponent = "tMysqlInput_3";

					tos_count_tMysqlInput_3++;

					/**
					 * [tMysqlInput_3 main ] stop
					 */

					/**
					 * [tMap_11 main ] start
					 */

					currentComponent = "tMap_11";

					boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_11 = false;
					boolean mainRowRejected_tMap_11 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row8"
					// /////////////////////////////////////////////

					boolean forceLooprow8 = false;

					row8Struct row8ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_11) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_11 = false;

						row8HashKey.CUST_UUID = row7.UUID;

						row8HashKey.hashCodeDirty = true;

						tHash_Lookup_row8.lookup(row8HashKey);

						if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

							rejectedInnerJoin_tMap_11 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					if (tHash_Lookup_row8 != null
							&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.CUST_UUID = '"
						// + row8HashKey.CUST_UUID + "'");
					} // G 071

					row8Struct row8 = null;

					row8Struct fromLookup_row8 = null;
					row8 = row8Default;

					if (tHash_Lookup_row8 != null
							&& tHash_Lookup_row8.hasNext()) { // G 099

						fromLookup_row8 = tHash_Lookup_row8.next();

					} // G 099

					if (fromLookup_row8 != null) {
						row8 = fromLookup_row8;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
						// ###############################
						// # Output tables

						custData = null;

						if (!rejectedInnerJoin_tMap_11) {

							// # Output table : 'custData'
							custData_tmp.CUST_NAME = row7.CUST_NAME;
							custData_tmp.DATA_SOURCE_ID = row8.ID;
							custData = custData_tmp;
						} // closing inner join bracket (2)
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_11 = false;

					tos_count_tMap_11++;

					/**
					 * [tMap_11 main ] stop
					 */
					// Start of branch "custData"
					if (custData != null) {

						/**
						 * [tAdvancedHash_custData main ] start
						 */

						currentComponent = "tAdvancedHash_custData";

						custDataStruct custData_HashRow = new custDataStruct();

						custData_HashRow.CUST_NAME = custData.CUST_NAME;

						custData_HashRow.DATA_SOURCE_ID = custData.DATA_SOURCE_ID;

						tHash_Lookup_custData.put(custData_HashRow);

						tos_count_tAdvancedHash_custData++;

						/**
						 * [tAdvancedHash_custData main ] stop
						 */

					} // End of branch "custData"

					/**
					 * [tMysqlInput_3 end ] start
					 */

					currentComponent = "tMysqlInput_3";

				}
				rs_tMysqlInput_3.close();
				stmt_tMysqlInput_3.close();
				conn_tMysqlInput_3.close();

				globalMap.put("tMysqlInput_3_NB_LINE", nb_line_tMysqlInput_3);

				ok_Hash.put("tMysqlInput_3", true);
				end_Hash.put("tMysqlInput_3", System.currentTimeMillis());

				/**
				 * [tMysqlInput_3 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_custData end ] start
				 */

				currentComponent = "tAdvancedHash_custData";

				tHash_Lookup_custData.endPut();

				ok_Hash.put("tAdvancedHash_custData", true);
				end_Hash.put("tAdvancedHash_custData",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_custData end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_11"
			globalMap.put("tHash_Lookup_row8", null);

		}

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.STATE == null) ? 0 : this.STATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.STATE == null) {
				if (other.STATE != null)
					return false;
			} else if (!this.STATE.equals(other.STATE))
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.ID = this.ID;
			other.STATE = this.STATE;
			other.FULL_NAME = this.FULL_NAME;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.STATE = this.STATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.STATE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.STATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID = dis.readInt();

				this.FULL_NAME = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ID);

				writeString(this.FULL_NAME, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",STATE=" + STATE);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.STATE, other.STATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tHash_row11 begin ] start
				 */

				ok_Hash.put("tHash_row11", false);
				start_Hash.put("tHash_row11", System.currentTimeMillis());
				currentComponent = "tHash_row11";

				int tos_count_tHash_row11 = 0;

				java.util.Map<row11Struct, row11Struct> tHash_row11 = new java.util.LinkedHashMap<row11Struct, row11Struct>();
				globalMap.put("tHash_row11", tHash_row11);

				/**
				 * [tHash_row11 begin ] stop
				 */

				/**
				 * [tMysqlInput_10 begin ] start
				 */

				ok_Hash.put("tMysqlInput_10", false);
				start_Hash.put("tMysqlInput_10", System.currentTimeMillis());
				currentComponent = "tMysqlInput_10";

				int tos_count_tMysqlInput_10 = 0;

				java.util.Calendar calendar_tMysqlInput_10 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_10.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_10 = calendar_tMysqlInput_10
						.getTime();
				int nb_line_tMysqlInput_10 = 0;
				java.sql.Connection conn_tMysqlInput_10 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_10) {
					conn_tMysqlInput_10 = dataSources_tMysqlInput_10.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_10 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_10 = context.talon_Login;
					String dbPwd_tMysqlInput_10 = context.talon_Password;
					conn_tMysqlInput_10 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_10, dbUser_tMysqlInput_10,
							dbPwd_tMysqlInput_10);
				}

				java.sql.Statement stmt_tMysqlInput_10 = conn_tMysqlInput_10
						.createStatement();

				String dbquery_tMysqlInput_10 = "SELECT    `STATE`.`ID`,    `STATE`.`STATE`,    `STATE`.`FULL_NAME` FROM `STATE`";

				globalMap.put("tMysqlInput_10_QUERY", dbquery_tMysqlInput_10);

				java.sql.ResultSet rs_tMysqlInput_10 = stmt_tMysqlInput_10
						.executeQuery(dbquery_tMysqlInput_10);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_10 = rs_tMysqlInput_10
						.getMetaData();
				int colQtyInRs_tMysqlInput_10 = rsmd_tMysqlInput_10
						.getColumnCount();

				String tmpContent_tMysqlInput_10 = null;
				while (rs_tMysqlInput_10.next()) {
					nb_line_tMysqlInput_10++;

					if (colQtyInRs_tMysqlInput_10 < 1) {
						row11.ID = 0;
					} else {

						if (rs_tMysqlInput_10.getObject(1) != null) {
							row11.ID = rs_tMysqlInput_10.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_10 < 2) {
						row11.STATE = null;
					} else {

						tmpContent_tMysqlInput_10 = rs_tMysqlInput_10
								.getString(2);
						if (tmpContent_tMysqlInput_10 != null) {
							row11.STATE = tmpContent_tMysqlInput_10;
						} else {
							row11.STATE = null;
						}

					}
					if (colQtyInRs_tMysqlInput_10 < 3) {
						row11.FULL_NAME = null;
					} else {

						tmpContent_tMysqlInput_10 = rs_tMysqlInput_10
								.getString(3);
						if (tmpContent_tMysqlInput_10 != null) {
							row11.FULL_NAME = tmpContent_tMysqlInput_10;
						} else {
							row11.FULL_NAME = null;
						}

					}

					/**
					 * [tMysqlInput_10 begin ] stop
					 */
					/**
					 * [tMysqlInput_10 main ] start
					 */

					currentComponent = "tMysqlInput_10";

					tos_count_tMysqlInput_10++;

					/**
					 * [tMysqlInput_10 main ] stop
					 */

					/**
					 * [tHash_row11 main ] start
					 */

					currentComponent = "tHash_row11";

					row11Struct row11_HashRow = new row11Struct();

					row11_HashRow.ID = row11.ID;
					row11_HashRow.STATE = row11.STATE;
					row11_HashRow.FULL_NAME = row11.FULL_NAME;
					tHash_row11.put(row11_HashRow, row11_HashRow);

					tos_count_tHash_row11++;

					/**
					 * [tHash_row11 main ] stop
					 */

					/**
					 * [tMysqlInput_10 end ] start
					 */

					currentComponent = "tMysqlInput_10";

				}
				rs_tMysqlInput_10.close();
				stmt_tMysqlInput_10.close();
				conn_tMysqlInput_10.close();

				globalMap.put("tMysqlInput_10_NB_LINE", nb_line_tMysqlInput_10);

				ok_Hash.put("tMysqlInput_10", true);
				end_Hash.put("tMysqlInput_10", System.currentTimeMillis());

				/**
				 * [tMysqlInput_10 end ] stop
				 */

				/**
				 * [tHash_row11 end ] start
				 */

				currentComponent = "tHash_row11";

				ok_Hash.put("tHash_row11", true);
				end_Hash.put("tHash_row11", System.currentTimeMillis());

				/**
				 * [tHash_row11 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_10_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String SUMMARY;

		public String getSUMMARY() {
			return this.SUMMARY;
		}

		public String IMAGE_URL;

		public String getIMAGE_URL() {
			return this.IMAGE_URL;
		}

		public int STATE_ID;

		public int getSTATE_ID() {
			return this.STATE_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CITY == null) ? 0 : this.CITY.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.CITY == null) {
				if (other.CITY != null)
					return false;
			} else if (!this.CITY.equals(other.CITY))
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ID = this.ID;
			other.CITY = this.CITY;
			other.SUMMARY = this.SUMMARY;
			other.IMAGE_URL = this.IMAGE_URL;
			other.STATE_ID = this.STATE_ID;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.CITY = this.CITY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.CITY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CITY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID = dis.readInt();

				this.SUMMARY = readString(dis, ois);

				this.IMAGE_URL = readString(dis, ois);

				this.STATE_ID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ID);

				writeString(this.SUMMARY, dos, oos);

				writeString(this.IMAGE_URL, dos, oos);

				dos.writeInt(this.STATE_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",CITY=" + CITY);
			sb.append(",SUMMARY=" + SUMMARY);
			sb.append(",IMAGE_URL=" + IMAGE_URL);
			sb.append(",STATE_ID=" + String.valueOf(STATE_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CITY, other.CITY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tHash_row4 begin ] start
				 */

				ok_Hash.put("tHash_row4", false);
				start_Hash.put("tHash_row4", System.currentTimeMillis());
				currentComponent = "tHash_row4";

				int tos_count_tHash_row4 = 0;

				java.util.Map<row4Struct, row4Struct> tHash_row4 = new java.util.LinkedHashMap<row4Struct, row4Struct>();
				globalMap.put("tHash_row4", tHash_row4);

				/**
				 * [tHash_row4 begin ] stop
				 */

				/**
				 * [tMysqlInput_7 begin ] start
				 */

				ok_Hash.put("tMysqlInput_7", false);
				start_Hash.put("tMysqlInput_7", System.currentTimeMillis());
				currentComponent = "tMysqlInput_7";

				int tos_count_tMysqlInput_7 = 0;

				java.util.Calendar calendar_tMysqlInput_7 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_7.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_7 = calendar_tMysqlInput_7
						.getTime();
				int nb_line_tMysqlInput_7 = 0;
				java.sql.Connection conn_tMysqlInput_7 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_7) {
					conn_tMysqlInput_7 = dataSources_tMysqlInput_7.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_7 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_7 = context.talon_Login;
					String dbPwd_tMysqlInput_7 = context.talon_Password;
					conn_tMysqlInput_7 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_7, dbUser_tMysqlInput_7,
							dbPwd_tMysqlInput_7);
				}

				java.sql.Statement stmt_tMysqlInput_7 = conn_tMysqlInput_7
						.createStatement();

				String dbquery_tMysqlInput_7 = "SELECT    `CITY`.`ID`,    `CITY`.`CITY`,    `CITY`.`SUMMARY`,    `CITY`.`IMAGE_URL`,    `CITY`.`STATE_ID` FROM `CITY`";

				globalMap.put("tMysqlInput_7_QUERY", dbquery_tMysqlInput_7);

				java.sql.ResultSet rs_tMysqlInput_7 = stmt_tMysqlInput_7
						.executeQuery(dbquery_tMysqlInput_7);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_7 = rs_tMysqlInput_7
						.getMetaData();
				int colQtyInRs_tMysqlInput_7 = rsmd_tMysqlInput_7
						.getColumnCount();

				String tmpContent_tMysqlInput_7 = null;
				while (rs_tMysqlInput_7.next()) {
					nb_line_tMysqlInput_7++;

					if (colQtyInRs_tMysqlInput_7 < 1) {
						row4.ID = 0;
					} else {

						if (rs_tMysqlInput_7.getObject(1) != null) {
							row4.ID = rs_tMysqlInput_7.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_7 < 2) {
						row4.CITY = null;
					} else {

						tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
								.getString(2);
						if (tmpContent_tMysqlInput_7 != null) {
							row4.CITY = tmpContent_tMysqlInput_7;
						} else {
							row4.CITY = null;
						}

					}
					if (colQtyInRs_tMysqlInput_7 < 3) {
						row4.SUMMARY = null;
					} else {

						tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
								.getString(3);
						if (tmpContent_tMysqlInput_7 != null) {
							row4.SUMMARY = tmpContent_tMysqlInput_7;
						} else {
							row4.SUMMARY = null;
						}

					}
					if (colQtyInRs_tMysqlInput_7 < 4) {
						row4.IMAGE_URL = null;
					} else {

						tmpContent_tMysqlInput_7 = rs_tMysqlInput_7
								.getString(4);
						if (tmpContent_tMysqlInput_7 != null) {
							row4.IMAGE_URL = tmpContent_tMysqlInput_7;
						} else {
							row4.IMAGE_URL = null;
						}

					}
					if (colQtyInRs_tMysqlInput_7 < 5) {
						row4.STATE_ID = 0;
					} else {

						if (rs_tMysqlInput_7.getObject(5) != null) {
							row4.STATE_ID = rs_tMysqlInput_7.getInt(5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tMysqlInput_7 begin ] stop
					 */
					/**
					 * [tMysqlInput_7 main ] start
					 */

					currentComponent = "tMysqlInput_7";

					tos_count_tMysqlInput_7++;

					/**
					 * [tMysqlInput_7 main ] stop
					 */

					/**
					 * [tHash_row4 main ] start
					 */

					currentComponent = "tHash_row4";

					row4Struct row4_HashRow = new row4Struct();

					row4_HashRow.ID = row4.ID;
					row4_HashRow.CITY = row4.CITY;
					row4_HashRow.SUMMARY = row4.SUMMARY;
					row4_HashRow.IMAGE_URL = row4.IMAGE_URL;
					row4_HashRow.STATE_ID = row4.STATE_ID;
					tHash_row4.put(row4_HashRow, row4_HashRow);

					tos_count_tHash_row4++;

					/**
					 * [tHash_row4 main ] stop
					 */

					/**
					 * [tMysqlInput_7 end ] start
					 */

					currentComponent = "tMysqlInput_7";

				}
				rs_tMysqlInput_7.close();
				stmt_tMysqlInput_7.close();
				conn_tMysqlInput_7.close();

				globalMap.put("tMysqlInput_7_NB_LINE", nb_line_tMysqlInput_7);

				ok_Hash.put("tMysqlInput_7", true);
				end_Hash.put("tMysqlInput_7", System.currentTimeMillis());

				/**
				 * [tMysqlInput_7 end ] stop
				 */

				/**
				 * [tHash_row4 end ] start
				 */

				currentComponent = "tHash_row4";

				ok_Hash.put("tHash_row4", true);
				end_Hash.put("tHash_row4", System.currentTimeMillis());

				/**
				 * [tHash_row4 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String FULL_NAME;

		public String getFULL_NAME() {
			return this.FULL_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.STATE == null) ? 0 : this.STATE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.STATE == null) {
				if (other.STATE != null)
					return false;
			} else if (!this.STATE.equals(other.STATE))
				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.ID = this.ID;
			other.STATE = this.STATE;
			other.FULL_NAME = this.FULL_NAME;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.STATE = this.STATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.STATE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.STATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID = dis.readInt();

				this.FULL_NAME = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ID);

				writeString(this.FULL_NAME, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",STATE=" + STATE);
			sb.append(",FULL_NAME=" + FULL_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.STATE, other.STATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tMysqlInput_11 - inputs:() outputs:(row15,row15)
				// | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_3 - inputs:(row5,row15) outputs:(loadCity)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tMysqlInput_11 begin ] start
				 */

				ok_Hash.put("tMysqlInput_11", false);
				start_Hash.put("tMysqlInput_11", System.currentTimeMillis());
				currentComponent = "tMysqlInput_11";

				int tos_count_tMysqlInput_11 = 0;

				java.util.Calendar calendar_tMysqlInput_11 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_11.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_11 = calendar_tMysqlInput_11
						.getTime();
				int nb_line_tMysqlInput_11 = 0;
				java.sql.Connection conn_tMysqlInput_11 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_11) {
					conn_tMysqlInput_11 = dataSources_tMysqlInput_11.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_11 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_11 = context.talon_Login;
					String dbPwd_tMysqlInput_11 = context.talon_Password;
					conn_tMysqlInput_11 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_11, dbUser_tMysqlInput_11,
							dbPwd_tMysqlInput_11);
				}

				java.sql.Statement stmt_tMysqlInput_11 = conn_tMysqlInput_11
						.createStatement();

				String dbquery_tMysqlInput_11 = "SELECT    `STATE`.`ID`,    `STATE`.`STATE`,    `STATE`.`FULL_NAME` FROM `STATE`";

				globalMap.put("tMysqlInput_11_QUERY", dbquery_tMysqlInput_11);

				java.sql.ResultSet rs_tMysqlInput_11 = stmt_tMysqlInput_11
						.executeQuery(dbquery_tMysqlInput_11);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_11 = rs_tMysqlInput_11
						.getMetaData();
				int colQtyInRs_tMysqlInput_11 = rsmd_tMysqlInput_11
						.getColumnCount();

				String tmpContent_tMysqlInput_11 = null;
				while (rs_tMysqlInput_11.next()) {
					nb_line_tMysqlInput_11++;

					if (colQtyInRs_tMysqlInput_11 < 1) {
						row15.ID = 0;
					} else {

						if (rs_tMysqlInput_11.getObject(1) != null) {
							row15.ID = rs_tMysqlInput_11.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_11 < 2) {
						row15.STATE = null;
					} else {

						tmpContent_tMysqlInput_11 = rs_tMysqlInput_11
								.getString(2);
						if (tmpContent_tMysqlInput_11 != null) {
							row15.STATE = tmpContent_tMysqlInput_11;
						} else {
							row15.STATE = null;
						}

					}
					if (colQtyInRs_tMysqlInput_11 < 3) {
						row15.FULL_NAME = null;
					} else {

						tmpContent_tMysqlInput_11 = rs_tMysqlInput_11
								.getString(3);
						if (tmpContent_tMysqlInput_11 != null) {
							row15.FULL_NAME = tmpContent_tMysqlInput_11;
						} else {
							row15.FULL_NAME = null;
						}

					}

					/**
					 * [tMysqlInput_11 begin ] stop
					 */
					/**
					 * [tMysqlInput_11 main ] start
					 */

					currentComponent = "tMysqlInput_11";

					tos_count_tMysqlInput_11++;

					/**
					 * [tMysqlInput_11 main ] stop
					 */

					/**
					 * [tAdvancedHash_row15 main ] start
					 */

					currentComponent = "tAdvancedHash_row15";

					row15Struct row15_HashRow = new row15Struct();

					row15_HashRow.ID = row15.ID;

					row15_HashRow.STATE = row15.STATE;

					row15_HashRow.FULL_NAME = row15.FULL_NAME;

					tHash_Lookup_row15.put(row15_HashRow);

					tos_count_tAdvancedHash_row15++;

					/**
					 * [tAdvancedHash_row15 main ] stop
					 */

					/**
					 * [tMysqlInput_11 end ] start
					 */

					currentComponent = "tMysqlInput_11";

				}
				rs_tMysqlInput_11.close();
				stmt_tMysqlInput_11.close();
				conn_tMysqlInput_11.close();

				globalMap.put("tMysqlInput_11_NB_LINE", nb_line_tMysqlInput_11);

				ok_Hash.put("tMysqlInput_11", true);
				end_Hash.put("tMysqlInput_11", System.currentTimeMillis());

				/**
				 * [tMysqlInput_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String SUMMARY;

		public String getSUMMARY() {
			return this.SUMMARY;
		}

		public String IMAGE_URL;

		public String getIMAGE_URL() {
			return this.IMAGE_URL;
		}

		public int STATE_ID;

		public int getSTATE_ID() {
			return this.STATE_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CITY == null) ? 0 : this.CITY.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.CITY == null) {
				if (other.CITY != null)
					return false;
			} else if (!this.CITY.equals(other.CITY))
				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.ID = this.ID;
			other.CITY = this.CITY;
			other.SUMMARY = this.SUMMARY;
			other.IMAGE_URL = this.IMAGE_URL;
			other.STATE_ID = this.STATE_ID;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.CITY = this.CITY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getProperties.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getProperties.length == 0) {
						commonByteArray_TALONETL_getProperties = new byte[1024];
					} else {
						commonByteArray_TALONETL_getProperties = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getProperties, 0, length);
				strReturn = new String(commonByteArray_TALONETL_getProperties,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.CITY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CITY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID = dis.readInt();

				this.SUMMARY = readString(dis, ois);

				this.IMAGE_URL = readString(dis, ois);

				this.STATE_ID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ID);

				writeString(this.SUMMARY, dos, oos);

				writeString(this.IMAGE_URL, dos, oos);

				dos.writeInt(this.STATE_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",CITY=" + CITY);
			sb.append(",SUMMARY=" + SUMMARY);
			sb.append(",IMAGE_URL=" + IMAGE_URL);
			sb.append(",STATE_ID=" + String.valueOf(STATE_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CITY, other.CITY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row12";

				int tos_count_tAdvancedHash_row12 = 0;

				// connection name:row12
				// source node:tMysqlInput_1 - inputs:() outputs:(row12,row12) |
				// target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
				// linked node: tMap_12 - inputs:(zipRowData,row12)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct> getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_1) {
					conn_tMysqlInput_1 = dataSources_tMysqlInput_1.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_1 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_1 = context.talon_Login;
					String dbPwd_tMysqlInput_1 = context.talon_Password;
					conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_1, dbUser_tMysqlInput_1,
							dbPwd_tMysqlInput_1);
				}

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT    `CITY`.`ID`,    `CITY`.`CITY`,    `CITY`.`SUMMARY`,    `CITY`.`IMAGE_URL`,    `CITY`.`STATE_ID` FROM `CITY`";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);

				java.sql.ResultSet rs_tMysqlInput_1 = stmt_tMysqlInput_1
						.executeQuery(dbquery_tMysqlInput_1);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
						.getMetaData();
				int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
						.getColumnCount();

				String tmpContent_tMysqlInput_1 = null;
				while (rs_tMysqlInput_1.next()) {
					nb_line_tMysqlInput_1++;

					if (colQtyInRs_tMysqlInput_1 < 1) {
						row12.ID = 0;
					} else {

						if (rs_tMysqlInput_1.getObject(1) != null) {
							row12.ID = rs_tMysqlInput_1.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 2) {
						row12.CITY = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(2);
						if (tmpContent_tMysqlInput_1 != null) {
							row12.CITY = tmpContent_tMysqlInput_1;
						} else {
							row12.CITY = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 3) {
						row12.SUMMARY = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(3);
						if (tmpContent_tMysqlInput_1 != null) {
							row12.SUMMARY = tmpContent_tMysqlInput_1;
						} else {
							row12.SUMMARY = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 4) {
						row12.IMAGE_URL = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(4);
						if (tmpContent_tMysqlInput_1 != null) {
							row12.IMAGE_URL = tmpContent_tMysqlInput_1;
						} else {
							row12.IMAGE_URL = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 5) {
						row12.STATE_ID = 0;
					} else {

						if (rs_tMysqlInput_1.getObject(5) != null) {
							row12.STATE_ID = rs_tMysqlInput_1.getInt(5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tMysqlInput_1 begin ] stop
					 */
					/**
					 * [tMysqlInput_1 main ] start
					 */

					currentComponent = "tMysqlInput_1";

					tos_count_tMysqlInput_1++;

					/**
					 * [tMysqlInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_row12 main ] start
					 */

					currentComponent = "tAdvancedHash_row12";

					row12Struct row12_HashRow = new row12Struct();

					row12_HashRow.ID = row12.ID;

					row12_HashRow.CITY = row12.CITY;

					row12_HashRow.SUMMARY = row12.SUMMARY;

					row12_HashRow.IMAGE_URL = row12.IMAGE_URL;

					row12_HashRow.STATE_ID = row12.STATE_ID;

					tHash_Lookup_row12.put(row12_HashRow);

					tos_count_tAdvancedHash_row12++;

					/**
					 * [tAdvancedHash_row12 main ] stop
					 */

					/**
					 * [tMysqlInput_1 end ] start
					 */

					currentComponent = "tMysqlInput_1";

				}
				rs_tMysqlInput_1.close();
				stmt_tMysqlInput_1.close();
				conn_tMysqlInput_1.close();

				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getProperties = new byte[0];
		static byte[] commonByteArray_TALONETL_getProperties = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ZIP_CODE;

		public int getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public int CITY_ID;

		public int getCITY_ID() {
			return this.CITY_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ZIP_CODE;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.ZIP_CODE != other.ZIP_CODE)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.ZIP_CODE = this.ZIP_CODE;
			other.CITY_ID = this.CITY_ID;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.ZIP_CODE = this.ZIP_CODE;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getProperties) {

				try {

					int length = 0;

					this.ZIP_CODE = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ZIP_CODE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CITY_ID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.CITY_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ZIP_CODE=" + String.valueOf(ZIP_CODE));
			sb.append(",CITY_ID=" + String.valueOf(CITY_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ZIP_CODE, other.ZIP_CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tHash_row6 begin ] start
				 */

				ok_Hash.put("tHash_row6", false);
				start_Hash.put("tHash_row6", System.currentTimeMillis());
				currentComponent = "tHash_row6";

				int tos_count_tHash_row6 = 0;

				java.util.Map<row6Struct, row6Struct> tHash_row6 = new java.util.LinkedHashMap<row6Struct, row6Struct>();
				globalMap.put("tHash_row6", tHash_row6);

				/**
				 * [tHash_row6 begin ] stop
				 */

				/**
				 * [tMysqlInput_8 begin ] start
				 */

				ok_Hash.put("tMysqlInput_8", false);
				start_Hash.put("tMysqlInput_8", System.currentTimeMillis());
				currentComponent = "tMysqlInput_8";

				int tos_count_tMysqlInput_8 = 0;

				java.util.Calendar calendar_tMysqlInput_8 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_8.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_8 = calendar_tMysqlInput_8
						.getTime();
				int nb_line_tMysqlInput_8 = 0;
				java.sql.Connection conn_tMysqlInput_8 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_8) {
					conn_tMysqlInput_8 = dataSources_tMysqlInput_8.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_8 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_8 = context.talon_Login;
					String dbPwd_tMysqlInput_8 = context.talon_Password;
					conn_tMysqlInput_8 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_8, dbUser_tMysqlInput_8,
							dbPwd_tMysqlInput_8);
				}

				java.sql.Statement stmt_tMysqlInput_8 = conn_tMysqlInput_8
						.createStatement();

				String dbquery_tMysqlInput_8 = "SELECT    `ZIP_CODES`.`ZIP_CODE`,    `ZIP_CODES`.`CITY_ID` FROM `ZIP_CODES`";

				globalMap.put("tMysqlInput_8_QUERY", dbquery_tMysqlInput_8);

				java.sql.ResultSet rs_tMysqlInput_8 = stmt_tMysqlInput_8
						.executeQuery(dbquery_tMysqlInput_8);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_8 = rs_tMysqlInput_8
						.getMetaData();
				int colQtyInRs_tMysqlInput_8 = rsmd_tMysqlInput_8
						.getColumnCount();

				String tmpContent_tMysqlInput_8 = null;
				while (rs_tMysqlInput_8.next()) {
					nb_line_tMysqlInput_8++;

					if (colQtyInRs_tMysqlInput_8 < 1) {
						row6.ZIP_CODE = 0;
					} else {

						if (rs_tMysqlInput_8.getObject(1) != null) {
							row6.ZIP_CODE = rs_tMysqlInput_8.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_8 < 2) {
						row6.CITY_ID = 0;
					} else {

						if (rs_tMysqlInput_8.getObject(2) != null) {
							row6.CITY_ID = rs_tMysqlInput_8.getInt(2);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tMysqlInput_8 begin ] stop
					 */
					/**
					 * [tMysqlInput_8 main ] start
					 */

					currentComponent = "tMysqlInput_8";

					tos_count_tMysqlInput_8++;

					/**
					 * [tMysqlInput_8 main ] stop
					 */

					/**
					 * [tHash_row6 main ] start
					 */

					currentComponent = "tHash_row6";

					row6Struct row6_HashRow = new row6Struct();

					row6_HashRow.ZIP_CODE = row6.ZIP_CODE;
					row6_HashRow.CITY_ID = row6.CITY_ID;
					tHash_row6.put(row6_HashRow, row6_HashRow);

					tos_count_tHash_row6++;

					/**
					 * [tHash_row6 main ] stop
					 */

					/**
					 * [tMysqlInput_8 end ] start
					 */

					currentComponent = "tMysqlInput_8";

				}
				rs_tMysqlInput_8.close();
				stmt_tMysqlInput_8.close();
				conn_tMysqlInput_8.close();

				globalMap.put("tMysqlInput_8_NB_LINE", nb_line_tMysqlInput_8);

				ok_Hash.put("tMysqlInput_8", true);
				end_Hash.put("tMysqlInput_8", System.currentTimeMillis());

				/**
				 * [tMysqlInput_8 end ] stop
				 */

				/**
				 * [tHash_row6 end ] start
				 */

				currentComponent = "tHash_row6";

				ok_Hash.put("tHash_row6", true);
				end_Hash.put("tHash_row6", System.currentTimeMillis());

				/**
				 * [tHash_row6 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());
				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out
						.println("***** Getting Property Data Feed from PropertyBase *****");

				/**
				 * [tJava_2 begin ] stop
				 */
				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */
				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileFetch_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final getProperties getPropertiesClass = new getProperties();

		int exitCode = getPropertiesClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = getProperties.class
					.getClassLoader().getResourceAsStream(
							"talonetl/getproperties_1_2/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.propertySourceUri = (String) context
					.getProperty("propertySourceUri");
			context.cusomterName = (String) context.getProperty("cusomterName");
			context.talon_Password = (java.lang.String) context
					.getProperty("talon_Password");
			context.talon_AdditionalParams = (String) context
					.getProperty("talon_AdditionalParams");
			context.talon_Port = (String) context.getProperty("talon_Port");
			context.talon_Database = (String) context
					.getProperty("talon_Database");
			context.talon_Server = (String) context.getProperty("talon_Server");
			context.talon_Login = (String) context.getProperty("talon_Login");
			context.cityStatsInfoApiUri = (String) context
					.getProperty("cityStatsInfoApiUri");
			context.authId = (String) context.getProperty("authId");
			context.authToken = (String) context.getProperty("authToken");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("propertySourceUri")) {
				context.propertySourceUri = (String) parentContextMap
						.get("propertySourceUri");
			}
			if (parentContextMap.containsKey("cusomterName")) {
				context.cusomterName = (String) parentContextMap
						.get("cusomterName");
			}
			if (parentContextMap.containsKey("talon_Password")) {
				context.talon_Password = (java.lang.String) parentContextMap
						.get("talon_Password");
			}
			if (parentContextMap.containsKey("talon_AdditionalParams")) {
				context.talon_AdditionalParams = (String) parentContextMap
						.get("talon_AdditionalParams");
			}
			if (parentContextMap.containsKey("talon_Port")) {
				context.talon_Port = (String) parentContextMap
						.get("talon_Port");
			}
			if (parentContextMap.containsKey("talon_Database")) {
				context.talon_Database = (String) parentContextMap
						.get("talon_Database");
			}
			if (parentContextMap.containsKey("talon_Server")) {
				context.talon_Server = (String) parentContextMap
						.get("talon_Server");
			}
			if (parentContextMap.containsKey("talon_Login")) {
				context.talon_Login = (String) parentContextMap
						.get("talon_Login");
			}
			if (parentContextMap.containsKey("cityStatsInfoApiUri")) {
				context.cityStatsInfoApiUri = (String) parentContextMap
						.get("cityStatsInfoApiUri");
			}
			if (parentContextMap.containsKey("authId")) {
				context.authId = (String) parentContextMap.get("authId");
			}
			if (parentContextMap.containsKey("authToken")) {
				context.authToken = (String) parentContextMap.get("authToken");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {

			e_tJava_2.printStackTrace();
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : getProperties");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 498269 characters generated by Talend Open Studio for Data Integration on the
 * May 28, 2013 12:09:16 PM MDT
 ************************************************************************************************/
