// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.2.1.r95165)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package talonetl.getpropfinacials_0_2;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_10
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_11
//import java.util.List;

//the import part of tJavaRow_12
//import java.util.List;

//the import part of tJavaRow_13
//import java.util.List;

//the import part of tJavaRow_14
//import java.util.List;

//the import part of tJavaRow_15
//import java.util.List;

//the import part of tJavaRow_16
//import java.util.List;

//the import part of tJavaRow_17
//import java.util.List;

//the import part of tJavaRow_18
//import java.util.List;

//the import part of tJavaRow_20
//import java.util.List;

//the import part of tJavaRow_21
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: getPropFinacials Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.2.1.r95165
 * @status 
 */
public class getPropFinacials implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (propertySourceUri != null) {

				this.setProperty("propertySourceUri",
						propertySourceUri.toString());

			}

			if (key != null) {

				this.setProperty("key", key.toString());

			}

			if (value != null) {

				this.setProperty("value", value.toString());

			}

			if (propUUID != null) {

				this.setProperty("propUUID", propUUID.toString());

			}

			if (talon_Password != null) {

				this.setProperty("talon_Password", talon_Password.toString());

			}

			if (talon_AdditionalParams != null) {

				this.setProperty("talon_AdditionalParams",
						talon_AdditionalParams.toString());

			}

			if (talon_Port != null) {

				this.setProperty("talon_Port", talon_Port.toString());

			}

			if (talon_Database != null) {

				this.setProperty("talon_Database", talon_Database.toString());

			}

			if (talon_Server != null) {

				this.setProperty("talon_Server", talon_Server.toString());

			}

			if (talon_Login != null) {

				this.setProperty("talon_Login", talon_Login.toString());

			}

		}

		public String propertySourceUri;

		public String getPropertySourceUri() {
			return this.propertySourceUri;
		}

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String propUUID;

		public String getPropUUID() {
			return this.propUUID;
		}

		public java.lang.String talon_Password;

		public java.lang.String getTalon_Password() {
			return this.talon_Password;
		}

		public String talon_AdditionalParams;

		public String getTalon_AdditionalParams() {
			return this.talon_AdditionalParams;
		}

		public String talon_Port;

		public String getTalon_Port() {
			return this.talon_Port;
		}

		public String talon_Database;

		public String getTalon_Database() {
			return this.talon_Database;
		}

		public String talon_Server;

		public String getTalon_Server() {
			return this.talon_Server;
		}

		public String talon_Login;

		public String getTalon_Login() {
			return this.talon_Login;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "getPropFinacials";
	private final String projectName = "TALONETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					getPropFinacials.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(getPropFinacials.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tFileInputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_1", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_2", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_3", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_5", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_4", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_4", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_10", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_9", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_9", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_6", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_5", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_5", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_7", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_6", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_6", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_8", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_7", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_7", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_9", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_8", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_8", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_11", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_10", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_10", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_12", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_11", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_11", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_13", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_12", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_12", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_14", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_13", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_13", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_15", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_14", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_14", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_16", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_15", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_15", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_17", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_16", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_16", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_18", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_17_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_17", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_17", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_20", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_18_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_18", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_18", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJavaRow_21", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_19_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_19", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tRunJob_19", System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileFetch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileFetch_1", System.currentTimeMillis());

		status = "failure";

		tFileFetch_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileFetch_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class financed_net_yield_1__cStruct implements
			routines.system.IPersistableRow<financed_net_yield_1__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(financed_net_yield_1__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class monthly_cash_flow_with_financing_2__cStruct
			implements
			routines.system.IPersistableRow<monthly_cash_flow_with_financing_2__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(monthly_cash_flow_with_financing_2__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class financed_net_yield_2__cStruct implements
			routines.system.IPersistableRow<financed_net_yield_2__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(financed_net_yield_2__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class monthly_cash_flow_with_financing_1__cStruct
			implements
			routines.system.IPersistableRow<monthly_cash_flow_with_financing_1__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(monthly_cash_flow_with_financing_1__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class interest_rate_1__cStruct implements
			routines.system.IPersistableRow<interest_rate_1__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(interest_rate_1__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class interest_rate_2__cStruct implements
			routines.system.IPersistableRow<interest_rate_2__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(interest_rate_2__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class price_per_ft_cStruct implements
			routines.system.IPersistableRow<price_per_ft_cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(price_per_ft_cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class noi_with_financing_1__cStruct implements
			routines.system.IPersistableRow<noi_with_financing_1__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(noi_with_financing_1__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class noi_with_financing_2__cStruct implements
			routines.system.IPersistableRow<noi_with_financing_2__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(noi_with_financing_2__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class noi__cStruct implements
			routines.system.IPersistableRow<noi__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(noi__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class monthly_cash_flow__cStruct implements
			routines.system.IPersistableRow<monthly_cash_flow__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(monthly_cash_flow__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class est_replacement_cost__cStruct implements
			routines.system.IPersistableRow<est_replacement_cost__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(est_replacement_cost__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class est_replacement_cost_per_sq_ft__cStruct
			implements
			routines.system.IPersistableRow<est_replacement_cost_per_sq_ft__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(est_replacement_cost_per_sq_ft__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class cash_net_yield__cStruct implements
			routines.system.IPersistableRow<cash_net_yield__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cash_net_yield__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class down_payment_1__cStruct implements
			routines.system.IPersistableRow<down_payment_1__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(down_payment_1__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class down_payment_2__cStruct implements
			routines.system.IPersistableRow<down_payment_2__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(down_payment_2__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class interest_payment_1__cStruct implements
			routines.system.IPersistableRow<interest_payment_1__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(interest_payment_1__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class yearly_interest_payment_1__cStruct implements
			routines.system.IPersistableRow<yearly_interest_payment_1__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(yearly_interest_payment_1__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class monthly_interest_payment_2__cStruct
			implements
			routines.system.IPersistableRow<monthly_interest_payment_2__cStruct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public Float value;

		public Float getValue() {
			return this.value;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.key = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.value = null;
					} else {
						this.value = dis.readFloat();
					}

					this.UUID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// Float

				if (this.value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.value);
				}

				// String

				writeString(this.UUID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + String.valueOf(value));
			sb.append(",UUID=" + UUID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(monthly_interest_payment_2__cStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String image_url;

		public String getImage_url() {
			return this.image_url;
		}

		public String image_title;

		public String getImage_title() {
			return this.image_title;
		}

		public String pba__propertytype__c;

		public String getPba__propertytype__c() {
			return this.pba__propertytype__c;
		}

		public String rented_status__c;

		public String getRented_status__c() {
			return this.rented_status__c;
		}

		public Integer zipcode__c;

		public Integer getZipcode__c() {
			return this.zipcode__c;
		}

		public String pba__city_pb__c;

		public String getPba__city_pb__c() {
			return this.pba__city_pb__c;
		}

		public String pba__description_pb__c;

		public String getPba__description_pb__c() {
			return this.pba__description_pb__c;
		}

		public String term_2__c;

		public String getTerm_2__c() {
			return this.term_2__c;
		}

		public String term_1__c;

		public String getTerm_1__c() {
			return this.term_1__c;
		}

		public String pba__status__c;

		public String getPba__status__c() {
			return this.pba__status__c;
		}

		public Integer year_built__c;

		public Integer getYear_built__c() {
			return this.year_built__c;
		}

		public String pba__address_pb__c;

		public String getPba__address_pb__c() {
			return this.pba__address_pb__c;
		}

		public Float financed_net_yield_1__c;

		public Float getFinanced_net_yield_1__c() {
			return this.financed_net_yield_1__c;
		}

		public Float monthly_cash_flow_with_financing_2__c;

		public Float getMonthly_cash_flow_with_financing_2__c() {
			return this.monthly_cash_flow_with_financing_2__c;
		}

		public Float financed_net_yield_2__c;

		public Float getFinanced_net_yield_2__c() {
			return this.financed_net_yield_2__c;
		}

		public Float monthly_cash_flow_with_financing_1__c;

		public Float getMonthly_cash_flow_with_financing_1__c() {
			return this.monthly_cash_flow_with_financing_1__c;
		}

		public Float interest_rate_2__c;

		public Float getInterest_rate_2__c() {
			return this.interest_rate_2__c;
		}

		public Float interest_rate_1__c;

		public Float getInterest_rate_1__c() {
			return this.interest_rate_1__c;
		}

		public Float monthly_cash_flow__c;

		public Float getMonthly_cash_flow__c() {
			return this.monthly_cash_flow__c;
		}

		public Float noi__c;

		public Float getNoi__c() {
			return this.noi__c;
		}

		public Float noi_with_financing_2__c;

		public Float getNoi_with_financing_2__c() {
			return this.noi_with_financing_2__c;
		}

		public Float noi_with_financing_1__c;

		public Float getNoi_with_financing_1__c() {
			return this.noi_with_financing_1__c;
		}

		public Float price_per_ft__c;

		public Float getPrice_per_ft__c() {
			return this.price_per_ft__c;
		}

		public Float price__c;

		public Float getPrice__c() {
			return this.price__c;
		}

		public Float yearly_interest_payment_1__c;

		public Float getYearly_interest_payment_1__c() {
			return this.yearly_interest_payment_1__c;
		}

		public Float monthly_interest_payment_2__c;

		public Float getMonthly_interest_payment_2__c() {
			return this.monthly_interest_payment_2__c;
		}

		public Float interest_payment_1__c;

		public Float getInterest_payment_1__c() {
			return this.interest_payment_1__c;
		}

		public Float down_payment_2__c;

		public Float getDown_payment_2__c() {
			return this.down_payment_2__c;
		}

		public Float down_payment_1__c;

		public Float getDown_payment_1__c() {
			return this.down_payment_1__c;
		}

		public Float cash_net_yield__c;

		public Float getCash_net_yield__c() {
			return this.cash_net_yield__c;
		}

		public Float monthly_management__c;

		public Float getMonthly_management__c() {
			return this.monthly_management__c;
		}

		public Float management__c;

		public Float getManagement__c() {
			return this.management__c;
		}

		public Float monthly_insurance__c;

		public Float getMonthly_insurance__c() {
			return this.monthly_insurance__c;
		}

		public Float insurance__c;

		public Float getInsurance__c() {
			return this.insurance__c;
		}

		public Float taxes__c;

		public Float getTaxes__c() {
			return this.taxes__c;
		}

		public Float monthly_taxes__c;

		public Float getMonthly_taxes__c() {
			return this.monthly_taxes__c;
		}

		public Float monthlyrent__c;

		public Float getMonthlyrent__c() {
			return this.monthlyrent__c;
		}

		public Float annual_rents__c;

		public Float getAnnual_rents__c() {
			return this.annual_rents__c;
		}

		public Float est_of_market_value__c;

		public Float getEst_of_market_value__c() {
			return this.est_of_market_value__c;
		}

		public Float est_value_per_rent_multiplier__c;

		public Float getEst_value_per_rent_multiplier__c() {
			return this.est_value_per_rent_multiplier__c;
		}

		public String estimated_value__c;

		public String getEstimated_value__c() {
			return this.estimated_value__c;
		}

		public Float est_replacement_cost_per_sq_ft__c;

		public Float getEst_replacement_cost_per_sq_ft__c() {
			return this.est_replacement_cost_per_sq_ft__c;
		}

		public Float est_replacement_cost__c;

		public Float getEst_replacement_cost__c() {
			return this.est_replacement_cost__c;
		}

		public Float pba__totalarea_pb__c;

		public Float getPba__totalarea_pb__c() {
			return this.pba__totalarea_pb__c;
		}

		public Float bedrooms__c;

		public Float getBedrooms__c() {
			return this.bedrooms__c;
		}

		public Float bathrooms__c;

		public Float getBathrooms__c() {
			return this.bathrooms__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.image_url = readString(dis);

					this.image_title = readString(dis);

					this.pba__propertytype__c = readString(dis);

					this.rented_status__c = readString(dis);

					this.zipcode__c = readInteger(dis);

					this.pba__city_pb__c = readString(dis);

					this.pba__description_pb__c = readString(dis);

					this.term_2__c = readString(dis);

					this.term_1__c = readString(dis);

					this.pba__status__c = readString(dis);

					this.year_built__c = readInteger(dis);

					this.pba__address_pb__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.financed_net_yield_1__c = null;
					} else {
						this.financed_net_yield_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow_with_financing_2__c = null;
					} else {
						this.monthly_cash_flow_with_financing_2__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.financed_net_yield_2__c = null;
					} else {
						this.financed_net_yield_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow_with_financing_1__c = null;
					} else {
						this.monthly_cash_flow_with_financing_1__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_rate_2__c = null;
					} else {
						this.interest_rate_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_rate_1__c = null;
					} else {
						this.interest_rate_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_cash_flow__c = null;
					} else {
						this.monthly_cash_flow__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi__c = null;
					} else {
						this.noi__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi_with_financing_2__c = null;
					} else {
						this.noi_with_financing_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.noi_with_financing_1__c = null;
					} else {
						this.noi_with_financing_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price_per_ft__c = null;
					} else {
						this.price_per_ft__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.price__c = null;
					} else {
						this.price__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.yearly_interest_payment_1__c = null;
					} else {
						this.yearly_interest_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_interest_payment_2__c = null;
					} else {
						this.monthly_interest_payment_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interest_payment_1__c = null;
					} else {
						this.interest_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.down_payment_2__c = null;
					} else {
						this.down_payment_2__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.down_payment_1__c = null;
					} else {
						this.down_payment_1__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cash_net_yield__c = null;
					} else {
						this.cash_net_yield__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_management__c = null;
					} else {
						this.monthly_management__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.management__c = null;
					} else {
						this.management__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_insurance__c = null;
					} else {
						this.monthly_insurance__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.insurance__c = null;
					} else {
						this.insurance__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.taxes__c = null;
					} else {
						this.taxes__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthly_taxes__c = null;
					} else {
						this.monthly_taxes__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.monthlyrent__c = null;
					} else {
						this.monthlyrent__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.annual_rents__c = null;
					} else {
						this.annual_rents__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_of_market_value__c = null;
					} else {
						this.est_of_market_value__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_value_per_rent_multiplier__c = null;
					} else {
						this.est_value_per_rent_multiplier__c = dis.readFloat();
					}

					this.estimated_value__c = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.est_replacement_cost_per_sq_ft__c = null;
					} else {
						this.est_replacement_cost_per_sq_ft__c = dis
								.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.est_replacement_cost__c = null;
					} else {
						this.est_replacement_cost__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.pba__totalarea_pb__c = null;
					} else {
						this.pba__totalarea_pb__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bedrooms__c = null;
					} else {
						this.bedrooms__c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bathrooms__c = null;
					} else {
						this.bathrooms__c = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.image_url, dos);

				// String

				writeString(this.image_title, dos);

				// String

				writeString(this.pba__propertytype__c, dos);

				// String

				writeString(this.rented_status__c, dos);

				// Integer

				writeInteger(this.zipcode__c, dos);

				// String

				writeString(this.pba__city_pb__c, dos);

				// String

				writeString(this.pba__description_pb__c, dos);

				// String

				writeString(this.term_2__c, dos);

				// String

				writeString(this.term_1__c, dos);

				// String

				writeString(this.pba__status__c, dos);

				// Integer

				writeInteger(this.year_built__c, dos);

				// String

				writeString(this.pba__address_pb__c, dos);

				// Float

				if (this.financed_net_yield_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.financed_net_yield_1__c);
				}

				// Float

				if (this.monthly_cash_flow_with_financing_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow_with_financing_2__c);
				}

				// Float

				if (this.financed_net_yield_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.financed_net_yield_2__c);
				}

				// Float

				if (this.monthly_cash_flow_with_financing_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow_with_financing_1__c);
				}

				// Float

				if (this.interest_rate_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_rate_2__c);
				}

				// Float

				if (this.interest_rate_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_rate_1__c);
				}

				// Float

				if (this.monthly_cash_flow__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_cash_flow__c);
				}

				// Float

				if (this.noi__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi__c);
				}

				// Float

				if (this.noi_with_financing_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi_with_financing_2__c);
				}

				// Float

				if (this.noi_with_financing_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.noi_with_financing_1__c);
				}

				// Float

				if (this.price_per_ft__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price_per_ft__c);
				}

				// Float

				if (this.price__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.price__c);
				}

				// Float

				if (this.yearly_interest_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.yearly_interest_payment_1__c);
				}

				// Float

				if (this.monthly_interest_payment_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_interest_payment_2__c);
				}

				// Float

				if (this.interest_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.interest_payment_1__c);
				}

				// Float

				if (this.down_payment_2__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.down_payment_2__c);
				}

				// Float

				if (this.down_payment_1__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.down_payment_1__c);
				}

				// Float

				if (this.cash_net_yield__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cash_net_yield__c);
				}

				// Float

				if (this.monthly_management__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_management__c);
				}

				// Float

				if (this.management__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.management__c);
				}

				// Float

				if (this.monthly_insurance__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_insurance__c);
				}

				// Float

				if (this.insurance__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.insurance__c);
				}

				// Float

				if (this.taxes__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.taxes__c);
				}

				// Float

				if (this.monthly_taxes__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthly_taxes__c);
				}

				// Float

				if (this.monthlyrent__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.monthlyrent__c);
				}

				// Float

				if (this.annual_rents__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.annual_rents__c);
				}

				// Float

				if (this.est_of_market_value__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_of_market_value__c);
				}

				// Float

				if (this.est_value_per_rent_multiplier__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_value_per_rent_multiplier__c);
				}

				// String

				writeString(this.estimated_value__c, dos);

				// Float

				if (this.est_replacement_cost_per_sq_ft__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_replacement_cost_per_sq_ft__c);
				}

				// Float

				if (this.est_replacement_cost__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.est_replacement_cost__c);
				}

				// Float

				if (this.pba__totalarea_pb__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.pba__totalarea_pb__c);
				}

				// Float

				if (this.bedrooms__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.bedrooms__c);
				}

				// Float

				if (this.bathrooms__c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.bathrooms__c);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",image_url=" + image_url);
			sb.append(",image_title=" + image_title);
			sb.append(",pba__propertytype__c=" + pba__propertytype__c);
			sb.append(",rented_status__c=" + rented_status__c);
			sb.append(",zipcode__c=" + String.valueOf(zipcode__c));
			sb.append(",pba__city_pb__c=" + pba__city_pb__c);
			sb.append(",pba__description_pb__c=" + pba__description_pb__c);
			sb.append(",term_2__c=" + term_2__c);
			sb.append(",term_1__c=" + term_1__c);
			sb.append(",pba__status__c=" + pba__status__c);
			sb.append(",year_built__c=" + String.valueOf(year_built__c));
			sb.append(",pba__address_pb__c=" + pba__address_pb__c);
			sb.append(",financed_net_yield_1__c="
					+ String.valueOf(financed_net_yield_1__c));
			sb.append(",monthly_cash_flow_with_financing_2__c="
					+ String.valueOf(monthly_cash_flow_with_financing_2__c));
			sb.append(",financed_net_yield_2__c="
					+ String.valueOf(financed_net_yield_2__c));
			sb.append(",monthly_cash_flow_with_financing_1__c="
					+ String.valueOf(monthly_cash_flow_with_financing_1__c));
			sb.append(",interest_rate_2__c="
					+ String.valueOf(interest_rate_2__c));
			sb.append(",interest_rate_1__c="
					+ String.valueOf(interest_rate_1__c));
			sb.append(",monthly_cash_flow__c="
					+ String.valueOf(monthly_cash_flow__c));
			sb.append(",noi__c=" + String.valueOf(noi__c));
			sb.append(",noi_with_financing_2__c="
					+ String.valueOf(noi_with_financing_2__c));
			sb.append(",noi_with_financing_1__c="
					+ String.valueOf(noi_with_financing_1__c));
			sb.append(",price_per_ft__c=" + String.valueOf(price_per_ft__c));
			sb.append(",price__c=" + String.valueOf(price__c));
			sb.append(",yearly_interest_payment_1__c="
					+ String.valueOf(yearly_interest_payment_1__c));
			sb.append(",monthly_interest_payment_2__c="
					+ String.valueOf(monthly_interest_payment_2__c));
			sb.append(",interest_payment_1__c="
					+ String.valueOf(interest_payment_1__c));
			sb.append(",down_payment_2__c=" + String.valueOf(down_payment_2__c));
			sb.append(",down_payment_1__c=" + String.valueOf(down_payment_1__c));
			sb.append(",cash_net_yield__c=" + String.valueOf(cash_net_yield__c));
			sb.append(",monthly_management__c="
					+ String.valueOf(monthly_management__c));
			sb.append(",management__c=" + String.valueOf(management__c));
			sb.append(",monthly_insurance__c="
					+ String.valueOf(monthly_insurance__c));
			sb.append(",insurance__c=" + String.valueOf(insurance__c));
			sb.append(",taxes__c=" + String.valueOf(taxes__c));
			sb.append(",monthly_taxes__c=" + String.valueOf(monthly_taxes__c));
			sb.append(",monthlyrent__c=" + String.valueOf(monthlyrent__c));
			sb.append(",annual_rents__c=" + String.valueOf(annual_rents__c));
			sb.append(",est_of_market_value__c="
					+ String.valueOf(est_of_market_value__c));
			sb.append(",est_value_per_rent_multiplier__c="
					+ String.valueOf(est_value_per_rent_multiplier__c));
			sb.append(",estimated_value__c=" + estimated_value__c);
			sb.append(",est_replacement_cost_per_sq_ft__c="
					+ String.valueOf(est_replacement_cost_per_sq_ft__c));
			sb.append(",est_replacement_cost__c="
					+ String.valueOf(est_replacement_cost__c));
			sb.append(",pba__totalarea_pb__c="
					+ String.valueOf(pba__totalarea_pb__c));
			sb.append(",bedrooms__c=" + String.valueOf(bedrooms__c));
			sb.append(",bathrooms__c=" + String.valueOf(bathrooms__c));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				financed_net_yield_1__cStruct financed_net_yield_1__c = new financed_net_yield_1__cStruct();
				row2Struct row2 = new row2Struct();
				monthly_cash_flow_with_financing_2__cStruct monthly_cash_flow_with_financing_2__c = new monthly_cash_flow_with_financing_2__cStruct();
				row6Struct row6 = new row6Struct();
				financed_net_yield_2__cStruct financed_net_yield_2__c = new financed_net_yield_2__cStruct();
				row7Struct row7 = new row7Struct();
				monthly_cash_flow_with_financing_1__cStruct monthly_cash_flow_with_financing_1__c = new monthly_cash_flow_with_financing_1__cStruct();
				row8Struct row8 = new row8Struct();
				interest_rate_1__cStruct interest_rate_1__c = new interest_rate_1__cStruct();
				row10Struct row10 = new row10Struct();
				interest_rate_2__cStruct interest_rate_2__c = new interest_rate_2__cStruct();
				row9Struct row9 = new row9Struct();
				price_per_ft_cStruct price_per_ft_c = new price_per_ft_cStruct();
				row3Struct row3 = new row3Struct();
				noi_with_financing_1__cStruct noi_with_financing_1__c = new noi_with_financing_1__cStruct();
				row4Struct row4 = new row4Struct();
				noi_with_financing_2__cStruct noi_with_financing_2__c = new noi_with_financing_2__cStruct();
				row5Struct row5 = new row5Struct();
				noi__cStruct noi__c = new noi__cStruct();
				row14Struct row14 = new row14Struct();
				monthly_cash_flow__cStruct monthly_cash_flow__c = new monthly_cash_flow__cStruct();
				row15Struct row15 = new row15Struct();
				est_replacement_cost__cStruct est_replacement_cost__c = new est_replacement_cost__cStruct();
				row16Struct row16 = new row16Struct();
				est_replacement_cost_per_sq_ft__cStruct est_replacement_cost_per_sq_ft__c = new est_replacement_cost_per_sq_ft__cStruct();
				row17Struct row17 = new row17Struct();
				cash_net_yield__cStruct cash_net_yield__c = new cash_net_yield__cStruct();
				row18Struct row18 = new row18Struct();
				down_payment_1__cStruct down_payment_1__c = new down_payment_1__cStruct();
				row19Struct row19 = new row19Struct();
				down_payment_2__cStruct down_payment_2__c = new down_payment_2__cStruct();
				row20Struct row20 = new row20Struct();
				interest_payment_1__cStruct interest_payment_1__c = new interest_payment_1__cStruct();
				row21Struct row21 = new row21Struct();
				yearly_interest_payment_1__cStruct yearly_interest_payment_1__c = new yearly_interest_payment_1__cStruct();
				row22Struct row22 = new row22Struct();
				monthly_interest_payment_2__cStruct monthly_interest_payment_2__c = new monthly_interest_payment_2__cStruct();
				row23Struct row23 = new row23Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tRunJob_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());
				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFlowToIterate_2 begin ] start
				 */

				int NB_ITERATE_tRunJob_2 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_2", false);
				start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_2";

				int tos_count_tFlowToIterate_2 = 0;

				int nb_line_tFlowToIterate_2 = 0;
				int counter_tFlowToIterate_2 = 0;

				/**
				 * [tFlowToIterate_2 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());
				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tFlowToIterate_3 begin ] start
				 */

				int NB_ITERATE_tRunJob_3 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_3", false);
				start_Hash.put("tFlowToIterate_3", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_3";

				int tos_count_tFlowToIterate_3 = 0;

				int nb_line_tFlowToIterate_3 = 0;
				int counter_tFlowToIterate_3 = 0;

				/**
				 * [tFlowToIterate_3 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());
				currentComponent = "tJavaRow_4";

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tFlowToIterate_4 begin ] start
				 */

				int NB_ITERATE_tRunJob_4 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_4", false);
				start_Hash.put("tFlowToIterate_4", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_4";

				int tos_count_tFlowToIterate_4 = 0;

				int nb_line_tFlowToIterate_4 = 0;
				int counter_tFlowToIterate_4 = 0;

				/**
				 * [tFlowToIterate_4 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());
				currentComponent = "tJavaRow_5";

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tFlowToIterate_9 begin ] start
				 */

				int NB_ITERATE_tRunJob_9 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_9", false);
				start_Hash.put("tFlowToIterate_9", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_9";

				int tos_count_tFlowToIterate_9 = 0;

				int nb_line_tFlowToIterate_9 = 0;
				int counter_tFlowToIterate_9 = 0;

				/**
				 * [tFlowToIterate_9 begin ] stop
				 */

				/**
				 * [tJavaRow_10 begin ] start
				 */

				ok_Hash.put("tJavaRow_10", false);
				start_Hash.put("tJavaRow_10", System.currentTimeMillis());
				currentComponent = "tJavaRow_10";

				int tos_count_tJavaRow_10 = 0;

				int nb_line_tJavaRow_10 = 0;

				/**
				 * [tJavaRow_10 begin ] stop
				 */

				/**
				 * [tFlowToIterate_5 begin ] start
				 */

				int NB_ITERATE_tRunJob_5 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_5", false);
				start_Hash.put("tFlowToIterate_5", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_5";

				int tos_count_tFlowToIterate_5 = 0;

				int nb_line_tFlowToIterate_5 = 0;
				int counter_tFlowToIterate_5 = 0;

				/**
				 * [tFlowToIterate_5 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());
				currentComponent = "tJavaRow_6";

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tFlowToIterate_6 begin ] start
				 */

				int NB_ITERATE_tRunJob_6 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_6", false);
				start_Hash.put("tFlowToIterate_6", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_6";

				int tos_count_tFlowToIterate_6 = 0;

				int nb_line_tFlowToIterate_6 = 0;
				int counter_tFlowToIterate_6 = 0;

				/**
				 * [tFlowToIterate_6 begin ] stop
				 */

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());
				currentComponent = "tJavaRow_7";

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tFlowToIterate_7 begin ] start
				 */

				int NB_ITERATE_tRunJob_7 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_7", false);
				start_Hash.put("tFlowToIterate_7", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_7";

				int tos_count_tFlowToIterate_7 = 0;

				int nb_line_tFlowToIterate_7 = 0;
				int counter_tFlowToIterate_7 = 0;

				/**
				 * [tFlowToIterate_7 begin ] stop
				 */

				/**
				 * [tJavaRow_8 begin ] start
				 */

				ok_Hash.put("tJavaRow_8", false);
				start_Hash.put("tJavaRow_8", System.currentTimeMillis());
				currentComponent = "tJavaRow_8";

				int tos_count_tJavaRow_8 = 0;

				int nb_line_tJavaRow_8 = 0;

				/**
				 * [tJavaRow_8 begin ] stop
				 */

				/**
				 * [tFlowToIterate_8 begin ] start
				 */

				int NB_ITERATE_tRunJob_8 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_8", false);
				start_Hash.put("tFlowToIterate_8", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_8";

				int tos_count_tFlowToIterate_8 = 0;

				int nb_line_tFlowToIterate_8 = 0;
				int counter_tFlowToIterate_8 = 0;

				/**
				 * [tFlowToIterate_8 begin ] stop
				 */

				/**
				 * [tJavaRow_9 begin ] start
				 */

				ok_Hash.put("tJavaRow_9", false);
				start_Hash.put("tJavaRow_9", System.currentTimeMillis());
				currentComponent = "tJavaRow_9";

				int tos_count_tJavaRow_9 = 0;

				int nb_line_tJavaRow_9 = 0;

				/**
				 * [tJavaRow_9 begin ] stop
				 */

				/**
				 * [tFlowToIterate_10 begin ] start
				 */

				int NB_ITERATE_tRunJob_10 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_10", false);
				start_Hash.put("tFlowToIterate_10", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_10";

				int tos_count_tFlowToIterate_10 = 0;

				int nb_line_tFlowToIterate_10 = 0;
				int counter_tFlowToIterate_10 = 0;

				/**
				 * [tFlowToIterate_10 begin ] stop
				 */

				/**
				 * [tJavaRow_11 begin ] start
				 */

				ok_Hash.put("tJavaRow_11", false);
				start_Hash.put("tJavaRow_11", System.currentTimeMillis());
				currentComponent = "tJavaRow_11";

				int tos_count_tJavaRow_11 = 0;

				int nb_line_tJavaRow_11 = 0;

				/**
				 * [tJavaRow_11 begin ] stop
				 */

				/**
				 * [tFlowToIterate_11 begin ] start
				 */

				int NB_ITERATE_tRunJob_11 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_11", false);
				start_Hash.put("tFlowToIterate_11", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_11";

				int tos_count_tFlowToIterate_11 = 0;

				int nb_line_tFlowToIterate_11 = 0;
				int counter_tFlowToIterate_11 = 0;

				/**
				 * [tFlowToIterate_11 begin ] stop
				 */

				/**
				 * [tJavaRow_12 begin ] start
				 */

				ok_Hash.put("tJavaRow_12", false);
				start_Hash.put("tJavaRow_12", System.currentTimeMillis());
				currentComponent = "tJavaRow_12";

				int tos_count_tJavaRow_12 = 0;

				int nb_line_tJavaRow_12 = 0;

				/**
				 * [tJavaRow_12 begin ] stop
				 */

				/**
				 * [tFlowToIterate_12 begin ] start
				 */

				int NB_ITERATE_tRunJob_12 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_12", false);
				start_Hash.put("tFlowToIterate_12", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_12";

				int tos_count_tFlowToIterate_12 = 0;

				int nb_line_tFlowToIterate_12 = 0;
				int counter_tFlowToIterate_12 = 0;

				/**
				 * [tFlowToIterate_12 begin ] stop
				 */

				/**
				 * [tJavaRow_13 begin ] start
				 */

				ok_Hash.put("tJavaRow_13", false);
				start_Hash.put("tJavaRow_13", System.currentTimeMillis());
				currentComponent = "tJavaRow_13";

				int tos_count_tJavaRow_13 = 0;

				int nb_line_tJavaRow_13 = 0;

				/**
				 * [tJavaRow_13 begin ] stop
				 */

				/**
				 * [tFlowToIterate_13 begin ] start
				 */

				int NB_ITERATE_tRunJob_13 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_13", false);
				start_Hash.put("tFlowToIterate_13", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_13";

				int tos_count_tFlowToIterate_13 = 0;

				int nb_line_tFlowToIterate_13 = 0;
				int counter_tFlowToIterate_13 = 0;

				/**
				 * [tFlowToIterate_13 begin ] stop
				 */

				/**
				 * [tJavaRow_14 begin ] start
				 */

				ok_Hash.put("tJavaRow_14", false);
				start_Hash.put("tJavaRow_14", System.currentTimeMillis());
				currentComponent = "tJavaRow_14";

				int tos_count_tJavaRow_14 = 0;

				int nb_line_tJavaRow_14 = 0;

				/**
				 * [tJavaRow_14 begin ] stop
				 */

				/**
				 * [tFlowToIterate_14 begin ] start
				 */

				int NB_ITERATE_tRunJob_14 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_14", false);
				start_Hash.put("tFlowToIterate_14", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_14";

				int tos_count_tFlowToIterate_14 = 0;

				int nb_line_tFlowToIterate_14 = 0;
				int counter_tFlowToIterate_14 = 0;

				/**
				 * [tFlowToIterate_14 begin ] stop
				 */

				/**
				 * [tJavaRow_15 begin ] start
				 */

				ok_Hash.put("tJavaRow_15", false);
				start_Hash.put("tJavaRow_15", System.currentTimeMillis());
				currentComponent = "tJavaRow_15";

				int tos_count_tJavaRow_15 = 0;

				int nb_line_tJavaRow_15 = 0;

				/**
				 * [tJavaRow_15 begin ] stop
				 */

				/**
				 * [tFlowToIterate_15 begin ] start
				 */

				int NB_ITERATE_tRunJob_15 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_15", false);
				start_Hash.put("tFlowToIterate_15", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_15";

				int tos_count_tFlowToIterate_15 = 0;

				int nb_line_tFlowToIterate_15 = 0;
				int counter_tFlowToIterate_15 = 0;

				/**
				 * [tFlowToIterate_15 begin ] stop
				 */

				/**
				 * [tJavaRow_16 begin ] start
				 */

				ok_Hash.put("tJavaRow_16", false);
				start_Hash.put("tJavaRow_16", System.currentTimeMillis());
				currentComponent = "tJavaRow_16";

				int tos_count_tJavaRow_16 = 0;

				int nb_line_tJavaRow_16 = 0;

				/**
				 * [tJavaRow_16 begin ] stop
				 */

				/**
				 * [tFlowToIterate_16 begin ] start
				 */

				int NB_ITERATE_tRunJob_16 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_16", false);
				start_Hash.put("tFlowToIterate_16", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_16";

				int tos_count_tFlowToIterate_16 = 0;

				int nb_line_tFlowToIterate_16 = 0;
				int counter_tFlowToIterate_16 = 0;

				/**
				 * [tFlowToIterate_16 begin ] stop
				 */

				/**
				 * [tJavaRow_17 begin ] start
				 */

				ok_Hash.put("tJavaRow_17", false);
				start_Hash.put("tJavaRow_17", System.currentTimeMillis());
				currentComponent = "tJavaRow_17";

				int tos_count_tJavaRow_17 = 0;

				int nb_line_tJavaRow_17 = 0;

				/**
				 * [tJavaRow_17 begin ] stop
				 */

				/**
				 * [tFlowToIterate_17 begin ] start
				 */

				int NB_ITERATE_tRunJob_17 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_17", false);
				start_Hash.put("tFlowToIterate_17", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_17";

				int tos_count_tFlowToIterate_17 = 0;

				int nb_line_tFlowToIterate_17 = 0;
				int counter_tFlowToIterate_17 = 0;

				/**
				 * [tFlowToIterate_17 begin ] stop
				 */

				/**
				 * [tJavaRow_18 begin ] start
				 */

				ok_Hash.put("tJavaRow_18", false);
				start_Hash.put("tJavaRow_18", System.currentTimeMillis());
				currentComponent = "tJavaRow_18";

				int tos_count_tJavaRow_18 = 0;

				int nb_line_tJavaRow_18 = 0;

				/**
				 * [tJavaRow_18 begin ] stop
				 */

				/**
				 * [tFlowToIterate_18 begin ] start
				 */

				int NB_ITERATE_tRunJob_18 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_18", false);
				start_Hash.put("tFlowToIterate_18", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_18";

				int tos_count_tFlowToIterate_18 = 0;

				int nb_line_tFlowToIterate_18 = 0;
				int counter_tFlowToIterate_18 = 0;

				/**
				 * [tFlowToIterate_18 begin ] stop
				 */

				/**
				 * [tJavaRow_20 begin ] start
				 */

				ok_Hash.put("tJavaRow_20", false);
				start_Hash.put("tJavaRow_20", System.currentTimeMillis());
				currentComponent = "tJavaRow_20";

				int tos_count_tJavaRow_20 = 0;

				int nb_line_tJavaRow_20 = 0;

				/**
				 * [tJavaRow_20 begin ] stop
				 */

				/**
				 * [tFlowToIterate_19 begin ] start
				 */

				int NB_ITERATE_tRunJob_19 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_19", false);
				start_Hash.put("tFlowToIterate_19", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_19";

				int tos_count_tFlowToIterate_19 = 0;

				int nb_line_tFlowToIterate_19 = 0;
				int counter_tFlowToIterate_19 = 0;

				/**
				 * [tFlowToIterate_19 begin ] stop
				 */

				/**
				 * [tJavaRow_21 begin ] start
				 */

				ok_Hash.put("tJavaRow_21", false);
				start_Hash.put("tJavaRow_21", System.currentTimeMillis());
				currentComponent = "tJavaRow_21";

				int tos_count_tJavaRow_21 = 0;

				int nb_line_tJavaRow_21 = 0;

				/**
				 * [tJavaRow_21 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());
				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = null;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_Cache_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct> getLookup(org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH);

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_Real_row11 = null;

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					String UUID;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				financed_net_yield_1__cStruct financed_net_yield_1__c_tmp = new financed_net_yield_1__cStruct();
				monthly_cash_flow_with_financing_2__cStruct monthly_cash_flow_with_financing_2__c_tmp = new monthly_cash_flow_with_financing_2__cStruct();
				financed_net_yield_2__cStruct financed_net_yield_2__c_tmp = new financed_net_yield_2__cStruct();
				monthly_cash_flow_with_financing_1__cStruct monthly_cash_flow_with_financing_1__c_tmp = new monthly_cash_flow_with_financing_1__cStruct();
				interest_rate_1__cStruct interest_rate_1__c_tmp = new interest_rate_1__cStruct();
				interest_rate_2__cStruct interest_rate_2__c_tmp = new interest_rate_2__cStruct();
				price_per_ft_cStruct price_per_ft_c_tmp = new price_per_ft_cStruct();
				noi_with_financing_1__cStruct noi_with_financing_1__c_tmp = new noi_with_financing_1__cStruct();
				noi_with_financing_2__cStruct noi_with_financing_2__c_tmp = new noi_with_financing_2__cStruct();
				noi__cStruct noi__c_tmp = new noi__cStruct();
				monthly_cash_flow__cStruct monthly_cash_flow__c_tmp = new monthly_cash_flow__cStruct();
				est_replacement_cost__cStruct est_replacement_cost__c_tmp = new est_replacement_cost__cStruct();
				est_replacement_cost_per_sq_ft__cStruct est_replacement_cost_per_sq_ft__c_tmp = new est_replacement_cost_per_sq_ft__cStruct();
				cash_net_yield__cStruct cash_net_yield__c_tmp = new cash_net_yield__cStruct();
				down_payment_1__cStruct down_payment_1__c_tmp = new down_payment_1__cStruct();
				down_payment_2__cStruct down_payment_2__c_tmp = new down_payment_2__cStruct();
				interest_payment_1__cStruct interest_payment_1__c_tmp = new interest_payment_1__cStruct();
				yearly_interest_payment_1__cStruct yearly_interest_payment_1__c_tmp = new yearly_interest_payment_1__cStruct();
				monthly_interest_payment_2__cStruct monthly_interest_payment_2__c_tmp = new monthly_interest_payment_2__cStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				String os_tFileInputXML_1 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1
						|| os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(String[] node)
							throws javax.xml.transform.TransformerException {
						if (node[0] != null && node[1] != null
								&& ("true").equals(node[1])) {
							return true;
						}
						return false;
					}

					public boolean isMissing(String[] node)
							throws javax.xml.transform.TransformerException {
						return node[0] == null ? true : false;
					}

					public boolean isEmpty(String[] node)
							throws javax.xml.transform.TransformerException {
						if (node[0] != null) {
							return node[0].length() == 0;
						}
						return false;
					}
				}
				XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

				String[] queryPaths_tFileInputXML_1 = new String[] { "name",
						"name" + "/@xsi:nil", "../media/images/image/url",
						"../media/images/image/url" + "/@xsi:nil",
						"../media/images/image/title",
						"../media/images/image/title" + "/@xsi:nil",
						"pba__propertytype__c",
						"pba__propertytype__c" + "/@xsi:nil",
						"rented_status__c", "rented_status__c" + "/@xsi:nil",
						"zipcode__c", "zipcode__c" + "/@xsi:nil",
						"pba__city_pb__c", "pba__city_pb__c" + "/@xsi:nil",
						"pba__description_pb__c",
						"pba__description_pb__c" + "/@xsi:nil", "term_2__c",
						"term_2__c" + "/@xsi:nil", "term_1__c",
						"term_1__c" + "/@xsi:nil", "pba__status__c",
						"pba__status__c" + "/@xsi:nil", "year_built__c",
						"year_built__c" + "/@xsi:nil", "pba__address_pb__c",
						"pba__address_pb__c" + "/@xsi:nil",
						"financed_net_yield_1__c",
						"financed_net_yield_1__c" + "/@xsi:nil",
						"monthly_cash_flow_with_financing_2__c",
						"monthly_cash_flow_with_financing_2__c" + "/@xsi:nil",
						"financed_net_yield_2__c",
						"financed_net_yield_2__c" + "/@xsi:nil",
						"monthly_cash_flow_with_financing_1__c",
						"monthly_cash_flow_with_financing_1__c" + "/@xsi:nil",
						"interest_rate_2__c",
						"interest_rate_2__c" + "/@xsi:nil",
						"interest_rate_1__c",
						"interest_rate_1__c" + "/@xsi:nil",
						"monthly_cash_flow__c",
						"monthly_cash_flow__c" + "/@xsi:nil", "noi__c",
						"noi__c" + "/@xsi:nil", "noi_with_financing_2__c",
						"noi_with_financing_2__c" + "/@xsi:nil",
						"noi_with_financing_1__c",
						"noi_with_financing_1__c" + "/@xsi:nil",
						"price_per_ft__c", "price_per_ft__c" + "/@xsi:nil",
						"price__c", "price__c" + "/@xsi:nil",
						"yearly_interest_payment_1__c",
						"yearly_interest_payment_1__c" + "/@xsi:nil",
						"monthly_interest_payment_2__c",
						"monthly_interest_payment_2__c" + "/@xsi:nil",
						"interest_payment_1__c",
						"interest_payment_1__c" + "/@xsi:nil",
						"down_payment_2__c", "down_payment_2__c" + "/@xsi:nil",
						"down_payment_1__c", "down_payment_1__c" + "/@xsi:nil",
						"cash_net_yield__c", "cash_net_yield__c" + "/@xsi:nil",
						"monthly_management__c",
						"monthly_management__c" + "/@xsi:nil", "management__c",
						"management__c" + "/@xsi:nil", "monthly_insurance__c",
						"monthly_insurance__c" + "/@xsi:nil", "insurance__c",
						"insurance__c" + "/@xsi:nil", "taxes__c",
						"taxes__c" + "/@xsi:nil", "monthly_taxes__c",
						"monthly_taxes__c" + "/@xsi:nil", "monthlyrent__c",
						"monthlyrent__c" + "/@xsi:nil", "annual_rents__c",
						"annual_rents__c" + "/@xsi:nil",
						"est_of_market_value__c",
						"est_of_market_value__c" + "/@xsi:nil",
						"est_value_per_rent_multiplier__c",
						"est_value_per_rent_multiplier__c" + "/@xsi:nil",
						"estimated_value__c",
						"estimated_value__c" + "/@xsi:nil",
						"est_replacement_cost_per_sq_ft__c",
						"est_replacement_cost_per_sq_ft__c" + "/@xsi:nil",
						"est_replacement_cost__c",
						"est_replacement_cost__c" + "/@xsi:nil",
						"pba__totalarea_pb__c",
						"pba__totalarea_pb__c" + "/@xsi:nil", "bedrooms__c",
						"bedrooms__c" + "/@xsi:nil", "bathrooms__c",
						"bathrooms__c" + "/@xsi:nil" };

				boolean[] asXMLs_tFileInputXML_1 = new boolean[] { false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false, false, false, false,
						false, false, false, false, false };

				String str_tFileInputXML_1 = "";
				String[] node_tFileInputXML_1 = null;
				org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper(
						"/result/listings/listing/data",
						queryPaths_tFileInputXML_1, asXMLs_tFileInputXML_1);
				looper_tFileInputXML_1.setEncoding("UTF-8");
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = ((java.io.InputStream) globalMap
							.get("tFileFetch_1_INPUT_STREAM"));
				} catch (Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null
						&& filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1
								.toString().replaceFirst("//", "/");
					}
				}
				if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
					looper_tFileInputXML_1
							.parse((java.io.InputStream) filename_tFileInputXML_1);
				} else {
					looper_tFileInputXML_1.parse(String
							.valueOf(filename_tFileInputXML_1));
				}
				java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1 = looper_tFileInputXML_1
						.iterator();
				while (it_tFileInputXML_1.hasNext()) {
					java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1
							.next();
					nb_line_tFileInputXML_1++;
					row1 = null;
					boolean whetherReject_tFileInputXML_1 = false;
					row1 = new row1Struct();
					try {
						str_tFileInputXML_1 = row_tFileInputXML_1.get("name");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("name" + "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.name = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.name = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.name = null;
						} else {
							row1.name = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("../media/images/image/url");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("../media/images/image/url"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.image_url = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.image_url = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.image_url = null;
						} else {
							row1.image_url = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("../media/images/image/title");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("../media/images/image/title"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.image_title = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.image_title = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.image_title = null;
						} else {
							row1.image_title = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__propertytype__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__propertytype__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__propertytype__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__propertytype__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__propertytype__c = null;
						} else {
							row1.pba__propertytype__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("rented_status__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("rented_status__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.rented_status__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.rented_status__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.rented_status__c = null;
						} else {
							row1.rented_status__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("zipcode__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("zipcode__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.zipcode__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.zipcode__c = null;
						} else {
							row1.zipcode__c = ParserUtils
									.parseTo_Integer(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__city_pb__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__city_pb__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__city_pb__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__city_pb__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__city_pb__c = null;
						} else {
							row1.pba__city_pb__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__description_pb__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("pba__description_pb__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__description_pb__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__description_pb__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__description_pb__c = null;
						} else {
							row1.pba__description_pb__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("term_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("term_2__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.term_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.term_2__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.term_2__c = null;
						} else {
							row1.term_2__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("term_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("term_1__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.term_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.term_1__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.term_1__c = null;
						} else {
							row1.term_1__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__status__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__status__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__status__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__status__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__status__c = null;
						} else {
							row1.pba__status__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("year_built__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("year_built__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.year_built__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.year_built__c = null;
						} else {
							row1.year_built__c = ParserUtils
									.parseTo_Integer(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__address_pb__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__address_pb__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__address_pb__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.pba__address_pb__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.pba__address_pb__c = null;
						} else {
							row1.pba__address_pb__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("financed_net_yield_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("financed_net_yield_1__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.financed_net_yield_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.financed_net_yield_1__c = null;
						} else {
							row1.financed_net_yield_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_cash_flow_with_financing_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("monthly_cash_flow_with_financing_2__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_cash_flow_with_financing_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_cash_flow_with_financing_2__c = null;
						} else {
							row1.monthly_cash_flow_with_financing_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("financed_net_yield_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("financed_net_yield_2__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.financed_net_yield_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.financed_net_yield_2__c = null;
						} else {
							row1.financed_net_yield_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_cash_flow_with_financing_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("monthly_cash_flow_with_financing_1__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_cash_flow_with_financing_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_cash_flow_with_financing_1__c = null;
						} else {
							row1.monthly_cash_flow_with_financing_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("interest_rate_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("interest_rate_2__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.interest_rate_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.interest_rate_2__c = null;
						} else {
							row1.interest_rate_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("interest_rate_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("interest_rate_1__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.interest_rate_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.interest_rate_1__c = null;
						} else {
							row1.interest_rate_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_cash_flow__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthly_cash_flow__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_cash_flow__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_cash_flow__c = null;
						} else {
							row1.monthly_cash_flow__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1.get("noi__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("noi__c" + "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.noi__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.noi__c = null;
						} else {
							row1.noi__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("noi_with_financing_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("noi_with_financing_2__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.noi_with_financing_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.noi_with_financing_2__c = null;
						} else {
							row1.noi_with_financing_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("noi_with_financing_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("noi_with_financing_1__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.noi_with_financing_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.noi_with_financing_1__c = null;
						} else {
							row1.noi_with_financing_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("price_per_ft__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("price_per_ft__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.price_per_ft__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.price_per_ft__c = null;
						} else {
							row1.price_per_ft__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("price__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("price__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.price__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.price__c = null;
						} else {
							row1.price__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("yearly_interest_payment_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("yearly_interest_payment_1__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.yearly_interest_payment_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.yearly_interest_payment_1__c = null;
						} else {
							row1.yearly_interest_payment_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_interest_payment_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("monthly_interest_payment_2__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_interest_payment_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_interest_payment_2__c = null;
						} else {
							row1.monthly_interest_payment_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("interest_payment_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("interest_payment_1__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.interest_payment_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.interest_payment_1__c = null;
						} else {
							row1.interest_payment_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("down_payment_2__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("down_payment_2__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.down_payment_2__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.down_payment_2__c = null;
						} else {
							row1.down_payment_2__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("down_payment_1__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("down_payment_1__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.down_payment_1__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.down_payment_1__c = null;
						} else {
							row1.down_payment_1__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("cash_net_yield__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("cash_net_yield__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.cash_net_yield__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.cash_net_yield__c = null;
						} else {
							row1.cash_net_yield__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_management__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthly_management__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_management__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_management__c = null;
						} else {
							row1.monthly_management__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("management__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("management__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.management__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.management__c = null;
						} else {
							row1.management__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_insurance__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthly_insurance__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_insurance__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_insurance__c = null;
						} else {
							row1.monthly_insurance__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("insurance__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("insurance__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.insurance__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.insurance__c = null;
						} else {
							row1.insurance__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("taxes__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("taxes__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.taxes__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.taxes__c = null;
						} else {
							row1.taxes__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthly_taxes__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthly_taxes__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthly_taxes__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthly_taxes__c = null;
						} else {
							row1.monthly_taxes__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("monthlyrent__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("monthlyrent__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.monthlyrent__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.monthlyrent__c = null;
						} else {
							row1.monthlyrent__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("annual_rents__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("annual_rents__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.annual_rents__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.annual_rents__c = null;
						} else {
							row1.annual_rents__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("est_of_market_value__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("est_of_market_value__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.est_of_market_value__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.est_of_market_value__c = null;
						} else {
							row1.est_of_market_value__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("est_value_per_rent_multiplier__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("est_value_per_rent_multiplier__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.est_value_per_rent_multiplier__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.est_value_per_rent_multiplier__c = null;
						} else {
							row1.est_value_per_rent_multiplier__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("estimated_value__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("estimated_value__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.estimated_value__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)) {
							row1.estimated_value__c = "";
						} else if (xml_api_tFileInputXML_1
								.isMissing(node_tFileInputXML_1)) {
							row1.estimated_value__c = null;
						} else {
							row1.estimated_value__c = str_tFileInputXML_1;
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("est_replacement_cost_per_sq_ft__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("est_replacement_cost_per_sq_ft__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.est_replacement_cost_per_sq_ft__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.est_replacement_cost_per_sq_ft__c = null;
						} else {
							row1.est_replacement_cost_per_sq_ft__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("est_replacement_cost__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1
										.get("est_replacement_cost__c"
												+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.est_replacement_cost__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.est_replacement_cost__c = null;
						} else {
							row1.est_replacement_cost__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("pba__totalarea_pb__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("pba__totalarea_pb__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.pba__totalarea_pb__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.pba__totalarea_pb__c = null;
						} else {
							row1.pba__totalarea_pb__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("bedrooms__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("bedrooms__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.bedrooms__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.bedrooms__c = null;
						} else {
							row1.bedrooms__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}
						str_tFileInputXML_1 = row_tFileInputXML_1
								.get("bathrooms__c");
						node_tFileInputXML_1 = new String[] {
								str_tFileInputXML_1,
								row_tFileInputXML_1.get("bathrooms__c"
										+ "/@xsi:nil") };
						if (xml_api_tFileInputXML_1
								.isDefNull(node_tFileInputXML_1)) {
							row1.bathrooms__c = null;
						} else if (xml_api_tFileInputXML_1
								.isEmpty(node_tFileInputXML_1)
								|| xml_api_tFileInputXML_1
										.isMissing(node_tFileInputXML_1)) {
							row1.bathrooms__c = null;
						} else {
							row1.bathrooms__c = ParserUtils
									.parseTo_Float(str_tFileInputXML_1);
						}

					} catch (Exception e) {
						whetherReject_tFileInputXML_1 = true;
						System.err.println(e.getMessage());
						row1 = null;
					}

					/**
					 * [tFileInputXML_1 begin ] stop
					 */
					/**
					 * [tFileInputXML_1 main ] start
					 */

					currentComponent = "tFileInputXML_1";

					tos_count_tFileInputXML_1++;

					/**
					 * [tFileInputXML_1 main ] stop
					 */
					// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row11"
						// /////////////////////////////////////////////

						boolean forceLooprow11 = false;

						row11Struct row11ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row11HashKey.PROP_NAME = row1.name;

							row11HashKey.hashCodeDirty = true;

							tHash_Lookup_Cache_row11.lookup(row11HashKey);
							if (tHash_Lookup_Cache_row11.hasNext()) { // G_TM_M_835

								tHash_Lookup_row11 = tHash_Lookup_Cache_row11;

							} // G_TM_M_834
							else { // G_TM_M_835

								tMysqlInput_1Process(globalMap);

								tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
										.get("tHash_Lookup_row11"));

								tHash_Lookup_row11.initGet();

								tHash_Lookup_row11.lookup(row11HashKey);

							} // G_TM_M_835

							if (!tHash_Lookup_row11.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.PROP_NAME = '"
							// + row11HashKey.PROP_NAME + "'");
						} // G 071

						row11Struct row11 = null;

						row11Struct fromLookup_row11 = null;
						row11 = row11Default;

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.hasNext()) { // G 099

							fromLookup_row11 = tHash_Lookup_row11.next();

						} // G 099

						if (fromLookup_row11 != null) {
							row11 = fromLookup_row11;
						}

						if (tHash_Lookup_Cache_row11 != tHash_Lookup_row11) {
							tHash_Lookup_Cache_row11.put(row11);
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;
							Var.UUID = row11.UUID;// ###############################
							// ###############################
							// # Output tables

							financed_net_yield_1__c = null;
							monthly_cash_flow_with_financing_2__c = null;
							financed_net_yield_2__c = null;
							monthly_cash_flow_with_financing_1__c = null;
							interest_rate_1__c = null;
							interest_rate_2__c = null;
							price_per_ft_c = null;
							noi_with_financing_1__c = null;
							noi_with_financing_2__c = null;
							noi__c = null;
							monthly_cash_flow__c = null;
							est_replacement_cost__c = null;
							est_replacement_cost_per_sq_ft__c = null;
							cash_net_yield__c = null;
							down_payment_1__c = null;
							down_payment_2__c = null;
							interest_payment_1__c = null;
							yearly_interest_payment_1__c = null;
							monthly_interest_payment_2__c = null;

							if (!rejectedInnerJoin_tMap_1) {

								// # Output table : 'financed_net_yield_1__c'
								financed_net_yield_1__c_tmp.key = "financed_net_yield_1__c";
								financed_net_yield_1__c_tmp.value = row1.financed_net_yield_1__c;
								financed_net_yield_1__c_tmp.UUID = Var.UUID;
								financed_net_yield_1__c = financed_net_yield_1__c_tmp;

								// # Output table :
								// 'monthly_cash_flow_with_financing_2__c'
								monthly_cash_flow_with_financing_2__c_tmp.key = "monthly_cash_flow_with_financing_2__c";
								monthly_cash_flow_with_financing_2__c_tmp.value = row1.monthly_cash_flow_with_financing_2__c;
								monthly_cash_flow_with_financing_2__c_tmp.UUID = Var.UUID;
								monthly_cash_flow_with_financing_2__c = monthly_cash_flow_with_financing_2__c_tmp;

								// # Output table : 'financed_net_yield_2__c'
								financed_net_yield_2__c_tmp.key = "financed_net_yield_2__c";
								financed_net_yield_2__c_tmp.value = row1.financed_net_yield_2__c;
								financed_net_yield_2__c_tmp.UUID = Var.UUID;
								financed_net_yield_2__c = financed_net_yield_2__c_tmp;

								// # Output table :
								// 'monthly_cash_flow_with_financing_1__c'
								monthly_cash_flow_with_financing_1__c_tmp.key = "monthly_cash_flow_with_financing_1__c";
								monthly_cash_flow_with_financing_1__c_tmp.value = row1.monthly_cash_flow_with_financing_1__c;
								monthly_cash_flow_with_financing_1__c_tmp.UUID = Var.UUID;
								monthly_cash_flow_with_financing_1__c = monthly_cash_flow_with_financing_1__c_tmp;

								// # Output table : 'interest_rate_1__c'
								interest_rate_1__c_tmp.key = "interest_rate_1__c";
								interest_rate_1__c_tmp.value = row1.interest_rate_1__c;
								interest_rate_1__c_tmp.UUID = Var.UUID;
								interest_rate_1__c = interest_rate_1__c_tmp;

								// # Output table : 'interest_rate_2__c'
								interest_rate_2__c_tmp.key = "interest_rate_2__c";
								interest_rate_2__c_tmp.value = row1.interest_rate_2__c;
								interest_rate_2__c_tmp.UUID = Var.UUID;
								interest_rate_2__c = interest_rate_2__c_tmp;

								// # Output table : 'price_per_ft_c'
								price_per_ft_c_tmp.key = "price_per_ft_c";
								price_per_ft_c_tmp.value = row1.price_per_ft__c;
								price_per_ft_c_tmp.UUID = Var.UUID;
								price_per_ft_c = price_per_ft_c_tmp;

								// # Output table : 'noi_with_financing_1__c'
								noi_with_financing_1__c_tmp.key = "noi_with_financing_1__c";
								noi_with_financing_1__c_tmp.value = row1.noi_with_financing_1__c;
								noi_with_financing_1__c_tmp.UUID = Var.UUID;
								noi_with_financing_1__c = noi_with_financing_1__c_tmp;

								// # Output table : 'noi_with_financing_2__c'
								noi_with_financing_2__c_tmp.key = "noi_with_financing_2__c";
								noi_with_financing_2__c_tmp.value = row1.noi_with_financing_2__c;
								noi_with_financing_2__c_tmp.UUID = Var.UUID;
								noi_with_financing_2__c = noi_with_financing_2__c_tmp;

								// # Output table : 'noi__c'
								noi__c_tmp.key = "noi__c";
								noi__c_tmp.value = row1.noi__c;
								noi__c_tmp.UUID = Var.UUID;
								noi__c = noi__c_tmp;

								// # Output table : 'monthly_cash_flow__c'
								monthly_cash_flow__c_tmp.key = "monthly_cash_flow__c";
								monthly_cash_flow__c_tmp.value = row1.monthly_cash_flow__c;
								monthly_cash_flow__c_tmp.UUID = Var.UUID;
								monthly_cash_flow__c = monthly_cash_flow__c_tmp;

								// # Output table : 'est_replacement_cost__c'
								est_replacement_cost__c_tmp.key = "est_replacement_cost__c";
								est_replacement_cost__c_tmp.value = row1.est_replacement_cost__c;
								est_replacement_cost__c_tmp.UUID = Var.UUID;
								est_replacement_cost__c = est_replacement_cost__c_tmp;

								// # Output table :
								// 'est_replacement_cost_per_sq_ft__c'
								est_replacement_cost_per_sq_ft__c_tmp.key = "est_replacement_cost_per_sq_ft__c";
								est_replacement_cost_per_sq_ft__c_tmp.value = row1.est_replacement_cost_per_sq_ft__c;
								est_replacement_cost_per_sq_ft__c_tmp.UUID = Var.UUID;
								est_replacement_cost_per_sq_ft__c = est_replacement_cost_per_sq_ft__c_tmp;

								// # Output table : 'cash_net_yield__c'
								cash_net_yield__c_tmp.key = "cash_net_yield__c";
								cash_net_yield__c_tmp.value = row1.cash_net_yield__c;
								cash_net_yield__c_tmp.UUID = Var.UUID;
								cash_net_yield__c = cash_net_yield__c_tmp;

								// # Output table : 'down_payment_1__c'
								down_payment_1__c_tmp.key = "down_payment_1__c";
								down_payment_1__c_tmp.value = row1.down_payment_1__c;
								down_payment_1__c_tmp.UUID = Var.UUID;
								down_payment_1__c = down_payment_1__c_tmp;

								// # Output table : 'down_payment_2__c'
								down_payment_2__c_tmp.key = "down_payment_2__c";
								down_payment_2__c_tmp.value = row1.down_payment_2__c;
								down_payment_2__c_tmp.UUID = Var.UUID;
								down_payment_2__c = down_payment_2__c_tmp;

								// # Output table : 'interest_payment_1__c'
								interest_payment_1__c_tmp.key = "interest_payment_1__c";
								interest_payment_1__c_tmp.value = row1.interest_payment_1__c;
								interest_payment_1__c_tmp.UUID = Var.UUID;
								interest_payment_1__c = interest_payment_1__c_tmp;

								// # Output table :
								// 'yearly_interest_payment_1__c'
								yearly_interest_payment_1__c_tmp.key = "yearly_interest_payment_1__c";
								yearly_interest_payment_1__c_tmp.value = row1.yearly_interest_payment_1__c;
								yearly_interest_payment_1__c_tmp.UUID = Var.UUID;
								yearly_interest_payment_1__c = yearly_interest_payment_1__c_tmp;

								// # Output table :
								// 'monthly_interest_payment_2__c'
								monthly_interest_payment_2__c_tmp.key = "monthly_interest_payment_2__c";
								monthly_interest_payment_2__c_tmp.value = row1.monthly_interest_payment_2__c;
								monthly_interest_payment_2__c_tmp.UUID = Var.UUID;
								monthly_interest_payment_2__c = monthly_interest_payment_2__c_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "financed_net_yield_1__c"
						if (financed_net_yield_1__c != null) {

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							// Code generated according to input schema and
							// output schema
							context.key = financed_net_yield_1__c.key;
							context.value = financed_net_yield_1__c.value;
							context.propUUID = financed_net_yield_1__c.UUID;

							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tFlowToIterate_1 main ] start
							 */

							currentComponent = "tFlowToIterate_1";

							globalMap.put("row2.key", row2.key);
							nb_line_tFlowToIterate_1++;
							globalMap.put("row2.value", row2.value);
							nb_line_tFlowToIterate_1++;
							globalMap.put("row2.UUID", row2.UUID);
							nb_line_tFlowToIterate_1++;

							counter_tFlowToIterate_1++;
							globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
									counter_tFlowToIterate_1);

							tos_count_tFlowToIterate_1++;

							/**
							 * [tFlowToIterate_1 main ] stop
							 */
							NB_ITERATE_tRunJob_1++;
							iterateLoop++;

							/**
							 * [tRunJob_1 begin ] start
							 */

							ok_Hash.put("tRunJob_1", false);
							start_Hash.put("tRunJob_1",
									System.currentTimeMillis());
							currentComponent = "tRunJob_1";

							int tos_count_tRunJob_1 = 0;

							/**
							 * [tRunJob_1 begin ] stop
							 */
							/**
							 * [tRunJob_1 main ] start
							 */

							currentComponent = "tRunJob_1";

							java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
							paraList_tRunJob_1.add("--father_pid=" + pid);

							paraList_tRunJob_1.add("--root_pid=" + rootPid);

							paraList_tRunJob_1.add("--father_node=tRunJob_1");

							paraList_tRunJob_1.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_1.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_1
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_1 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_1 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
									&& childResumePath_tRunJob_1 != null) {
								paraList_tRunJob_1
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_1
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_1");

							java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_1 = context
									.propertyNames();
							while (propertyNames_tRunJob_1.hasMoreElements()) {
								String key_tRunJob_1 = (String) propertyNames_tRunJob_1
										.nextElement();
								Object value_tRunJob_1 = (Object) context
										.get(key_tRunJob_1);
								paraList_tRunJob_1
										.add("--context_param " + key_tRunJob_1
												+ "=" + value_tRunJob_1);
							}

							parentContextMap_tRunJob_1.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_1.put("key", context.key);
							parentContextMap_tRunJob_1.put("value",
									context.value);
							parentContextMap_tRunJob_1.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_1.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_1.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_1.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_1.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_1.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_1.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_1 = null;

							obj_tRunJob_1 = context.key;
							paraList_tRunJob_1
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_1));
							parentContextMap_tRunJob_1
									.put("key", obj_tRunJob_1);
							obj_tRunJob_1 = context.value;
							paraList_tRunJob_1
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_1));
							parentContextMap_tRunJob_1.put("value",
									obj_tRunJob_1);
							obj_tRunJob_1 = context.propUUID;
							paraList_tRunJob_1
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_1));
							parentContextMap_tRunJob_1.put("propUUID",
									obj_tRunJob_1);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_1 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_1) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
										.entrySet()) {
									dataSources_tRunJob_1.put(
											talendDataSourceEntry_tRunJob_1
													.getKey(),
											talendDataSourceEntry_tRunJob_1
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_1
										.setDataSources(dataSources_tRunJob_1);
							}
							childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
							String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
									.runJob((String[]) paraList_tRunJob_1
											.toArray(new String[paraList_tRunJob_1
													.size()]));
							errorCode = childJob_tRunJob_1.getErrorCode();

							if (childJob_tRunJob_1.getErrorCode() == null) {
								globalMap
										.put("tRunJob_1_CHILD_RETURN_CODE",
												childJob_tRunJob_1.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_1
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
										childJob_tRunJob_1.getErrorCode());
							}
							globalMap
									.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_1
													.getExceptionStackTrace());

							if (childJob_tRunJob_1.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_1
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_1++;

							/**
							 * [tRunJob_1 main ] stop
							 */
							/**
							 * [tRunJob_1 end ] start
							 */

							currentComponent = "tRunJob_1";

							ok_Hash.put("tRunJob_1", true);
							end_Hash.put("tRunJob_1",
									System.currentTimeMillis());

							/**
							 * [tRunJob_1 end ] stop
							 */

						} // End of branch "financed_net_yield_1__c"

						// Start of branch
						// "monthly_cash_flow_with_financing_2__c"
						if (monthly_cash_flow_with_financing_2__c != null) {

							/**
							 * [tJavaRow_3 main ] start
							 */

							currentComponent = "tJavaRow_3";

							// Code generated according to input schema and
							// output schema
							context.key = monthly_cash_flow_with_financing_2__c.key;
							context.value = monthly_cash_flow_with_financing_2__c.value;
							context.propUUID = monthly_cash_flow_with_financing_2__c.UUID;

							nb_line_tJavaRow_3++;

							tos_count_tJavaRow_3++;

							/**
							 * [tJavaRow_3 main ] stop
							 */

							/**
							 * [tFlowToIterate_2 main ] start
							 */

							currentComponent = "tFlowToIterate_2";

							globalMap.put("row6.key", row6.key);
							nb_line_tFlowToIterate_2++;
							globalMap.put("row6.value", row6.value);
							nb_line_tFlowToIterate_2++;
							globalMap.put("row6.UUID", row6.UUID);
							nb_line_tFlowToIterate_2++;

							counter_tFlowToIterate_2++;
							globalMap.put("tFlowToIterate_2_CURRENT_ITERATION",
									counter_tFlowToIterate_2);

							tos_count_tFlowToIterate_2++;

							/**
							 * [tFlowToIterate_2 main ] stop
							 */
							NB_ITERATE_tRunJob_2++;
							iterateLoop++;

							/**
							 * [tRunJob_2 begin ] start
							 */

							ok_Hash.put("tRunJob_2", false);
							start_Hash.put("tRunJob_2",
									System.currentTimeMillis());
							currentComponent = "tRunJob_2";

							int tos_count_tRunJob_2 = 0;

							/**
							 * [tRunJob_2 begin ] stop
							 */
							/**
							 * [tRunJob_2 main ] start
							 */

							currentComponent = "tRunJob_2";

							java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
							paraList_tRunJob_2.add("--father_pid=" + pid);

							paraList_tRunJob_2.add("--root_pid=" + rootPid);

							paraList_tRunJob_2.add("--father_node=tRunJob_2");

							paraList_tRunJob_2.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_2.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_2
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_2 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_2 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
									&& childResumePath_tRunJob_2 != null) {
								paraList_tRunJob_2
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_2
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_2");

							java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_2 = context
									.propertyNames();
							while (propertyNames_tRunJob_2.hasMoreElements()) {
								String key_tRunJob_2 = (String) propertyNames_tRunJob_2
										.nextElement();
								Object value_tRunJob_2 = (Object) context
										.get(key_tRunJob_2);
								paraList_tRunJob_2
										.add("--context_param " + key_tRunJob_2
												+ "=" + value_tRunJob_2);
							}

							parentContextMap_tRunJob_2.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_2.put("key", context.key);
							parentContextMap_tRunJob_2.put("value",
									context.value);
							parentContextMap_tRunJob_2.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_2.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_2.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_2.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_2.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_2.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_2.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_2 = null;

							obj_tRunJob_2 = context.key;
							paraList_tRunJob_2
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_2));
							parentContextMap_tRunJob_2
									.put("key", obj_tRunJob_2);
							obj_tRunJob_2 = context.value;
							paraList_tRunJob_2
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_2));
							parentContextMap_tRunJob_2.put("value",
									obj_tRunJob_2);
							obj_tRunJob_2 = context.propUUID;
							paraList_tRunJob_2
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_2));
							parentContextMap_tRunJob_2.put("propUUID",
									obj_tRunJob_2);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_2 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_2) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
										.entrySet()) {
									dataSources_tRunJob_2.put(
											talendDataSourceEntry_tRunJob_2
													.getKey(),
											talendDataSourceEntry_tRunJob_2
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_2
										.setDataSources(dataSources_tRunJob_2);
							}
							childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
							String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
									.runJob((String[]) paraList_tRunJob_2
											.toArray(new String[paraList_tRunJob_2
													.size()]));
							errorCode = childJob_tRunJob_2.getErrorCode();

							if (childJob_tRunJob_2.getErrorCode() == null) {
								globalMap
										.put("tRunJob_2_CHILD_RETURN_CODE",
												childJob_tRunJob_2.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_2
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
										childJob_tRunJob_2.getErrorCode());
							}
							globalMap
									.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_2
													.getExceptionStackTrace());

							if (childJob_tRunJob_2.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_2
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_2++;

							/**
							 * [tRunJob_2 main ] stop
							 */
							/**
							 * [tRunJob_2 end ] start
							 */

							currentComponent = "tRunJob_2";

							ok_Hash.put("tRunJob_2", true);
							end_Hash.put("tRunJob_2",
									System.currentTimeMillis());

							/**
							 * [tRunJob_2 end ] stop
							 */

						} // End of branch
							// "monthly_cash_flow_with_financing_2__c"

						// Start of branch "financed_net_yield_2__c"
						if (financed_net_yield_2__c != null) {

							/**
							 * [tJavaRow_4 main ] start
							 */

							currentComponent = "tJavaRow_4";

							// Code generated according to input schema and
							// output schema
							context.key = financed_net_yield_2__c.key;
							context.value = financed_net_yield_2__c.value;
							context.propUUID = financed_net_yield_2__c.UUID;

							nb_line_tJavaRow_4++;

							tos_count_tJavaRow_4++;

							/**
							 * [tJavaRow_4 main ] stop
							 */

							/**
							 * [tFlowToIterate_3 main ] start
							 */

							currentComponent = "tFlowToIterate_3";

							globalMap.put("row7.key", row7.key);
							nb_line_tFlowToIterate_3++;
							globalMap.put("row7.value", row7.value);
							nb_line_tFlowToIterate_3++;
							globalMap.put("row7.UUID", row7.UUID);
							nb_line_tFlowToIterate_3++;

							counter_tFlowToIterate_3++;
							globalMap.put("tFlowToIterate_3_CURRENT_ITERATION",
									counter_tFlowToIterate_3);

							tos_count_tFlowToIterate_3++;

							/**
							 * [tFlowToIterate_3 main ] stop
							 */
							NB_ITERATE_tRunJob_3++;
							iterateLoop++;

							/**
							 * [tRunJob_3 begin ] start
							 */

							ok_Hash.put("tRunJob_3", false);
							start_Hash.put("tRunJob_3",
									System.currentTimeMillis());
							currentComponent = "tRunJob_3";

							int tos_count_tRunJob_3 = 0;

							/**
							 * [tRunJob_3 begin ] stop
							 */
							/**
							 * [tRunJob_3 main ] start
							 */

							currentComponent = "tRunJob_3";

							java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
							paraList_tRunJob_3.add("--father_pid=" + pid);

							paraList_tRunJob_3.add("--root_pid=" + rootPid);

							paraList_tRunJob_3.add("--father_node=tRunJob_3");

							paraList_tRunJob_3.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_3.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_3
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_3 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_3 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
									&& childResumePath_tRunJob_3 != null) {
								paraList_tRunJob_3
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_3
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_3");

							java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_3 = context
									.propertyNames();
							while (propertyNames_tRunJob_3.hasMoreElements()) {
								String key_tRunJob_3 = (String) propertyNames_tRunJob_3
										.nextElement();
								Object value_tRunJob_3 = (Object) context
										.get(key_tRunJob_3);
								paraList_tRunJob_3
										.add("--context_param " + key_tRunJob_3
												+ "=" + value_tRunJob_3);
							}

							parentContextMap_tRunJob_3.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_3.put("key", context.key);
							parentContextMap_tRunJob_3.put("value",
									context.value);
							parentContextMap_tRunJob_3.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_3.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_3.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_3.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_3.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_3.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_3.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_3 = null;

							obj_tRunJob_3 = context.key;
							paraList_tRunJob_3
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_3));
							parentContextMap_tRunJob_3
									.put("key", obj_tRunJob_3);
							obj_tRunJob_3 = context.value;
							paraList_tRunJob_3
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_3));
							parentContextMap_tRunJob_3.put("value",
									obj_tRunJob_3);
							obj_tRunJob_3 = context.propUUID;
							paraList_tRunJob_3
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_3));
							parentContextMap_tRunJob_3.put("propUUID",
									obj_tRunJob_3);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_3 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_3) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
										.entrySet()) {
									dataSources_tRunJob_3.put(
											talendDataSourceEntry_tRunJob_3
													.getKey(),
											talendDataSourceEntry_tRunJob_3
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_3
										.setDataSources(dataSources_tRunJob_3);
							}
							childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
							String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
									.runJob((String[]) paraList_tRunJob_3
											.toArray(new String[paraList_tRunJob_3
													.size()]));
							errorCode = childJob_tRunJob_3.getErrorCode();

							if (childJob_tRunJob_3.getErrorCode() == null) {
								globalMap
										.put("tRunJob_3_CHILD_RETURN_CODE",
												childJob_tRunJob_3.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_3
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
										childJob_tRunJob_3.getErrorCode());
							}
							globalMap
									.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_3
													.getExceptionStackTrace());

							if (childJob_tRunJob_3.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_3
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_3++;

							/**
							 * [tRunJob_3 main ] stop
							 */
							/**
							 * [tRunJob_3 end ] start
							 */

							currentComponent = "tRunJob_3";

							ok_Hash.put("tRunJob_3", true);
							end_Hash.put("tRunJob_3",
									System.currentTimeMillis());

							/**
							 * [tRunJob_3 end ] stop
							 */

						} // End of branch "financed_net_yield_2__c"

						// Start of branch
						// "monthly_cash_flow_with_financing_1__c"
						if (monthly_cash_flow_with_financing_1__c != null) {

							/**
							 * [tJavaRow_5 main ] start
							 */

							currentComponent = "tJavaRow_5";

							// Code generated according to input schema and
							// output schema
							context.key = monthly_cash_flow_with_financing_1__c.key;
							context.value = monthly_cash_flow_with_financing_1__c.value;
							context.propUUID = monthly_cash_flow_with_financing_1__c.UUID;

							nb_line_tJavaRow_5++;

							tos_count_tJavaRow_5++;

							/**
							 * [tJavaRow_5 main ] stop
							 */

							/**
							 * [tFlowToIterate_4 main ] start
							 */

							currentComponent = "tFlowToIterate_4";

							globalMap.put("row8.key", row8.key);
							nb_line_tFlowToIterate_4++;
							globalMap.put("row8.value", row8.value);
							nb_line_tFlowToIterate_4++;
							globalMap.put("row8.UUID", row8.UUID);
							nb_line_tFlowToIterate_4++;

							counter_tFlowToIterate_4++;
							globalMap.put("tFlowToIterate_4_CURRENT_ITERATION",
									counter_tFlowToIterate_4);

							tos_count_tFlowToIterate_4++;

							/**
							 * [tFlowToIterate_4 main ] stop
							 */
							NB_ITERATE_tRunJob_4++;
							iterateLoop++;

							/**
							 * [tRunJob_4 begin ] start
							 */

							ok_Hash.put("tRunJob_4", false);
							start_Hash.put("tRunJob_4",
									System.currentTimeMillis());
							currentComponent = "tRunJob_4";

							int tos_count_tRunJob_4 = 0;

							/**
							 * [tRunJob_4 begin ] stop
							 */
							/**
							 * [tRunJob_4 main ] start
							 */

							currentComponent = "tRunJob_4";

							java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
							paraList_tRunJob_4.add("--father_pid=" + pid);

							paraList_tRunJob_4.add("--root_pid=" + rootPid);

							paraList_tRunJob_4.add("--father_node=tRunJob_4");

							paraList_tRunJob_4.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_4.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_4
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_4 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_4 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_4".equals(tRunJobName_tRunJob_4)
									&& childResumePath_tRunJob_4 != null) {
								paraList_tRunJob_4
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_4
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_4");

							java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_4 = context
									.propertyNames();
							while (propertyNames_tRunJob_4.hasMoreElements()) {
								String key_tRunJob_4 = (String) propertyNames_tRunJob_4
										.nextElement();
								Object value_tRunJob_4 = (Object) context
										.get(key_tRunJob_4);
								paraList_tRunJob_4
										.add("--context_param " + key_tRunJob_4
												+ "=" + value_tRunJob_4);
							}

							parentContextMap_tRunJob_4.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_4.put("key", context.key);
							parentContextMap_tRunJob_4.put("value",
									context.value);
							parentContextMap_tRunJob_4.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_4.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_4.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_4.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_4.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_4.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_4.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_4 = null;

							obj_tRunJob_4 = context.key;
							paraList_tRunJob_4
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_4));
							parentContextMap_tRunJob_4
									.put("key", obj_tRunJob_4);
							obj_tRunJob_4 = context.value;
							paraList_tRunJob_4
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_4));
							parentContextMap_tRunJob_4.put("value",
									obj_tRunJob_4);
							obj_tRunJob_4 = context.propUUID;
							paraList_tRunJob_4
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_4));
							parentContextMap_tRunJob_4.put("propUUID",
									obj_tRunJob_4);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_4 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_4) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
										.entrySet()) {
									dataSources_tRunJob_4.put(
											talendDataSourceEntry_tRunJob_4
													.getKey(),
											talendDataSourceEntry_tRunJob_4
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_4
										.setDataSources(dataSources_tRunJob_4);
							}
							childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
							String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
									.runJob((String[]) paraList_tRunJob_4
											.toArray(new String[paraList_tRunJob_4
													.size()]));
							errorCode = childJob_tRunJob_4.getErrorCode();

							if (childJob_tRunJob_4.getErrorCode() == null) {
								globalMap
										.put("tRunJob_4_CHILD_RETURN_CODE",
												childJob_tRunJob_4.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_4
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
										childJob_tRunJob_4.getErrorCode());
							}
							globalMap
									.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_4
													.getExceptionStackTrace());

							if (childJob_tRunJob_4.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_4
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_4++;

							/**
							 * [tRunJob_4 main ] stop
							 */
							/**
							 * [tRunJob_4 end ] start
							 */

							currentComponent = "tRunJob_4";

							ok_Hash.put("tRunJob_4", true);
							end_Hash.put("tRunJob_4",
									System.currentTimeMillis());

							/**
							 * [tRunJob_4 end ] stop
							 */

						} // End of branch
							// "monthly_cash_flow_with_financing_1__c"

						// Start of branch "interest_rate_1__c"
						if (interest_rate_1__c != null) {

							/**
							 * [tJavaRow_10 main ] start
							 */

							currentComponent = "tJavaRow_10";

							// Code generated according to input schema and
							// output schema
							context.key = interest_rate_1__c.key;
							context.value = interest_rate_1__c.value;
							context.propUUID = interest_rate_1__c.UUID;

							nb_line_tJavaRow_10++;

							tos_count_tJavaRow_10++;

							/**
							 * [tJavaRow_10 main ] stop
							 */

							/**
							 * [tFlowToIterate_9 main ] start
							 */

							currentComponent = "tFlowToIterate_9";

							globalMap.put("row10.key", row10.key);
							nb_line_tFlowToIterate_9++;
							globalMap.put("row10.value", row10.value);
							nb_line_tFlowToIterate_9++;
							globalMap.put("row10.UUID", row10.UUID);
							nb_line_tFlowToIterate_9++;

							counter_tFlowToIterate_9++;
							globalMap.put("tFlowToIterate_9_CURRENT_ITERATION",
									counter_tFlowToIterate_9);

							tos_count_tFlowToIterate_9++;

							/**
							 * [tFlowToIterate_9 main ] stop
							 */
							NB_ITERATE_tRunJob_9++;
							iterateLoop++;

							/**
							 * [tRunJob_9 begin ] start
							 */

							ok_Hash.put("tRunJob_9", false);
							start_Hash.put("tRunJob_9",
									System.currentTimeMillis());
							currentComponent = "tRunJob_9";

							int tos_count_tRunJob_9 = 0;

							/**
							 * [tRunJob_9 begin ] stop
							 */
							/**
							 * [tRunJob_9 main ] start
							 */

							currentComponent = "tRunJob_9";

							java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();
							paraList_tRunJob_9.add("--father_pid=" + pid);

							paraList_tRunJob_9.add("--root_pid=" + rootPid);

							paraList_tRunJob_9.add("--father_node=tRunJob_9");

							paraList_tRunJob_9.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_9.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_9
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_9 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_9 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_9".equals(tRunJobName_tRunJob_9)
									&& childResumePath_tRunJob_9 != null) {
								paraList_tRunJob_9
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_9
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_9");

							java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_9 = context
									.propertyNames();
							while (propertyNames_tRunJob_9.hasMoreElements()) {
								String key_tRunJob_9 = (String) propertyNames_tRunJob_9
										.nextElement();
								Object value_tRunJob_9 = (Object) context
										.get(key_tRunJob_9);
								paraList_tRunJob_9
										.add("--context_param " + key_tRunJob_9
												+ "=" + value_tRunJob_9);
							}

							parentContextMap_tRunJob_9.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_9.put("key", context.key);
							parentContextMap_tRunJob_9.put("value",
									context.value);
							parentContextMap_tRunJob_9.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_9.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_9.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_9.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_9.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_9.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_9.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_9 = null;

							obj_tRunJob_9 = context.key;
							paraList_tRunJob_9
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_9));
							parentContextMap_tRunJob_9
									.put("key", obj_tRunJob_9);
							obj_tRunJob_9 = context.value;
							paraList_tRunJob_9
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_9));
							parentContextMap_tRunJob_9.put("value",
									obj_tRunJob_9);
							obj_tRunJob_9 = context.propUUID;
							paraList_tRunJob_9
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_9));
							parentContextMap_tRunJob_9.put("propUUID",
									obj_tRunJob_9);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_9 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_9) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
										.entrySet()) {
									dataSources_tRunJob_9.put(
											talendDataSourceEntry_tRunJob_9
													.getKey(),
											talendDataSourceEntry_tRunJob_9
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_9
										.setDataSources(dataSources_tRunJob_9);
							}
							childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;
							String[][] childReturn_tRunJob_9 = childJob_tRunJob_9
									.runJob((String[]) paraList_tRunJob_9
											.toArray(new String[paraList_tRunJob_9
													.size()]));
							errorCode = childJob_tRunJob_9.getErrorCode();

							if (childJob_tRunJob_9.getErrorCode() == null) {
								globalMap
										.put("tRunJob_9_CHILD_RETURN_CODE",
												childJob_tRunJob_9.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_9
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_9_CHILD_RETURN_CODE",
										childJob_tRunJob_9.getErrorCode());
							}
							globalMap
									.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_9
													.getExceptionStackTrace());

							if (childJob_tRunJob_9.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_9
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_9++;

							/**
							 * [tRunJob_9 main ] stop
							 */
							/**
							 * [tRunJob_9 end ] start
							 */

							currentComponent = "tRunJob_9";

							ok_Hash.put("tRunJob_9", true);
							end_Hash.put("tRunJob_9",
									System.currentTimeMillis());

							/**
							 * [tRunJob_9 end ] stop
							 */

						} // End of branch "interest_rate_1__c"

						// Start of branch "interest_rate_2__c"
						if (interest_rate_2__c != null) {

							/**
							 * [tJavaRow_6 main ] start
							 */

							currentComponent = "tJavaRow_6";

							// Code generated according to input schema and
							// output schema
							context.key = interest_rate_2__c.key;
							context.value = interest_rate_2__c.value;
							context.propUUID = interest_rate_2__c.UUID;

							nb_line_tJavaRow_6++;

							tos_count_tJavaRow_6++;

							/**
							 * [tJavaRow_6 main ] stop
							 */

							/**
							 * [tFlowToIterate_5 main ] start
							 */

							currentComponent = "tFlowToIterate_5";

							globalMap.put("row9.key", row9.key);
							nb_line_tFlowToIterate_5++;
							globalMap.put("row9.value", row9.value);
							nb_line_tFlowToIterate_5++;
							globalMap.put("row9.UUID", row9.UUID);
							nb_line_tFlowToIterate_5++;

							counter_tFlowToIterate_5++;
							globalMap.put("tFlowToIterate_5_CURRENT_ITERATION",
									counter_tFlowToIterate_5);

							tos_count_tFlowToIterate_5++;

							/**
							 * [tFlowToIterate_5 main ] stop
							 */
							NB_ITERATE_tRunJob_5++;
							iterateLoop++;

							/**
							 * [tRunJob_5 begin ] start
							 */

							ok_Hash.put("tRunJob_5", false);
							start_Hash.put("tRunJob_5",
									System.currentTimeMillis());
							currentComponent = "tRunJob_5";

							int tos_count_tRunJob_5 = 0;

							/**
							 * [tRunJob_5 begin ] stop
							 */
							/**
							 * [tRunJob_5 main ] start
							 */

							currentComponent = "tRunJob_5";

							java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
							paraList_tRunJob_5.add("--father_pid=" + pid);

							paraList_tRunJob_5.add("--root_pid=" + rootPid);

							paraList_tRunJob_5.add("--father_node=tRunJob_5");

							paraList_tRunJob_5.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_5.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_5
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_5 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_5 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_5".equals(tRunJobName_tRunJob_5)
									&& childResumePath_tRunJob_5 != null) {
								paraList_tRunJob_5
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_5
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_5");

							java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_5 = context
									.propertyNames();
							while (propertyNames_tRunJob_5.hasMoreElements()) {
								String key_tRunJob_5 = (String) propertyNames_tRunJob_5
										.nextElement();
								Object value_tRunJob_5 = (Object) context
										.get(key_tRunJob_5);
								paraList_tRunJob_5
										.add("--context_param " + key_tRunJob_5
												+ "=" + value_tRunJob_5);
							}

							parentContextMap_tRunJob_5.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_5.put("key", context.key);
							parentContextMap_tRunJob_5.put("value",
									context.value);
							parentContextMap_tRunJob_5.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_5.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_5.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_5.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_5.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_5.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_5.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_5 = null;

							obj_tRunJob_5 = context.key;
							paraList_tRunJob_5
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_5));
							parentContextMap_tRunJob_5
									.put("key", obj_tRunJob_5);
							obj_tRunJob_5 = context.value;
							paraList_tRunJob_5
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_5));
							parentContextMap_tRunJob_5.put("value",
									obj_tRunJob_5);
							obj_tRunJob_5 = context.propUUID;
							paraList_tRunJob_5
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_5));
							parentContextMap_tRunJob_5.put("propUUID",
									obj_tRunJob_5);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_5 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_5) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
										.entrySet()) {
									dataSources_tRunJob_5.put(
											talendDataSourceEntry_tRunJob_5
													.getKey(),
											talendDataSourceEntry_tRunJob_5
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_5
										.setDataSources(dataSources_tRunJob_5);
							}
							childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
							String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
									.runJob((String[]) paraList_tRunJob_5
											.toArray(new String[paraList_tRunJob_5
													.size()]));
							errorCode = childJob_tRunJob_5.getErrorCode();

							if (childJob_tRunJob_5.getErrorCode() == null) {
								globalMap
										.put("tRunJob_5_CHILD_RETURN_CODE",
												childJob_tRunJob_5.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_5
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
										childJob_tRunJob_5.getErrorCode());
							}
							globalMap
									.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_5
													.getExceptionStackTrace());

							if (childJob_tRunJob_5.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_5
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_5++;

							/**
							 * [tRunJob_5 main ] stop
							 */
							/**
							 * [tRunJob_5 end ] start
							 */

							currentComponent = "tRunJob_5";

							ok_Hash.put("tRunJob_5", true);
							end_Hash.put("tRunJob_5",
									System.currentTimeMillis());

							/**
							 * [tRunJob_5 end ] stop
							 */

						} // End of branch "interest_rate_2__c"

						// Start of branch "price_per_ft_c"
						if (price_per_ft_c != null) {

							/**
							 * [tJavaRow_7 main ] start
							 */

							currentComponent = "tJavaRow_7";

							// Code generated according to input schema and
							// output schema
							context.key = price_per_ft_c.key;
							context.value = price_per_ft_c.value;
							context.propUUID = price_per_ft_c.UUID;

							nb_line_tJavaRow_7++;

							tos_count_tJavaRow_7++;

							/**
							 * [tJavaRow_7 main ] stop
							 */

							/**
							 * [tFlowToIterate_6 main ] start
							 */

							currentComponent = "tFlowToIterate_6";

							globalMap.put("row3.key", row3.key);
							nb_line_tFlowToIterate_6++;
							globalMap.put("row3.value", row3.value);
							nb_line_tFlowToIterate_6++;
							globalMap.put("row3.UUID", row3.UUID);
							nb_line_tFlowToIterate_6++;

							counter_tFlowToIterate_6++;
							globalMap.put("tFlowToIterate_6_CURRENT_ITERATION",
									counter_tFlowToIterate_6);

							tos_count_tFlowToIterate_6++;

							/**
							 * [tFlowToIterate_6 main ] stop
							 */
							NB_ITERATE_tRunJob_6++;
							iterateLoop++;

							/**
							 * [tRunJob_6 begin ] start
							 */

							ok_Hash.put("tRunJob_6", false);
							start_Hash.put("tRunJob_6",
									System.currentTimeMillis());
							currentComponent = "tRunJob_6";

							int tos_count_tRunJob_6 = 0;

							/**
							 * [tRunJob_6 begin ] stop
							 */
							/**
							 * [tRunJob_6 main ] start
							 */

							currentComponent = "tRunJob_6";

							java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
							paraList_tRunJob_6.add("--father_pid=" + pid);

							paraList_tRunJob_6.add("--root_pid=" + rootPid);

							paraList_tRunJob_6.add("--father_node=tRunJob_6");

							paraList_tRunJob_6.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_6.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_6
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_6 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_6 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_6".equals(tRunJobName_tRunJob_6)
									&& childResumePath_tRunJob_6 != null) {
								paraList_tRunJob_6
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_6
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_6");

							java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_6 = context
									.propertyNames();
							while (propertyNames_tRunJob_6.hasMoreElements()) {
								String key_tRunJob_6 = (String) propertyNames_tRunJob_6
										.nextElement();
								Object value_tRunJob_6 = (Object) context
										.get(key_tRunJob_6);
								paraList_tRunJob_6
										.add("--context_param " + key_tRunJob_6
												+ "=" + value_tRunJob_6);
							}

							parentContextMap_tRunJob_6.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_6.put("key", context.key);
							parentContextMap_tRunJob_6.put("value",
									context.value);
							parentContextMap_tRunJob_6.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_6.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_6.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_6.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_6.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_6.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_6.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_6 = null;

							obj_tRunJob_6 = context.key;
							paraList_tRunJob_6
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_6));
							parentContextMap_tRunJob_6
									.put("key", obj_tRunJob_6);
							obj_tRunJob_6 = context.value;
							paraList_tRunJob_6
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_6));
							parentContextMap_tRunJob_6.put("value",
									obj_tRunJob_6);
							obj_tRunJob_6 = context.propUUID;
							paraList_tRunJob_6
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_6));
							parentContextMap_tRunJob_6.put("propUUID",
									obj_tRunJob_6);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_6 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_6) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
										.entrySet()) {
									dataSources_tRunJob_6.put(
											talendDataSourceEntry_tRunJob_6
													.getKey(),
											talendDataSourceEntry_tRunJob_6
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_6
										.setDataSources(dataSources_tRunJob_6);
							}
							childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
							String[][] childReturn_tRunJob_6 = childJob_tRunJob_6
									.runJob((String[]) paraList_tRunJob_6
											.toArray(new String[paraList_tRunJob_6
													.size()]));
							errorCode = childJob_tRunJob_6.getErrorCode();

							if (childJob_tRunJob_6.getErrorCode() == null) {
								globalMap
										.put("tRunJob_6_CHILD_RETURN_CODE",
												childJob_tRunJob_6.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_6
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_6_CHILD_RETURN_CODE",
										childJob_tRunJob_6.getErrorCode());
							}
							globalMap
									.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_6
													.getExceptionStackTrace());

							if (childJob_tRunJob_6.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_6
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_6++;

							/**
							 * [tRunJob_6 main ] stop
							 */
							/**
							 * [tRunJob_6 end ] start
							 */

							currentComponent = "tRunJob_6";

							ok_Hash.put("tRunJob_6", true);
							end_Hash.put("tRunJob_6",
									System.currentTimeMillis());

							/**
							 * [tRunJob_6 end ] stop
							 */

						} // End of branch "price_per_ft_c"

						// Start of branch "noi_with_financing_1__c"
						if (noi_with_financing_1__c != null) {

							/**
							 * [tJavaRow_8 main ] start
							 */

							currentComponent = "tJavaRow_8";

							// Code generated according to input schema and
							// output schema
							context.key = noi_with_financing_1__c.key;
							context.value = noi_with_financing_1__c.value;
							context.propUUID = noi_with_financing_1__c.UUID;

							nb_line_tJavaRow_8++;

							tos_count_tJavaRow_8++;

							/**
							 * [tJavaRow_8 main ] stop
							 */

							/**
							 * [tFlowToIterate_7 main ] start
							 */

							currentComponent = "tFlowToIterate_7";

							globalMap.put("row4.key", row4.key);
							nb_line_tFlowToIterate_7++;
							globalMap.put("row4.value", row4.value);
							nb_line_tFlowToIterate_7++;
							globalMap.put("row4.UUID", row4.UUID);
							nb_line_tFlowToIterate_7++;

							counter_tFlowToIterate_7++;
							globalMap.put("tFlowToIterate_7_CURRENT_ITERATION",
									counter_tFlowToIterate_7);

							tos_count_tFlowToIterate_7++;

							/**
							 * [tFlowToIterate_7 main ] stop
							 */
							NB_ITERATE_tRunJob_7++;
							iterateLoop++;

							/**
							 * [tRunJob_7 begin ] start
							 */

							ok_Hash.put("tRunJob_7", false);
							start_Hash.put("tRunJob_7",
									System.currentTimeMillis());
							currentComponent = "tRunJob_7";

							int tos_count_tRunJob_7 = 0;

							/**
							 * [tRunJob_7 begin ] stop
							 */
							/**
							 * [tRunJob_7 main ] start
							 */

							currentComponent = "tRunJob_7";

							java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
							paraList_tRunJob_7.add("--father_pid=" + pid);

							paraList_tRunJob_7.add("--root_pid=" + rootPid);

							paraList_tRunJob_7.add("--father_node=tRunJob_7");

							paraList_tRunJob_7.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_7.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_7
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_7 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_7 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_7".equals(tRunJobName_tRunJob_7)
									&& childResumePath_tRunJob_7 != null) {
								paraList_tRunJob_7
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_7
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_7");

							java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_7 = context
									.propertyNames();
							while (propertyNames_tRunJob_7.hasMoreElements()) {
								String key_tRunJob_7 = (String) propertyNames_tRunJob_7
										.nextElement();
								Object value_tRunJob_7 = (Object) context
										.get(key_tRunJob_7);
								paraList_tRunJob_7
										.add("--context_param " + key_tRunJob_7
												+ "=" + value_tRunJob_7);
							}

							parentContextMap_tRunJob_7.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_7.put("key", context.key);
							parentContextMap_tRunJob_7.put("value",
									context.value);
							parentContextMap_tRunJob_7.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_7.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_7.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_7.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_7.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_7.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_7.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_7 = null;

							obj_tRunJob_7 = context.key;
							paraList_tRunJob_7
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_7));
							parentContextMap_tRunJob_7
									.put("key", obj_tRunJob_7);
							obj_tRunJob_7 = context.value;
							paraList_tRunJob_7
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_7));
							parentContextMap_tRunJob_7.put("value",
									obj_tRunJob_7);
							obj_tRunJob_7 = context.propUUID;
							paraList_tRunJob_7
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_7));
							parentContextMap_tRunJob_7.put("propUUID",
									obj_tRunJob_7);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_7 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_7) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
										.entrySet()) {
									dataSources_tRunJob_7.put(
											talendDataSourceEntry_tRunJob_7
													.getKey(),
											talendDataSourceEntry_tRunJob_7
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_7
										.setDataSources(dataSources_tRunJob_7);
							}
							childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;
							String[][] childReturn_tRunJob_7 = childJob_tRunJob_7
									.runJob((String[]) paraList_tRunJob_7
											.toArray(new String[paraList_tRunJob_7
													.size()]));
							errorCode = childJob_tRunJob_7.getErrorCode();

							if (childJob_tRunJob_7.getErrorCode() == null) {
								globalMap
										.put("tRunJob_7_CHILD_RETURN_CODE",
												childJob_tRunJob_7.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_7
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_7_CHILD_RETURN_CODE",
										childJob_tRunJob_7.getErrorCode());
							}
							globalMap
									.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_7
													.getExceptionStackTrace());

							if (childJob_tRunJob_7.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_7
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_7++;

							/**
							 * [tRunJob_7 main ] stop
							 */
							/**
							 * [tRunJob_7 end ] start
							 */

							currentComponent = "tRunJob_7";

							ok_Hash.put("tRunJob_7", true);
							end_Hash.put("tRunJob_7",
									System.currentTimeMillis());

							/**
							 * [tRunJob_7 end ] stop
							 */

						} // End of branch "noi_with_financing_1__c"

						// Start of branch "noi_with_financing_2__c"
						if (noi_with_financing_2__c != null) {

							/**
							 * [tJavaRow_9 main ] start
							 */

							currentComponent = "tJavaRow_9";

							// Code generated according to input schema and
							// output schema
							context.key = noi_with_financing_2__c.key;
							context.value = noi_with_financing_2__c.value;
							context.propUUID = noi_with_financing_2__c.UUID;

							nb_line_tJavaRow_9++;

							tos_count_tJavaRow_9++;

							/**
							 * [tJavaRow_9 main ] stop
							 */

							/**
							 * [tFlowToIterate_8 main ] start
							 */

							currentComponent = "tFlowToIterate_8";

							globalMap.put("row5.key", row5.key);
							nb_line_tFlowToIterate_8++;
							globalMap.put("row5.value", row5.value);
							nb_line_tFlowToIterate_8++;
							globalMap.put("row5.UUID", row5.UUID);
							nb_line_tFlowToIterate_8++;

							counter_tFlowToIterate_8++;
							globalMap.put("tFlowToIterate_8_CURRENT_ITERATION",
									counter_tFlowToIterate_8);

							tos_count_tFlowToIterate_8++;

							/**
							 * [tFlowToIterate_8 main ] stop
							 */
							NB_ITERATE_tRunJob_8++;
							iterateLoop++;

							/**
							 * [tRunJob_8 begin ] start
							 */

							ok_Hash.put("tRunJob_8", false);
							start_Hash.put("tRunJob_8",
									System.currentTimeMillis());
							currentComponent = "tRunJob_8";

							int tos_count_tRunJob_8 = 0;

							/**
							 * [tRunJob_8 begin ] stop
							 */
							/**
							 * [tRunJob_8 main ] start
							 */

							currentComponent = "tRunJob_8";

							java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();
							paraList_tRunJob_8.add("--father_pid=" + pid);

							paraList_tRunJob_8.add("--root_pid=" + rootPid);

							paraList_tRunJob_8.add("--father_node=tRunJob_8");

							paraList_tRunJob_8.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_8.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_8
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_8 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_8 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_8".equals(tRunJobName_tRunJob_8)
									&& childResumePath_tRunJob_8 != null) {
								paraList_tRunJob_8
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_8
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_8");

							java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_8 = context
									.propertyNames();
							while (propertyNames_tRunJob_8.hasMoreElements()) {
								String key_tRunJob_8 = (String) propertyNames_tRunJob_8
										.nextElement();
								Object value_tRunJob_8 = (Object) context
										.get(key_tRunJob_8);
								paraList_tRunJob_8
										.add("--context_param " + key_tRunJob_8
												+ "=" + value_tRunJob_8);
							}

							parentContextMap_tRunJob_8.put("propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_8.put("key", context.key);
							parentContextMap_tRunJob_8.put("value",
									context.value);
							parentContextMap_tRunJob_8.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_8.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_8.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_8.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_8.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_8.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_8.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_8 = null;

							obj_tRunJob_8 = context.key;
							paraList_tRunJob_8
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_8));
							parentContextMap_tRunJob_8
									.put("key", obj_tRunJob_8);
							obj_tRunJob_8 = context.value;
							paraList_tRunJob_8
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_8));
							parentContextMap_tRunJob_8.put("value",
									obj_tRunJob_8);
							obj_tRunJob_8 = context.propUUID;
							paraList_tRunJob_8
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_8));
							parentContextMap_tRunJob_8.put("propUUID",
									obj_tRunJob_8);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_8 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_8) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
										.entrySet()) {
									dataSources_tRunJob_8.put(
											talendDataSourceEntry_tRunJob_8
													.getKey(),
											talendDataSourceEntry_tRunJob_8
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_8
										.setDataSources(dataSources_tRunJob_8);
							}
							childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;
							String[][] childReturn_tRunJob_8 = childJob_tRunJob_8
									.runJob((String[]) paraList_tRunJob_8
											.toArray(new String[paraList_tRunJob_8
													.size()]));
							errorCode = childJob_tRunJob_8.getErrorCode();

							if (childJob_tRunJob_8.getErrorCode() == null) {
								globalMap
										.put("tRunJob_8_CHILD_RETURN_CODE",
												childJob_tRunJob_8.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_8
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_8_CHILD_RETURN_CODE",
										childJob_tRunJob_8.getErrorCode());
							}
							globalMap
									.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_8
													.getExceptionStackTrace());

							if (childJob_tRunJob_8.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_8
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_8++;

							/**
							 * [tRunJob_8 main ] stop
							 */
							/**
							 * [tRunJob_8 end ] start
							 */

							currentComponent = "tRunJob_8";

							ok_Hash.put("tRunJob_8", true);
							end_Hash.put("tRunJob_8",
									System.currentTimeMillis());

							/**
							 * [tRunJob_8 end ] stop
							 */

						} // End of branch "noi_with_financing_2__c"

						// Start of branch "noi__c"
						if (noi__c != null) {

							/**
							 * [tJavaRow_11 main ] start
							 */

							currentComponent = "tJavaRow_11";

							// Code generated according to input schema and
							// output schema
							context.key = noi__c.key;
							context.value = noi__c.value;
							context.propUUID = noi__c.UUID;

							nb_line_tJavaRow_11++;

							tos_count_tJavaRow_11++;

							/**
							 * [tJavaRow_11 main ] stop
							 */

							/**
							 * [tFlowToIterate_10 main ] start
							 */

							currentComponent = "tFlowToIterate_10";

							globalMap.put("row14.key", row14.key);
							nb_line_tFlowToIterate_10++;
							globalMap.put("row14.value", row14.value);
							nb_line_tFlowToIterate_10++;
							globalMap.put("row14.UUID", row14.UUID);
							nb_line_tFlowToIterate_10++;

							counter_tFlowToIterate_10++;
							globalMap.put(
									"tFlowToIterate_10_CURRENT_ITERATION",
									counter_tFlowToIterate_10);

							tos_count_tFlowToIterate_10++;

							/**
							 * [tFlowToIterate_10 main ] stop
							 */
							NB_ITERATE_tRunJob_10++;
							iterateLoop++;

							/**
							 * [tRunJob_10 begin ] start
							 */

							ok_Hash.put("tRunJob_10", false);
							start_Hash.put("tRunJob_10",
									System.currentTimeMillis());
							currentComponent = "tRunJob_10";

							int tos_count_tRunJob_10 = 0;

							/**
							 * [tRunJob_10 begin ] stop
							 */
							/**
							 * [tRunJob_10 main ] start
							 */

							currentComponent = "tRunJob_10";

							java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();
							paraList_tRunJob_10.add("--father_pid=" + pid);

							paraList_tRunJob_10.add("--root_pid=" + rootPid);

							paraList_tRunJob_10.add("--father_node=tRunJob_10");

							paraList_tRunJob_10.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_10.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_10
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_10 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_10 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_10".equals(tRunJobName_tRunJob_10)
									&& childResumePath_tRunJob_10 != null) {
								paraList_tRunJob_10
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_10
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_10");

							java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_10 = context
									.propertyNames();
							while (propertyNames_tRunJob_10.hasMoreElements()) {
								String key_tRunJob_10 = (String) propertyNames_tRunJob_10
										.nextElement();
								Object value_tRunJob_10 = (Object) context
										.get(key_tRunJob_10);
								paraList_tRunJob_10.add("--context_param "
										+ key_tRunJob_10 + "="
										+ value_tRunJob_10);
							}

							parentContextMap_tRunJob_10.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_10.put("key", context.key);
							parentContextMap_tRunJob_10.put("value",
									context.value);
							parentContextMap_tRunJob_10.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_10.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_10.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_10.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_10.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_10.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_10.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_10 = null;

							obj_tRunJob_10 = context.key;
							paraList_tRunJob_10
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_10));
							parentContextMap_tRunJob_10.put("key",
									obj_tRunJob_10);
							obj_tRunJob_10 = context.value;
							paraList_tRunJob_10
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_10));
							parentContextMap_tRunJob_10.put("value",
									obj_tRunJob_10);
							obj_tRunJob_10 = context.propUUID;
							paraList_tRunJob_10
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_10));
							parentContextMap_tRunJob_10.put("propUUID",
									obj_tRunJob_10);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_10 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_10) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
										.entrySet()) {
									dataSources_tRunJob_10.put(
											talendDataSourceEntry_tRunJob_10
													.getKey(),
											talendDataSourceEntry_tRunJob_10
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_10
										.setDataSources(dataSources_tRunJob_10);
							}
							childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;
							String[][] childReturn_tRunJob_10 = childJob_tRunJob_10
									.runJob((String[]) paraList_tRunJob_10
											.toArray(new String[paraList_tRunJob_10
													.size()]));
							errorCode = childJob_tRunJob_10.getErrorCode();

							if (childJob_tRunJob_10.getErrorCode() == null) {
								globalMap
										.put("tRunJob_10_CHILD_RETURN_CODE",
												childJob_tRunJob_10.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_10
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_10_CHILD_RETURN_CODE",
										childJob_tRunJob_10.getErrorCode());
							}
							globalMap.put(
									"tRunJob_10_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_10
											.getExceptionStackTrace());

							if (childJob_tRunJob_10.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_10
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_10++;

							/**
							 * [tRunJob_10 main ] stop
							 */
							/**
							 * [tRunJob_10 end ] start
							 */

							currentComponent = "tRunJob_10";

							ok_Hash.put("tRunJob_10", true);
							end_Hash.put("tRunJob_10",
									System.currentTimeMillis());

							/**
							 * [tRunJob_10 end ] stop
							 */

						} // End of branch "noi__c"

						// Start of branch "monthly_cash_flow__c"
						if (monthly_cash_flow__c != null) {

							/**
							 * [tJavaRow_12 main ] start
							 */

							currentComponent = "tJavaRow_12";

							// Code generated according to input schema and
							// output schema
							context.key = monthly_cash_flow__c.key;
							context.value = monthly_cash_flow__c.value;
							context.propUUID = monthly_cash_flow__c.UUID;

							nb_line_tJavaRow_12++;

							tos_count_tJavaRow_12++;

							/**
							 * [tJavaRow_12 main ] stop
							 */

							/**
							 * [tFlowToIterate_11 main ] start
							 */

							currentComponent = "tFlowToIterate_11";

							globalMap.put("row15.key", row15.key);
							nb_line_tFlowToIterate_11++;
							globalMap.put("row15.value", row15.value);
							nb_line_tFlowToIterate_11++;
							globalMap.put("row15.UUID", row15.UUID);
							nb_line_tFlowToIterate_11++;

							counter_tFlowToIterate_11++;
							globalMap.put(
									"tFlowToIterate_11_CURRENT_ITERATION",
									counter_tFlowToIterate_11);

							tos_count_tFlowToIterate_11++;

							/**
							 * [tFlowToIterate_11 main ] stop
							 */
							NB_ITERATE_tRunJob_11++;
							iterateLoop++;

							/**
							 * [tRunJob_11 begin ] start
							 */

							ok_Hash.put("tRunJob_11", false);
							start_Hash.put("tRunJob_11",
									System.currentTimeMillis());
							currentComponent = "tRunJob_11";

							int tos_count_tRunJob_11 = 0;

							/**
							 * [tRunJob_11 begin ] stop
							 */
							/**
							 * [tRunJob_11 main ] start
							 */

							currentComponent = "tRunJob_11";

							java.util.List<String> paraList_tRunJob_11 = new java.util.ArrayList<String>();
							paraList_tRunJob_11.add("--father_pid=" + pid);

							paraList_tRunJob_11.add("--root_pid=" + rootPid);

							paraList_tRunJob_11.add("--father_node=tRunJob_11");

							paraList_tRunJob_11.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_11.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_11
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_11 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_11 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_11".equals(tRunJobName_tRunJob_11)
									&& childResumePath_tRunJob_11 != null) {
								paraList_tRunJob_11
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_11
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_11");

							java.util.Map<String, Object> parentContextMap_tRunJob_11 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_11 = context
									.propertyNames();
							while (propertyNames_tRunJob_11.hasMoreElements()) {
								String key_tRunJob_11 = (String) propertyNames_tRunJob_11
										.nextElement();
								Object value_tRunJob_11 = (Object) context
										.get(key_tRunJob_11);
								paraList_tRunJob_11.add("--context_param "
										+ key_tRunJob_11 + "="
										+ value_tRunJob_11);
							}

							parentContextMap_tRunJob_11.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_11.put("key", context.key);
							parentContextMap_tRunJob_11.put("value",
									context.value);
							parentContextMap_tRunJob_11.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_11.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_11.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_11.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_11.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_11.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_11.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_11 = null;

							obj_tRunJob_11 = context.key;
							paraList_tRunJob_11
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_11));
							parentContextMap_tRunJob_11.put("key",
									obj_tRunJob_11);
							obj_tRunJob_11 = context.value;
							paraList_tRunJob_11
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_11));
							parentContextMap_tRunJob_11.put("value",
									obj_tRunJob_11);
							obj_tRunJob_11 = context.propUUID;
							paraList_tRunJob_11
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_11));
							parentContextMap_tRunJob_11.put("propUUID",
									obj_tRunJob_11);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_11 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_11) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_11 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_11 : talendDataSources_tRunJob_11
										.entrySet()) {
									dataSources_tRunJob_11.put(
											talendDataSourceEntry_tRunJob_11
													.getKey(),
											talendDataSourceEntry_tRunJob_11
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_11
										.setDataSources(dataSources_tRunJob_11);
							}
							childJob_tRunJob_11.parentContextMap = parentContextMap_tRunJob_11;
							String[][] childReturn_tRunJob_11 = childJob_tRunJob_11
									.runJob((String[]) paraList_tRunJob_11
											.toArray(new String[paraList_tRunJob_11
													.size()]));
							errorCode = childJob_tRunJob_11.getErrorCode();

							if (childJob_tRunJob_11.getErrorCode() == null) {
								globalMap
										.put("tRunJob_11_CHILD_RETURN_CODE",
												childJob_tRunJob_11.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_11
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_11_CHILD_RETURN_CODE",
										childJob_tRunJob_11.getErrorCode());
							}
							globalMap.put(
									"tRunJob_11_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_11
											.getExceptionStackTrace());

							if (childJob_tRunJob_11.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_11
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_11++;

							/**
							 * [tRunJob_11 main ] stop
							 */
							/**
							 * [tRunJob_11 end ] start
							 */

							currentComponent = "tRunJob_11";

							ok_Hash.put("tRunJob_11", true);
							end_Hash.put("tRunJob_11",
									System.currentTimeMillis());

							/**
							 * [tRunJob_11 end ] stop
							 */

						} // End of branch "monthly_cash_flow__c"

						// Start of branch "est_replacement_cost__c"
						if (est_replacement_cost__c != null) {

							/**
							 * [tJavaRow_13 main ] start
							 */

							currentComponent = "tJavaRow_13";

							// Code generated according to input schema and
							// output schema
							context.key = est_replacement_cost__c.key;
							context.value = est_replacement_cost__c.value;
							context.propUUID = est_replacement_cost__c.UUID;

							nb_line_tJavaRow_13++;

							tos_count_tJavaRow_13++;

							/**
							 * [tJavaRow_13 main ] stop
							 */

							/**
							 * [tFlowToIterate_12 main ] start
							 */

							currentComponent = "tFlowToIterate_12";

							globalMap.put("row16.key", row16.key);
							nb_line_tFlowToIterate_12++;
							globalMap.put("row16.value", row16.value);
							nb_line_tFlowToIterate_12++;
							globalMap.put("row16.UUID", row16.UUID);
							nb_line_tFlowToIterate_12++;

							counter_tFlowToIterate_12++;
							globalMap.put(
									"tFlowToIterate_12_CURRENT_ITERATION",
									counter_tFlowToIterate_12);

							tos_count_tFlowToIterate_12++;

							/**
							 * [tFlowToIterate_12 main ] stop
							 */
							NB_ITERATE_tRunJob_12++;
							iterateLoop++;

							/**
							 * [tRunJob_12 begin ] start
							 */

							ok_Hash.put("tRunJob_12", false);
							start_Hash.put("tRunJob_12",
									System.currentTimeMillis());
							currentComponent = "tRunJob_12";

							int tos_count_tRunJob_12 = 0;

							/**
							 * [tRunJob_12 begin ] stop
							 */
							/**
							 * [tRunJob_12 main ] start
							 */

							currentComponent = "tRunJob_12";

							java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();
							paraList_tRunJob_12.add("--father_pid=" + pid);

							paraList_tRunJob_12.add("--root_pid=" + rootPid);

							paraList_tRunJob_12.add("--father_node=tRunJob_12");

							paraList_tRunJob_12.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_12.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_12
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_12 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_12 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_12".equals(tRunJobName_tRunJob_12)
									&& childResumePath_tRunJob_12 != null) {
								paraList_tRunJob_12
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_12
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_12");

							java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_12 = context
									.propertyNames();
							while (propertyNames_tRunJob_12.hasMoreElements()) {
								String key_tRunJob_12 = (String) propertyNames_tRunJob_12
										.nextElement();
								Object value_tRunJob_12 = (Object) context
										.get(key_tRunJob_12);
								paraList_tRunJob_12.add("--context_param "
										+ key_tRunJob_12 + "="
										+ value_tRunJob_12);
							}

							parentContextMap_tRunJob_12.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_12.put("key", context.key);
							parentContextMap_tRunJob_12.put("value",
									context.value);
							parentContextMap_tRunJob_12.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_12.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_12.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_12.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_12.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_12.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_12.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_12 = null;

							obj_tRunJob_12 = context.key;
							paraList_tRunJob_12
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_12));
							parentContextMap_tRunJob_12.put("key",
									obj_tRunJob_12);
							obj_tRunJob_12 = context.value;
							paraList_tRunJob_12
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_12));
							parentContextMap_tRunJob_12.put("value",
									obj_tRunJob_12);
							obj_tRunJob_12 = context.propUUID;
							paraList_tRunJob_12
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_12));
							parentContextMap_tRunJob_12.put("propUUID",
									obj_tRunJob_12);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_12 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_12) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
										.entrySet()) {
									dataSources_tRunJob_12.put(
											talendDataSourceEntry_tRunJob_12
													.getKey(),
											talendDataSourceEntry_tRunJob_12
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_12
										.setDataSources(dataSources_tRunJob_12);
							}
							childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;
							String[][] childReturn_tRunJob_12 = childJob_tRunJob_12
									.runJob((String[]) paraList_tRunJob_12
											.toArray(new String[paraList_tRunJob_12
													.size()]));
							errorCode = childJob_tRunJob_12.getErrorCode();

							if (childJob_tRunJob_12.getErrorCode() == null) {
								globalMap
										.put("tRunJob_12_CHILD_RETURN_CODE",
												childJob_tRunJob_12.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_12
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_12_CHILD_RETURN_CODE",
										childJob_tRunJob_12.getErrorCode());
							}
							globalMap.put(
									"tRunJob_12_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_12
											.getExceptionStackTrace());

							if (childJob_tRunJob_12.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_12
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_12++;

							/**
							 * [tRunJob_12 main ] stop
							 */
							/**
							 * [tRunJob_12 end ] start
							 */

							currentComponent = "tRunJob_12";

							ok_Hash.put("tRunJob_12", true);
							end_Hash.put("tRunJob_12",
									System.currentTimeMillis());

							/**
							 * [tRunJob_12 end ] stop
							 */

						} // End of branch "est_replacement_cost__c"

						// Start of branch "est_replacement_cost_per_sq_ft__c"
						if (est_replacement_cost_per_sq_ft__c != null) {

							/**
							 * [tJavaRow_14 main ] start
							 */

							currentComponent = "tJavaRow_14";

							// Code generated according to input schema and
							// output schema
							context.key = est_replacement_cost_per_sq_ft__c.key;
							context.value = est_replacement_cost_per_sq_ft__c.value;
							context.propUUID = est_replacement_cost_per_sq_ft__c.UUID;

							nb_line_tJavaRow_14++;

							tos_count_tJavaRow_14++;

							/**
							 * [tJavaRow_14 main ] stop
							 */

							/**
							 * [tFlowToIterate_13 main ] start
							 */

							currentComponent = "tFlowToIterate_13";

							globalMap.put("row17.key", row17.key);
							nb_line_tFlowToIterate_13++;
							globalMap.put("row17.value", row17.value);
							nb_line_tFlowToIterate_13++;
							globalMap.put("row17.UUID", row17.UUID);
							nb_line_tFlowToIterate_13++;

							counter_tFlowToIterate_13++;
							globalMap.put(
									"tFlowToIterate_13_CURRENT_ITERATION",
									counter_tFlowToIterate_13);

							tos_count_tFlowToIterate_13++;

							/**
							 * [tFlowToIterate_13 main ] stop
							 */
							NB_ITERATE_tRunJob_13++;
							iterateLoop++;

							/**
							 * [tRunJob_13 begin ] start
							 */

							ok_Hash.put("tRunJob_13", false);
							start_Hash.put("tRunJob_13",
									System.currentTimeMillis());
							currentComponent = "tRunJob_13";

							int tos_count_tRunJob_13 = 0;

							/**
							 * [tRunJob_13 begin ] stop
							 */
							/**
							 * [tRunJob_13 main ] start
							 */

							currentComponent = "tRunJob_13";

							java.util.List<String> paraList_tRunJob_13 = new java.util.ArrayList<String>();
							paraList_tRunJob_13.add("--father_pid=" + pid);

							paraList_tRunJob_13.add("--root_pid=" + rootPid);

							paraList_tRunJob_13.add("--father_node=tRunJob_13");

							paraList_tRunJob_13.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_13.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_13
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_13 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_13 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_13".equals(tRunJobName_tRunJob_13)
									&& childResumePath_tRunJob_13 != null) {
								paraList_tRunJob_13
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_13
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_13");

							java.util.Map<String, Object> parentContextMap_tRunJob_13 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_13 = context
									.propertyNames();
							while (propertyNames_tRunJob_13.hasMoreElements()) {
								String key_tRunJob_13 = (String) propertyNames_tRunJob_13
										.nextElement();
								Object value_tRunJob_13 = (Object) context
										.get(key_tRunJob_13);
								paraList_tRunJob_13.add("--context_param "
										+ key_tRunJob_13 + "="
										+ value_tRunJob_13);
							}

							parentContextMap_tRunJob_13.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_13.put("key", context.key);
							parentContextMap_tRunJob_13.put("value",
									context.value);
							parentContextMap_tRunJob_13.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_13.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_13.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_13.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_13.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_13.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_13.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_13 = null;

							obj_tRunJob_13 = context.key;
							paraList_tRunJob_13
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_13));
							parentContextMap_tRunJob_13.put("key",
									obj_tRunJob_13);
							obj_tRunJob_13 = context.value;
							paraList_tRunJob_13
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_13));
							parentContextMap_tRunJob_13.put("value",
									obj_tRunJob_13);
							obj_tRunJob_13 = context.propUUID;
							paraList_tRunJob_13
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_13));
							parentContextMap_tRunJob_13.put("propUUID",
									obj_tRunJob_13);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_13 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_13 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_13) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_13 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_13 : talendDataSources_tRunJob_13
										.entrySet()) {
									dataSources_tRunJob_13.put(
											talendDataSourceEntry_tRunJob_13
													.getKey(),
											talendDataSourceEntry_tRunJob_13
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_13
										.setDataSources(dataSources_tRunJob_13);
							}
							childJob_tRunJob_13.parentContextMap = parentContextMap_tRunJob_13;
							String[][] childReturn_tRunJob_13 = childJob_tRunJob_13
									.runJob((String[]) paraList_tRunJob_13
											.toArray(new String[paraList_tRunJob_13
													.size()]));
							errorCode = childJob_tRunJob_13.getErrorCode();

							if (childJob_tRunJob_13.getErrorCode() == null) {
								globalMap
										.put("tRunJob_13_CHILD_RETURN_CODE",
												childJob_tRunJob_13.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_13
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_13_CHILD_RETURN_CODE",
										childJob_tRunJob_13.getErrorCode());
							}
							globalMap.put(
									"tRunJob_13_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_13
											.getExceptionStackTrace());

							if (childJob_tRunJob_13.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_13
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_13++;

							/**
							 * [tRunJob_13 main ] stop
							 */
							/**
							 * [tRunJob_13 end ] start
							 */

							currentComponent = "tRunJob_13";

							ok_Hash.put("tRunJob_13", true);
							end_Hash.put("tRunJob_13",
									System.currentTimeMillis());

							/**
							 * [tRunJob_13 end ] stop
							 */

						} // End of branch "est_replacement_cost_per_sq_ft__c"

						// Start of branch "cash_net_yield__c"
						if (cash_net_yield__c != null) {

							/**
							 * [tJavaRow_15 main ] start
							 */

							currentComponent = "tJavaRow_15";

							// Code generated according to input schema and
							// output schema
							context.key = cash_net_yield__c.key;
							context.value = cash_net_yield__c.value;
							context.propUUID = cash_net_yield__c.UUID;

							nb_line_tJavaRow_15++;

							tos_count_tJavaRow_15++;

							/**
							 * [tJavaRow_15 main ] stop
							 */

							/**
							 * [tFlowToIterate_14 main ] start
							 */

							currentComponent = "tFlowToIterate_14";

							globalMap.put("row18.key", row18.key);
							nb_line_tFlowToIterate_14++;
							globalMap.put("row18.value", row18.value);
							nb_line_tFlowToIterate_14++;
							globalMap.put("row18.UUID", row18.UUID);
							nb_line_tFlowToIterate_14++;

							counter_tFlowToIterate_14++;
							globalMap.put(
									"tFlowToIterate_14_CURRENT_ITERATION",
									counter_tFlowToIterate_14);

							tos_count_tFlowToIterate_14++;

							/**
							 * [tFlowToIterate_14 main ] stop
							 */
							NB_ITERATE_tRunJob_14++;
							iterateLoop++;

							/**
							 * [tRunJob_14 begin ] start
							 */

							ok_Hash.put("tRunJob_14", false);
							start_Hash.put("tRunJob_14",
									System.currentTimeMillis());
							currentComponent = "tRunJob_14";

							int tos_count_tRunJob_14 = 0;

							/**
							 * [tRunJob_14 begin ] stop
							 */
							/**
							 * [tRunJob_14 main ] start
							 */

							currentComponent = "tRunJob_14";

							java.util.List<String> paraList_tRunJob_14 = new java.util.ArrayList<String>();
							paraList_tRunJob_14.add("--father_pid=" + pid);

							paraList_tRunJob_14.add("--root_pid=" + rootPid);

							paraList_tRunJob_14.add("--father_node=tRunJob_14");

							paraList_tRunJob_14.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_14.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_14
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_14 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_14 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_14".equals(tRunJobName_tRunJob_14)
									&& childResumePath_tRunJob_14 != null) {
								paraList_tRunJob_14
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_14
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_14");

							java.util.Map<String, Object> parentContextMap_tRunJob_14 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_14 = context
									.propertyNames();
							while (propertyNames_tRunJob_14.hasMoreElements()) {
								String key_tRunJob_14 = (String) propertyNames_tRunJob_14
										.nextElement();
								Object value_tRunJob_14 = (Object) context
										.get(key_tRunJob_14);
								paraList_tRunJob_14.add("--context_param "
										+ key_tRunJob_14 + "="
										+ value_tRunJob_14);
							}

							parentContextMap_tRunJob_14.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_14.put("key", context.key);
							parentContextMap_tRunJob_14.put("value",
									context.value);
							parentContextMap_tRunJob_14.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_14.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_14.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_14.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_14.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_14.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_14.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_14 = null;

							obj_tRunJob_14 = context.key;
							paraList_tRunJob_14
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_14));
							parentContextMap_tRunJob_14.put("key",
									obj_tRunJob_14);
							obj_tRunJob_14 = context.value;
							paraList_tRunJob_14
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_14));
							parentContextMap_tRunJob_14.put("value",
									obj_tRunJob_14);
							obj_tRunJob_14 = context.propUUID;
							paraList_tRunJob_14
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_14));
							parentContextMap_tRunJob_14.put("propUUID",
									obj_tRunJob_14);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_14 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_14) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_14 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_14 : talendDataSources_tRunJob_14
										.entrySet()) {
									dataSources_tRunJob_14.put(
											talendDataSourceEntry_tRunJob_14
													.getKey(),
											talendDataSourceEntry_tRunJob_14
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_14
										.setDataSources(dataSources_tRunJob_14);
							}
							childJob_tRunJob_14.parentContextMap = parentContextMap_tRunJob_14;
							String[][] childReturn_tRunJob_14 = childJob_tRunJob_14
									.runJob((String[]) paraList_tRunJob_14
											.toArray(new String[paraList_tRunJob_14
													.size()]));
							errorCode = childJob_tRunJob_14.getErrorCode();

							if (childJob_tRunJob_14.getErrorCode() == null) {
								globalMap
										.put("tRunJob_14_CHILD_RETURN_CODE",
												childJob_tRunJob_14.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_14
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_14_CHILD_RETURN_CODE",
										childJob_tRunJob_14.getErrorCode());
							}
							globalMap.put(
									"tRunJob_14_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_14
											.getExceptionStackTrace());

							if (childJob_tRunJob_14.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_14
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_14++;

							/**
							 * [tRunJob_14 main ] stop
							 */
							/**
							 * [tRunJob_14 end ] start
							 */

							currentComponent = "tRunJob_14";

							ok_Hash.put("tRunJob_14", true);
							end_Hash.put("tRunJob_14",
									System.currentTimeMillis());

							/**
							 * [tRunJob_14 end ] stop
							 */

						} // End of branch "cash_net_yield__c"

						// Start of branch "down_payment_1__c"
						if (down_payment_1__c != null) {

							/**
							 * [tJavaRow_16 main ] start
							 */

							currentComponent = "tJavaRow_16";

							// Code generated according to input schema and
							// output schema
							context.key = down_payment_1__c.key;
							context.value = down_payment_1__c.value;
							context.propUUID = down_payment_1__c.UUID;

							nb_line_tJavaRow_16++;

							tos_count_tJavaRow_16++;

							/**
							 * [tJavaRow_16 main ] stop
							 */

							/**
							 * [tFlowToIterate_15 main ] start
							 */

							currentComponent = "tFlowToIterate_15";

							globalMap.put("row19.key", row19.key);
							nb_line_tFlowToIterate_15++;
							globalMap.put("row19.value", row19.value);
							nb_line_tFlowToIterate_15++;
							globalMap.put("row19.UUID", row19.UUID);
							nb_line_tFlowToIterate_15++;

							counter_tFlowToIterate_15++;
							globalMap.put(
									"tFlowToIterate_15_CURRENT_ITERATION",
									counter_tFlowToIterate_15);

							tos_count_tFlowToIterate_15++;

							/**
							 * [tFlowToIterate_15 main ] stop
							 */
							NB_ITERATE_tRunJob_15++;
							iterateLoop++;

							/**
							 * [tRunJob_15 begin ] start
							 */

							ok_Hash.put("tRunJob_15", false);
							start_Hash.put("tRunJob_15",
									System.currentTimeMillis());
							currentComponent = "tRunJob_15";

							int tos_count_tRunJob_15 = 0;

							/**
							 * [tRunJob_15 begin ] stop
							 */
							/**
							 * [tRunJob_15 main ] start
							 */

							currentComponent = "tRunJob_15";

							java.util.List<String> paraList_tRunJob_15 = new java.util.ArrayList<String>();
							paraList_tRunJob_15.add("--father_pid=" + pid);

							paraList_tRunJob_15.add("--root_pid=" + rootPid);

							paraList_tRunJob_15.add("--father_node=tRunJob_15");

							paraList_tRunJob_15.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_15.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_15
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_15 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_15 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_15".equals(tRunJobName_tRunJob_15)
									&& childResumePath_tRunJob_15 != null) {
								paraList_tRunJob_15
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_15
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_15");

							java.util.Map<String, Object> parentContextMap_tRunJob_15 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_15 = context
									.propertyNames();
							while (propertyNames_tRunJob_15.hasMoreElements()) {
								String key_tRunJob_15 = (String) propertyNames_tRunJob_15
										.nextElement();
								Object value_tRunJob_15 = (Object) context
										.get(key_tRunJob_15);
								paraList_tRunJob_15.add("--context_param "
										+ key_tRunJob_15 + "="
										+ value_tRunJob_15);
							}

							parentContextMap_tRunJob_15.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_15.put("key", context.key);
							parentContextMap_tRunJob_15.put("value",
									context.value);
							parentContextMap_tRunJob_15.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_15.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_15.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_15.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_15.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_15.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_15.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_15 = null;

							obj_tRunJob_15 = context.key;
							paraList_tRunJob_15
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_15));
							parentContextMap_tRunJob_15.put("key",
									obj_tRunJob_15);
							obj_tRunJob_15 = context.value;
							paraList_tRunJob_15
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_15));
							parentContextMap_tRunJob_15.put("value",
									obj_tRunJob_15);
							obj_tRunJob_15 = context.propUUID;
							paraList_tRunJob_15
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_15));
							parentContextMap_tRunJob_15.put("propUUID",
									obj_tRunJob_15);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_15 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_15) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_15 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_15 : talendDataSources_tRunJob_15
										.entrySet()) {
									dataSources_tRunJob_15.put(
											talendDataSourceEntry_tRunJob_15
													.getKey(),
											talendDataSourceEntry_tRunJob_15
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_15
										.setDataSources(dataSources_tRunJob_15);
							}
							childJob_tRunJob_15.parentContextMap = parentContextMap_tRunJob_15;
							String[][] childReturn_tRunJob_15 = childJob_tRunJob_15
									.runJob((String[]) paraList_tRunJob_15
											.toArray(new String[paraList_tRunJob_15
													.size()]));
							errorCode = childJob_tRunJob_15.getErrorCode();

							if (childJob_tRunJob_15.getErrorCode() == null) {
								globalMap
										.put("tRunJob_15_CHILD_RETURN_CODE",
												childJob_tRunJob_15.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_15
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_15_CHILD_RETURN_CODE",
										childJob_tRunJob_15.getErrorCode());
							}
							globalMap.put(
									"tRunJob_15_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_15
											.getExceptionStackTrace());

							if (childJob_tRunJob_15.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_15
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_15++;

							/**
							 * [tRunJob_15 main ] stop
							 */
							/**
							 * [tRunJob_15 end ] start
							 */

							currentComponent = "tRunJob_15";

							ok_Hash.put("tRunJob_15", true);
							end_Hash.put("tRunJob_15",
									System.currentTimeMillis());

							/**
							 * [tRunJob_15 end ] stop
							 */

						} // End of branch "down_payment_1__c"

						// Start of branch "down_payment_2__c"
						if (down_payment_2__c != null) {

							/**
							 * [tJavaRow_17 main ] start
							 */

							currentComponent = "tJavaRow_17";

							// Code generated according to input schema and
							// output schema
							context.key = down_payment_2__c.key;
							context.value = down_payment_2__c.value;
							context.propUUID = down_payment_2__c.UUID;

							nb_line_tJavaRow_17++;

							tos_count_tJavaRow_17++;

							/**
							 * [tJavaRow_17 main ] stop
							 */

							/**
							 * [tFlowToIterate_16 main ] start
							 */

							currentComponent = "tFlowToIterate_16";

							globalMap.put("row20.key", row20.key);
							nb_line_tFlowToIterate_16++;
							globalMap.put("row20.value", row20.value);
							nb_line_tFlowToIterate_16++;
							globalMap.put("row20.UUID", row20.UUID);
							nb_line_tFlowToIterate_16++;

							counter_tFlowToIterate_16++;
							globalMap.put(
									"tFlowToIterate_16_CURRENT_ITERATION",
									counter_tFlowToIterate_16);

							tos_count_tFlowToIterate_16++;

							/**
							 * [tFlowToIterate_16 main ] stop
							 */
							NB_ITERATE_tRunJob_16++;
							iterateLoop++;

							/**
							 * [tRunJob_16 begin ] start
							 */

							ok_Hash.put("tRunJob_16", false);
							start_Hash.put("tRunJob_16",
									System.currentTimeMillis());
							currentComponent = "tRunJob_16";

							int tos_count_tRunJob_16 = 0;

							/**
							 * [tRunJob_16 begin ] stop
							 */
							/**
							 * [tRunJob_16 main ] start
							 */

							currentComponent = "tRunJob_16";

							java.util.List<String> paraList_tRunJob_16 = new java.util.ArrayList<String>();
							paraList_tRunJob_16.add("--father_pid=" + pid);

							paraList_tRunJob_16.add("--root_pid=" + rootPid);

							paraList_tRunJob_16.add("--father_node=tRunJob_16");

							paraList_tRunJob_16.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_16.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_16
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_16 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_16 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_16".equals(tRunJobName_tRunJob_16)
									&& childResumePath_tRunJob_16 != null) {
								paraList_tRunJob_16
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_16
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_16");

							java.util.Map<String, Object> parentContextMap_tRunJob_16 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_16 = context
									.propertyNames();
							while (propertyNames_tRunJob_16.hasMoreElements()) {
								String key_tRunJob_16 = (String) propertyNames_tRunJob_16
										.nextElement();
								Object value_tRunJob_16 = (Object) context
										.get(key_tRunJob_16);
								paraList_tRunJob_16.add("--context_param "
										+ key_tRunJob_16 + "="
										+ value_tRunJob_16);
							}

							parentContextMap_tRunJob_16.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_16.put("key", context.key);
							parentContextMap_tRunJob_16.put("value",
									context.value);
							parentContextMap_tRunJob_16.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_16.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_16.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_16.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_16.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_16.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_16.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_16 = null;

							obj_tRunJob_16 = context.key;
							paraList_tRunJob_16
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_16));
							parentContextMap_tRunJob_16.put("key",
									obj_tRunJob_16);
							obj_tRunJob_16 = context.value;
							paraList_tRunJob_16
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_16));
							parentContextMap_tRunJob_16.put("value",
									obj_tRunJob_16);
							obj_tRunJob_16 = context.propUUID;
							paraList_tRunJob_16
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_16));
							parentContextMap_tRunJob_16.put("propUUID",
									obj_tRunJob_16);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_16 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_16 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_16) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_16 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_16 : talendDataSources_tRunJob_16
										.entrySet()) {
									dataSources_tRunJob_16.put(
											talendDataSourceEntry_tRunJob_16
													.getKey(),
											talendDataSourceEntry_tRunJob_16
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_16
										.setDataSources(dataSources_tRunJob_16);
							}
							childJob_tRunJob_16.parentContextMap = parentContextMap_tRunJob_16;
							String[][] childReturn_tRunJob_16 = childJob_tRunJob_16
									.runJob((String[]) paraList_tRunJob_16
											.toArray(new String[paraList_tRunJob_16
													.size()]));
							errorCode = childJob_tRunJob_16.getErrorCode();

							if (childJob_tRunJob_16.getErrorCode() == null) {
								globalMap
										.put("tRunJob_16_CHILD_RETURN_CODE",
												childJob_tRunJob_16.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_16
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_16_CHILD_RETURN_CODE",
										childJob_tRunJob_16.getErrorCode());
							}
							globalMap.put(
									"tRunJob_16_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_16
											.getExceptionStackTrace());

							if (childJob_tRunJob_16.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_16
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_16++;

							/**
							 * [tRunJob_16 main ] stop
							 */
							/**
							 * [tRunJob_16 end ] start
							 */

							currentComponent = "tRunJob_16";

							ok_Hash.put("tRunJob_16", true);
							end_Hash.put("tRunJob_16",
									System.currentTimeMillis());

							/**
							 * [tRunJob_16 end ] stop
							 */

						} // End of branch "down_payment_2__c"

						// Start of branch "interest_payment_1__c"
						if (interest_payment_1__c != null) {

							/**
							 * [tJavaRow_18 main ] start
							 */

							currentComponent = "tJavaRow_18";

							// Code generated according to input schema and
							// output schema
							context.key = interest_payment_1__c.key;
							context.value = interest_payment_1__c.value;
							context.propUUID = interest_payment_1__c.UUID;

							nb_line_tJavaRow_18++;

							tos_count_tJavaRow_18++;

							/**
							 * [tJavaRow_18 main ] stop
							 */

							/**
							 * [tFlowToIterate_17 main ] start
							 */

							currentComponent = "tFlowToIterate_17";

							globalMap.put("row21.key", row21.key);
							nb_line_tFlowToIterate_17++;
							globalMap.put("row21.value", row21.value);
							nb_line_tFlowToIterate_17++;
							globalMap.put("row21.UUID", row21.UUID);
							nb_line_tFlowToIterate_17++;

							counter_tFlowToIterate_17++;
							globalMap.put(
									"tFlowToIterate_17_CURRENT_ITERATION",
									counter_tFlowToIterate_17);

							tos_count_tFlowToIterate_17++;

							/**
							 * [tFlowToIterate_17 main ] stop
							 */
							NB_ITERATE_tRunJob_17++;
							iterateLoop++;

							/**
							 * [tRunJob_17 begin ] start
							 */

							ok_Hash.put("tRunJob_17", false);
							start_Hash.put("tRunJob_17",
									System.currentTimeMillis());
							currentComponent = "tRunJob_17";

							int tos_count_tRunJob_17 = 0;

							/**
							 * [tRunJob_17 begin ] stop
							 */
							/**
							 * [tRunJob_17 main ] start
							 */

							currentComponent = "tRunJob_17";

							java.util.List<String> paraList_tRunJob_17 = new java.util.ArrayList<String>();
							paraList_tRunJob_17.add("--father_pid=" + pid);

							paraList_tRunJob_17.add("--root_pid=" + rootPid);

							paraList_tRunJob_17.add("--father_node=tRunJob_17");

							paraList_tRunJob_17.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_17.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_17
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_17 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_17 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_17".equals(tRunJobName_tRunJob_17)
									&& childResumePath_tRunJob_17 != null) {
								paraList_tRunJob_17
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_17
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_17");

							java.util.Map<String, Object> parentContextMap_tRunJob_17 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_17 = context
									.propertyNames();
							while (propertyNames_tRunJob_17.hasMoreElements()) {
								String key_tRunJob_17 = (String) propertyNames_tRunJob_17
										.nextElement();
								Object value_tRunJob_17 = (Object) context
										.get(key_tRunJob_17);
								paraList_tRunJob_17.add("--context_param "
										+ key_tRunJob_17 + "="
										+ value_tRunJob_17);
							}

							parentContextMap_tRunJob_17.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_17.put("key", context.key);
							parentContextMap_tRunJob_17.put("value",
									context.value);
							parentContextMap_tRunJob_17.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_17.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_17.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_17.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_17.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_17.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_17.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_17 = null;

							obj_tRunJob_17 = context.key;
							paraList_tRunJob_17
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_17));
							parentContextMap_tRunJob_17.put("key",
									obj_tRunJob_17);
							obj_tRunJob_17 = context.value;
							paraList_tRunJob_17
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_17));
							parentContextMap_tRunJob_17.put("value",
									obj_tRunJob_17);
							obj_tRunJob_17 = context.propUUID;
							paraList_tRunJob_17
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_17));
							parentContextMap_tRunJob_17.put("propUUID",
									obj_tRunJob_17);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_17 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_17 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_17) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_17 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_17 : talendDataSources_tRunJob_17
										.entrySet()) {
									dataSources_tRunJob_17.put(
											talendDataSourceEntry_tRunJob_17
													.getKey(),
											talendDataSourceEntry_tRunJob_17
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_17
										.setDataSources(dataSources_tRunJob_17);
							}
							childJob_tRunJob_17.parentContextMap = parentContextMap_tRunJob_17;
							String[][] childReturn_tRunJob_17 = childJob_tRunJob_17
									.runJob((String[]) paraList_tRunJob_17
											.toArray(new String[paraList_tRunJob_17
													.size()]));
							errorCode = childJob_tRunJob_17.getErrorCode();

							if (childJob_tRunJob_17.getErrorCode() == null) {
								globalMap
										.put("tRunJob_17_CHILD_RETURN_CODE",
												childJob_tRunJob_17.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_17
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_17_CHILD_RETURN_CODE",
										childJob_tRunJob_17.getErrorCode());
							}
							globalMap.put(
									"tRunJob_17_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_17
											.getExceptionStackTrace());

							if (childJob_tRunJob_17.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_17
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_17++;

							/**
							 * [tRunJob_17 main ] stop
							 */
							/**
							 * [tRunJob_17 end ] start
							 */

							currentComponent = "tRunJob_17";

							ok_Hash.put("tRunJob_17", true);
							end_Hash.put("tRunJob_17",
									System.currentTimeMillis());

							/**
							 * [tRunJob_17 end ] stop
							 */

						} // End of branch "interest_payment_1__c"

						// Start of branch "yearly_interest_payment_1__c"
						if (yearly_interest_payment_1__c != null) {

							/**
							 * [tJavaRow_20 main ] start
							 */

							currentComponent = "tJavaRow_20";

							// Code generated according to input schema and
							// output schema
							context.key = yearly_interest_payment_1__c.key;
							context.value = yearly_interest_payment_1__c.value;
							context.propUUID = yearly_interest_payment_1__c.UUID;

							nb_line_tJavaRow_20++;

							tos_count_tJavaRow_20++;

							/**
							 * [tJavaRow_20 main ] stop
							 */

							/**
							 * [tFlowToIterate_18 main ] start
							 */

							currentComponent = "tFlowToIterate_18";

							globalMap.put("row22.key", row22.key);
							nb_line_tFlowToIterate_18++;
							globalMap.put("row22.value", row22.value);
							nb_line_tFlowToIterate_18++;
							globalMap.put("row22.UUID", row22.UUID);
							nb_line_tFlowToIterate_18++;

							counter_tFlowToIterate_18++;
							globalMap.put(
									"tFlowToIterate_18_CURRENT_ITERATION",
									counter_tFlowToIterate_18);

							tos_count_tFlowToIterate_18++;

							/**
							 * [tFlowToIterate_18 main ] stop
							 */
							NB_ITERATE_tRunJob_18++;
							iterateLoop++;

							/**
							 * [tRunJob_18 begin ] start
							 */

							ok_Hash.put("tRunJob_18", false);
							start_Hash.put("tRunJob_18",
									System.currentTimeMillis());
							currentComponent = "tRunJob_18";

							int tos_count_tRunJob_18 = 0;

							/**
							 * [tRunJob_18 begin ] stop
							 */
							/**
							 * [tRunJob_18 main ] start
							 */

							currentComponent = "tRunJob_18";

							java.util.List<String> paraList_tRunJob_18 = new java.util.ArrayList<String>();
							paraList_tRunJob_18.add("--father_pid=" + pid);

							paraList_tRunJob_18.add("--root_pid=" + rootPid);

							paraList_tRunJob_18.add("--father_node=tRunJob_18");

							paraList_tRunJob_18.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_18.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_18
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_18 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_18 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_18".equals(tRunJobName_tRunJob_18)
									&& childResumePath_tRunJob_18 != null) {
								paraList_tRunJob_18
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_18
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_18");

							java.util.Map<String, Object> parentContextMap_tRunJob_18 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_18 = context
									.propertyNames();
							while (propertyNames_tRunJob_18.hasMoreElements()) {
								String key_tRunJob_18 = (String) propertyNames_tRunJob_18
										.nextElement();
								Object value_tRunJob_18 = (Object) context
										.get(key_tRunJob_18);
								paraList_tRunJob_18.add("--context_param "
										+ key_tRunJob_18 + "="
										+ value_tRunJob_18);
							}

							parentContextMap_tRunJob_18.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_18.put("key", context.key);
							parentContextMap_tRunJob_18.put("value",
									context.value);
							parentContextMap_tRunJob_18.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_18.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_18.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_18.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_18.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_18.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_18.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_18 = null;

							obj_tRunJob_18 = context.key;
							paraList_tRunJob_18
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_18));
							parentContextMap_tRunJob_18.put("key",
									obj_tRunJob_18);
							obj_tRunJob_18 = context.value;
							paraList_tRunJob_18
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_18));
							parentContextMap_tRunJob_18.put("value",
									obj_tRunJob_18);
							obj_tRunJob_18 = context.propUUID;
							paraList_tRunJob_18
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_18));
							parentContextMap_tRunJob_18.put("propUUID",
									obj_tRunJob_18);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_18 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_18 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_18) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_18 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_18 : talendDataSources_tRunJob_18
										.entrySet()) {
									dataSources_tRunJob_18.put(
											talendDataSourceEntry_tRunJob_18
													.getKey(),
											talendDataSourceEntry_tRunJob_18
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_18
										.setDataSources(dataSources_tRunJob_18);
							}
							childJob_tRunJob_18.parentContextMap = parentContextMap_tRunJob_18;
							String[][] childReturn_tRunJob_18 = childJob_tRunJob_18
									.runJob((String[]) paraList_tRunJob_18
											.toArray(new String[paraList_tRunJob_18
													.size()]));
							errorCode = childJob_tRunJob_18.getErrorCode();

							if (childJob_tRunJob_18.getErrorCode() == null) {
								globalMap
										.put("tRunJob_18_CHILD_RETURN_CODE",
												childJob_tRunJob_18.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_18
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_18_CHILD_RETURN_CODE",
										childJob_tRunJob_18.getErrorCode());
							}
							globalMap.put(
									"tRunJob_18_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_18
											.getExceptionStackTrace());

							if (childJob_tRunJob_18.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_18
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_18++;

							/**
							 * [tRunJob_18 main ] stop
							 */
							/**
							 * [tRunJob_18 end ] start
							 */

							currentComponent = "tRunJob_18";

							ok_Hash.put("tRunJob_18", true);
							end_Hash.put("tRunJob_18",
									System.currentTimeMillis());

							/**
							 * [tRunJob_18 end ] stop
							 */

						} // End of branch "yearly_interest_payment_1__c"

						// Start of branch "monthly_interest_payment_2__c"
						if (monthly_interest_payment_2__c != null) {

							/**
							 * [tJavaRow_21 main ] start
							 */

							currentComponent = "tJavaRow_21";

							// Code generated according to input schema and
							// output schema
							context.key = monthly_interest_payment_2__c.key;
							context.value = monthly_interest_payment_2__c.value;
							context.propUUID = monthly_interest_payment_2__c.UUID;

							nb_line_tJavaRow_21++;

							tos_count_tJavaRow_21++;

							/**
							 * [tJavaRow_21 main ] stop
							 */

							/**
							 * [tFlowToIterate_19 main ] start
							 */

							currentComponent = "tFlowToIterate_19";

							globalMap.put("row23.key", row23.key);
							nb_line_tFlowToIterate_19++;
							globalMap.put("row23.value", row23.value);
							nb_line_tFlowToIterate_19++;
							globalMap.put("row23.UUID", row23.UUID);
							nb_line_tFlowToIterate_19++;

							counter_tFlowToIterate_19++;
							globalMap.put(
									"tFlowToIterate_19_CURRENT_ITERATION",
									counter_tFlowToIterate_19);

							tos_count_tFlowToIterate_19++;

							/**
							 * [tFlowToIterate_19 main ] stop
							 */
							NB_ITERATE_tRunJob_19++;
							iterateLoop++;

							/**
							 * [tRunJob_19 begin ] start
							 */

							ok_Hash.put("tRunJob_19", false);
							start_Hash.put("tRunJob_19",
									System.currentTimeMillis());
							currentComponent = "tRunJob_19";

							int tos_count_tRunJob_19 = 0;

							/**
							 * [tRunJob_19 begin ] stop
							 */
							/**
							 * [tRunJob_19 main ] start
							 */

							currentComponent = "tRunJob_19";

							java.util.List<String> paraList_tRunJob_19 = new java.util.ArrayList<String>();
							paraList_tRunJob_19.add("--father_pid=" + pid);

							paraList_tRunJob_19.add("--root_pid=" + rootPid);

							paraList_tRunJob_19.add("--father_node=tRunJob_19");

							paraList_tRunJob_19.add("--context=Default");

							// for feature:10589
							paraList_tRunJob_19.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_19
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_19 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_19 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_19".equals(tRunJobName_tRunJob_19)
									&& childResumePath_tRunJob_19 != null) {
								paraList_tRunJob_19
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_19
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_19");

							java.util.Map<String, Object> parentContextMap_tRunJob_19 = new java.util.HashMap<String, Object>();

							context.synchronizeContext();
							java.util.Enumeration<?> propertyNames_tRunJob_19 = context
									.propertyNames();
							while (propertyNames_tRunJob_19.hasMoreElements()) {
								String key_tRunJob_19 = (String) propertyNames_tRunJob_19
										.nextElement();
								Object value_tRunJob_19 = (Object) context
										.get(key_tRunJob_19);
								paraList_tRunJob_19.add("--context_param "
										+ key_tRunJob_19 + "="
										+ value_tRunJob_19);
							}

							parentContextMap_tRunJob_19.put(
									"propertySourceUri",
									context.propertySourceUri);
							parentContextMap_tRunJob_19.put("key", context.key);
							parentContextMap_tRunJob_19.put("value",
									context.value);
							parentContextMap_tRunJob_19.put("propUUID",
									context.propUUID);
							parentContextMap_tRunJob_19.put("talon_Password",
									context.talon_Password);
							parentContextMap_tRunJob_19.put(
									"talon_AdditionalParams",
									context.talon_AdditionalParams);
							parentContextMap_tRunJob_19.put("talon_Port",
									context.talon_Port);
							parentContextMap_tRunJob_19.put("talon_Database",
									context.talon_Database);
							parentContextMap_tRunJob_19.put("talon_Server",
									context.talon_Server);
							parentContextMap_tRunJob_19.put("talon_Login",
									context.talon_Login);

							Object obj_tRunJob_19 = null;

							obj_tRunJob_19 = context.key;
							paraList_tRunJob_19
									.add("--context_param key="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_19));
							parentContextMap_tRunJob_19.put("key",
									obj_tRunJob_19);
							obj_tRunJob_19 = context.value;
							paraList_tRunJob_19
									.add("--context_param value="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_19));
							parentContextMap_tRunJob_19.put("value",
									obj_tRunJob_19);
							obj_tRunJob_19 = context.propUUID;
							paraList_tRunJob_19
									.add("--context_param propUUID="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_19));
							parentContextMap_tRunJob_19.put("propUUID",
									obj_tRunJob_19);
							talonetl.loadfinacialdata_0_1.loadFinacialData childJob_tRunJob_19 = new talonetl.loadfinacialdata_0_1.loadFinacialData();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_19 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_19) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_19 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_19 : talendDataSources_tRunJob_19
										.entrySet()) {
									dataSources_tRunJob_19.put(
											talendDataSourceEntry_tRunJob_19
													.getKey(),
											talendDataSourceEntry_tRunJob_19
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_19
										.setDataSources(dataSources_tRunJob_19);
							}
							childJob_tRunJob_19.parentContextMap = parentContextMap_tRunJob_19;
							String[][] childReturn_tRunJob_19 = childJob_tRunJob_19
									.runJob((String[]) paraList_tRunJob_19
											.toArray(new String[paraList_tRunJob_19
													.size()]));
							errorCode = childJob_tRunJob_19.getErrorCode();

							if (childJob_tRunJob_19.getErrorCode() == null) {
								globalMap
										.put("tRunJob_19_CHILD_RETURN_CODE",
												childJob_tRunJob_19.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_19
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_19_CHILD_RETURN_CODE",
										childJob_tRunJob_19.getErrorCode());
							}
							globalMap.put(
									"tRunJob_19_CHILD_EXCEPTION_STACKTRACE",
									childJob_tRunJob_19
											.getExceptionStackTrace());

							if (childJob_tRunJob_19.getErrorCode() != null
									|| ("failure").equals(childJob_tRunJob_19
											.getStatus())) {
								throw new RuntimeException(
										"Child job running failed");
							}

							tos_count_tRunJob_19++;

							/**
							 * [tRunJob_19 main ] stop
							 */
							/**
							 * [tRunJob_19 end ] start
							 */

							currentComponent = "tRunJob_19";

							ok_Hash.put("tRunJob_19", true);
							end_Hash.put("tRunJob_19",
									System.currentTimeMillis());

							/**
							 * [tRunJob_19 end ] stop
							 */

						} // End of branch "monthly_interest_payment_2__c"

					} // End of branch "row1"

					/**
					 * [tFileInputXML_1 end ] start
					 */

					currentComponent = "tFileInputXML_1";

				}
				try {
					looper_tFileInputXML_1.handleTaskResponse();
				} catch (Exception e) {

					System.err.println(e.getMessage());

				}
				globalMap.put("tFileInputXML_1_NB_LINE",
						nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row11 != null) {
					tHash_Lookup_row11.endGet();
				}
				globalMap.remove("tHash_Lookup_row11");

				tHash_Lookup_Cache_row11.endGet();
				tHash_Lookup_Cache_row11 = null;
				tHash_Lookup_Real_row11 = null;

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tJavaRow_21 end ] start
				 */

				currentComponent = "tJavaRow_21";

				globalMap.put("tJavaRow_21_NB_LINE", nb_line_tJavaRow_21);

				ok_Hash.put("tJavaRow_21", true);
				end_Hash.put("tJavaRow_21", System.currentTimeMillis());

				/**
				 * [tJavaRow_21 end ] stop
				 */

				/**
				 * [tFlowToIterate_19 end ] start
				 */

				currentComponent = "tFlowToIterate_19";

				globalMap.put("tFlowToIterate_19_NB_LINE",
						nb_line_tFlowToIterate_19);

				ok_Hash.put("tFlowToIterate_19", true);
				end_Hash.put("tFlowToIterate_19", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_19 end ] stop
				 */

				/**
				 * [tJavaRow_20 end ] start
				 */

				currentComponent = "tJavaRow_20";

				globalMap.put("tJavaRow_20_NB_LINE", nb_line_tJavaRow_20);

				ok_Hash.put("tJavaRow_20", true);
				end_Hash.put("tJavaRow_20", System.currentTimeMillis());

				/**
				 * [tJavaRow_20 end ] stop
				 */

				/**
				 * [tFlowToIterate_18 end ] start
				 */

				currentComponent = "tFlowToIterate_18";

				globalMap.put("tFlowToIterate_18_NB_LINE",
						nb_line_tFlowToIterate_18);

				ok_Hash.put("tFlowToIterate_18", true);
				end_Hash.put("tFlowToIterate_18", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_18 end ] stop
				 */

				/**
				 * [tJavaRow_18 end ] start
				 */

				currentComponent = "tJavaRow_18";

				globalMap.put("tJavaRow_18_NB_LINE", nb_line_tJavaRow_18);

				ok_Hash.put("tJavaRow_18", true);
				end_Hash.put("tJavaRow_18", System.currentTimeMillis());

				/**
				 * [tJavaRow_18 end ] stop
				 */

				/**
				 * [tFlowToIterate_17 end ] start
				 */

				currentComponent = "tFlowToIterate_17";

				globalMap.put("tFlowToIterate_17_NB_LINE",
						nb_line_tFlowToIterate_17);

				ok_Hash.put("tFlowToIterate_17", true);
				end_Hash.put("tFlowToIterate_17", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_17 end ] stop
				 */

				/**
				 * [tJavaRow_17 end ] start
				 */

				currentComponent = "tJavaRow_17";

				globalMap.put("tJavaRow_17_NB_LINE", nb_line_tJavaRow_17);

				ok_Hash.put("tJavaRow_17", true);
				end_Hash.put("tJavaRow_17", System.currentTimeMillis());

				/**
				 * [tJavaRow_17 end ] stop
				 */

				/**
				 * [tFlowToIterate_16 end ] start
				 */

				currentComponent = "tFlowToIterate_16";

				globalMap.put("tFlowToIterate_16_NB_LINE",
						nb_line_tFlowToIterate_16);

				ok_Hash.put("tFlowToIterate_16", true);
				end_Hash.put("tFlowToIterate_16", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_16 end ] stop
				 */

				/**
				 * [tJavaRow_16 end ] start
				 */

				currentComponent = "tJavaRow_16";

				globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

				ok_Hash.put("tJavaRow_16", true);
				end_Hash.put("tJavaRow_16", System.currentTimeMillis());

				/**
				 * [tJavaRow_16 end ] stop
				 */

				/**
				 * [tFlowToIterate_15 end ] start
				 */

				currentComponent = "tFlowToIterate_15";

				globalMap.put("tFlowToIterate_15_NB_LINE",
						nb_line_tFlowToIterate_15);

				ok_Hash.put("tFlowToIterate_15", true);
				end_Hash.put("tFlowToIterate_15", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_15 end ] stop
				 */

				/**
				 * [tJavaRow_15 end ] start
				 */

				currentComponent = "tJavaRow_15";

				globalMap.put("tJavaRow_15_NB_LINE", nb_line_tJavaRow_15);

				ok_Hash.put("tJavaRow_15", true);
				end_Hash.put("tJavaRow_15", System.currentTimeMillis());

				/**
				 * [tJavaRow_15 end ] stop
				 */

				/**
				 * [tFlowToIterate_14 end ] start
				 */

				currentComponent = "tFlowToIterate_14";

				globalMap.put("tFlowToIterate_14_NB_LINE",
						nb_line_tFlowToIterate_14);

				ok_Hash.put("tFlowToIterate_14", true);
				end_Hash.put("tFlowToIterate_14", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_14 end ] stop
				 */

				/**
				 * [tJavaRow_14 end ] start
				 */

				currentComponent = "tJavaRow_14";

				globalMap.put("tJavaRow_14_NB_LINE", nb_line_tJavaRow_14);

				ok_Hash.put("tJavaRow_14", true);
				end_Hash.put("tJavaRow_14", System.currentTimeMillis());

				/**
				 * [tJavaRow_14 end ] stop
				 */

				/**
				 * [tFlowToIterate_13 end ] start
				 */

				currentComponent = "tFlowToIterate_13";

				globalMap.put("tFlowToIterate_13_NB_LINE",
						nb_line_tFlowToIterate_13);

				ok_Hash.put("tFlowToIterate_13", true);
				end_Hash.put("tFlowToIterate_13", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_13 end ] stop
				 */

				/**
				 * [tJavaRow_13 end ] start
				 */

				currentComponent = "tJavaRow_13";

				globalMap.put("tJavaRow_13_NB_LINE", nb_line_tJavaRow_13);

				ok_Hash.put("tJavaRow_13", true);
				end_Hash.put("tJavaRow_13", System.currentTimeMillis());

				/**
				 * [tJavaRow_13 end ] stop
				 */

				/**
				 * [tFlowToIterate_12 end ] start
				 */

				currentComponent = "tFlowToIterate_12";

				globalMap.put("tFlowToIterate_12_NB_LINE",
						nb_line_tFlowToIterate_12);

				ok_Hash.put("tFlowToIterate_12", true);
				end_Hash.put("tFlowToIterate_12", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_12 end ] stop
				 */

				/**
				 * [tJavaRow_12 end ] start
				 */

				currentComponent = "tJavaRow_12";

				globalMap.put("tJavaRow_12_NB_LINE", nb_line_tJavaRow_12);

				ok_Hash.put("tJavaRow_12", true);
				end_Hash.put("tJavaRow_12", System.currentTimeMillis());

				/**
				 * [tJavaRow_12 end ] stop
				 */

				/**
				 * [tFlowToIterate_11 end ] start
				 */

				currentComponent = "tFlowToIterate_11";

				globalMap.put("tFlowToIterate_11_NB_LINE",
						nb_line_tFlowToIterate_11);

				ok_Hash.put("tFlowToIterate_11", true);
				end_Hash.put("tFlowToIterate_11", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_11 end ] stop
				 */

				/**
				 * [tJavaRow_11 end ] start
				 */

				currentComponent = "tJavaRow_11";

				globalMap.put("tJavaRow_11_NB_LINE", nb_line_tJavaRow_11);

				ok_Hash.put("tJavaRow_11", true);
				end_Hash.put("tJavaRow_11", System.currentTimeMillis());

				/**
				 * [tJavaRow_11 end ] stop
				 */

				/**
				 * [tFlowToIterate_10 end ] start
				 */

				currentComponent = "tFlowToIterate_10";

				globalMap.put("tFlowToIterate_10_NB_LINE",
						nb_line_tFlowToIterate_10);

				ok_Hash.put("tFlowToIterate_10", true);
				end_Hash.put("tFlowToIterate_10", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_10 end ] stop
				 */

				/**
				 * [tJavaRow_9 end ] start
				 */

				currentComponent = "tJavaRow_9";

				globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

				ok_Hash.put("tJavaRow_9", true);
				end_Hash.put("tJavaRow_9", System.currentTimeMillis());

				/**
				 * [tJavaRow_9 end ] stop
				 */

				/**
				 * [tFlowToIterate_8 end ] start
				 */

				currentComponent = "tFlowToIterate_8";

				globalMap.put("tFlowToIterate_8_NB_LINE",
						nb_line_tFlowToIterate_8);

				ok_Hash.put("tFlowToIterate_8", true);
				end_Hash.put("tFlowToIterate_8", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_8 end ] stop
				 */

				/**
				 * [tJavaRow_8 end ] start
				 */

				currentComponent = "tJavaRow_8";

				globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

				ok_Hash.put("tJavaRow_8", true);
				end_Hash.put("tJavaRow_8", System.currentTimeMillis());

				/**
				 * [tJavaRow_8 end ] stop
				 */

				/**
				 * [tFlowToIterate_7 end ] start
				 */

				currentComponent = "tFlowToIterate_7";

				globalMap.put("tFlowToIterate_7_NB_LINE",
						nb_line_tFlowToIterate_7);

				ok_Hash.put("tFlowToIterate_7", true);
				end_Hash.put("tFlowToIterate_7", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_7 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tFlowToIterate_6 end ] start
				 */

				currentComponent = "tFlowToIterate_6";

				globalMap.put("tFlowToIterate_6_NB_LINE",
						nb_line_tFlowToIterate_6);

				ok_Hash.put("tFlowToIterate_6", true);
				end_Hash.put("tFlowToIterate_6", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_6 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tFlowToIterate_5 end ] start
				 */

				currentComponent = "tFlowToIterate_5";

				globalMap.put("tFlowToIterate_5_NB_LINE",
						nb_line_tFlowToIterate_5);

				ok_Hash.put("tFlowToIterate_5", true);
				end_Hash.put("tFlowToIterate_5", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_5 end ] stop
				 */

				/**
				 * [tJavaRow_10 end ] start
				 */

				currentComponent = "tJavaRow_10";

				globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

				ok_Hash.put("tJavaRow_10", true);
				end_Hash.put("tJavaRow_10", System.currentTimeMillis());

				/**
				 * [tJavaRow_10 end ] stop
				 */

				/**
				 * [tFlowToIterate_9 end ] start
				 */

				currentComponent = "tFlowToIterate_9";

				globalMap.put("tFlowToIterate_9_NB_LINE",
						nb_line_tFlowToIterate_9);

				ok_Hash.put("tFlowToIterate_9", true);
				end_Hash.put("tFlowToIterate_9", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_9 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tFlowToIterate_4 end ] start
				 */

				currentComponent = "tFlowToIterate_4";

				globalMap.put("tFlowToIterate_4_NB_LINE",
						nb_line_tFlowToIterate_4);

				ok_Hash.put("tFlowToIterate_4", true);
				end_Hash.put("tFlowToIterate_4", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_4 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tFlowToIterate_3 end ] start
				 */

				currentComponent = "tFlowToIterate_3";

				globalMap.put("tFlowToIterate_3_NB_LINE",
						nb_line_tFlowToIterate_3);

				ok_Hash.put("tFlowToIterate_3", true);
				end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_3 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tFlowToIterate_2 end ] start
				 */

				currentComponent = "tFlowToIterate_2";

				globalMap.put("tFlowToIterate_2_NB_LINE",
						nb_line_tFlowToIterate_2);

				ok_Hash.put("tFlowToIterate_2", true);
				end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_2 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		} finally {
			// free memory for "tMap_1"
			globalMap.put("tHash_Lookup_row11", null);

		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_TALONETL_getPropFinacials = new byte[0];
		static byte[] commonByteArray_TALONETL_getPropFinacials = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String UUID;

		public String getUUID() {
			return this.UUID;
		}

		public String PROP_NAME;

		public String getPROP_NAME() {
			return this.PROP_NAME;
		}

		public float PRICE;

		public float getPRICE() {
			return this.PRICE;
		}

		public String SQFT;

		public String getSQFT() {
			return this.SQFT;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public float NUM_BEDS;

		public float getNUM_BEDS() {
			return this.NUM_BEDS;
		}

		public float NUM_BATHS;

		public float getNUM_BATHS() {
			return this.NUM_BATHS;
		}

		public String TYPE;

		public String getTYPE() {
			return this.TYPE;
		}

		public String STATUS;

		public String getSTATUS() {
			return this.STATUS;
		}

		public int DATA_SOURCE_ID;

		public int getDATA_SOURCE_ID() {
			return this.DATA_SOURCE_ID;
		}

		public int ZIP_CODE;

		public int getZIP_CODE() {
			return this.ZIP_CODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.PROP_NAME == null) ? 0 : this.PROP_NAME
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.PROP_NAME == null) {
				if (other.PROP_NAME != null)
					return false;
			} else if (!this.PROP_NAME.equals(other.PROP_NAME))
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.ID = this.ID;
			other.UUID = this.UUID;
			other.PROP_NAME = this.PROP_NAME;
			other.PRICE = this.PRICE;
			other.SQFT = this.SQFT;
			other.DESCRIPTION = this.DESCRIPTION;
			other.NUM_BEDS = this.NUM_BEDS;
			other.NUM_BATHS = this.NUM_BATHS;
			other.TYPE = this.TYPE;
			other.STATUS = this.STATUS;
			other.DATA_SOURCE_ID = this.DATA_SOURCE_ID;
			other.ZIP_CODE = this.ZIP_CODE;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.PROP_NAME = this.PROP_NAME;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALONETL_getPropFinacials.length) {
					if (length < 1024
							&& commonByteArray_TALONETL_getPropFinacials.length == 0) {
						commonByteArray_TALONETL_getPropFinacials = new byte[1024];
					} else {
						commonByteArray_TALONETL_getPropFinacials = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALONETL_getPropFinacials, 0,
						length);
				strReturn = new String(
						commonByteArray_TALONETL_getPropFinacials, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALONETL_getPropFinacials) {

				try {

					int length = 0;

					this.PROP_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PROP_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ID = dis.readInt();

				this.UUID = readString(dis, ois);

				this.PRICE = dis.readFloat();

				this.SQFT = readString(dis, ois);

				this.DESCRIPTION = readString(dis, ois);

				this.NUM_BEDS = dis.readFloat();

				this.NUM_BATHS = dis.readFloat();

				this.TYPE = readString(dis, ois);

				this.STATUS = readString(dis, ois);

				this.DATA_SOURCE_ID = dis.readInt();

				this.ZIP_CODE = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ID);

				writeString(this.UUID, dos, oos);

				dos.writeFloat(this.PRICE);

				writeString(this.SQFT, dos, oos);

				writeString(this.DESCRIPTION, dos, oos);

				dos.writeFloat(this.NUM_BEDS);

				dos.writeFloat(this.NUM_BATHS);

				writeString(this.TYPE, dos, oos);

				writeString(this.STATUS, dos, oos);

				dos.writeInt(this.DATA_SOURCE_ID);

				dos.writeInt(this.ZIP_CODE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",UUID=" + UUID);
			sb.append(",PROP_NAME=" + PROP_NAME);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append(",SQFT=" + SQFT);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",NUM_BEDS=" + String.valueOf(NUM_BEDS));
			sb.append(",NUM_BATHS=" + String.valueOf(NUM_BATHS));
			sb.append(",TYPE=" + TYPE);
			sb.append(",STATUS=" + STATUS);
			sb.append(",DATA_SOURCE_ID=" + String.valueOf(DATA_SOURCE_ID));
			sb.append(",ZIP_CODE=" + String.valueOf(ZIP_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PROP_NAME, other.PROP_NAME);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row11";

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tMysqlInput_1 - inputs:() outputs:(row11,row11) |
				// target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
				// linked node: tMap_1 - inputs:(row1,row11)
				// outputs:(financed_net_yield_1__c,monthly_cash_flow_with_financing_2__c,financed_net_yield_2__c,monthly_cash_flow_with_financing_1__c,interest_rate_1__c,interest_rate_2__c,price_per_ft_c,noi_with_financing_1__c,noi_with_financing_2__c,noi__c,monthly_cash_flow__c,est_replacement_cost__c,est_replacement_cost_per_sq_ft__c,cash_net_yield__c,down_payment_1__c,down_payment_2__c,interest_payment_1__c,yearly_interest_payment_1__c,monthly_interest_payment_2__c)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct> getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tMysqlInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tMysqlInput_1) {
					conn_tMysqlInput_1 = dataSources_tMysqlInput_1.get("")
							.getConnection();
				} else {
					java.lang.Class.forName("org.gjt.mm.mysql.Driver");

					String url_tMysqlInput_1 = "jdbc:mysql://"
							+ context.talon_Server + ":" + context.talon_Port
							+ "/" + context.talon_Database + "?"
							+ context.talon_AdditionalParams;
					String dbUser_tMysqlInput_1 = context.talon_Login;
					String dbPwd_tMysqlInput_1 = context.talon_Password;
					conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
							url_tMysqlInput_1, dbUser_tMysqlInput_1,
							dbPwd_tMysqlInput_1);
				}

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT    `PROPERTY_DATA`.`ID`,    `PROPERTY_DATA`.`UUID`,    `PROPERTY_DATA`.`PROP_NAME`,    `PROPERTY_DATA`.`PRICE`,    `PROPERTY_DATA`.`SQFT`,    `PROPERTY_DATA`.`DESCRIPTION`,    `PROPERTY_DATA`.`NUM_BEDS`,    `PROPERTY_DATA`.`NUM_BATHS`,    `PROPERTY_DATA`.`TYPE`,    `PROPERTY_DATA`.`STATUS`,    `PROPERTY_DATA`.`ZIP_CODE`,    `PROPERTY_DATA`.`DATA_SOURCE_ID` FROM `PROPERTY_DATA`";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);

				java.sql.ResultSet rs_tMysqlInput_1 = stmt_tMysqlInput_1
						.executeQuery(dbquery_tMysqlInput_1);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
						.getMetaData();
				int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
						.getColumnCount();

				String tmpContent_tMysqlInput_1 = null;
				while (rs_tMysqlInput_1.next()) {
					nb_line_tMysqlInput_1++;

					if (colQtyInRs_tMysqlInput_1 < 1) {
						row11.ID = 0;
					} else {

						if (rs_tMysqlInput_1.getObject(1) != null) {
							row11.ID = rs_tMysqlInput_1.getInt(1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 2) {
						row11.UUID = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(2);
						if (tmpContent_tMysqlInput_1 != null) {
							row11.UUID = tmpContent_tMysqlInput_1;
						} else {
							row11.UUID = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 3) {
						row11.PROP_NAME = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(3);
						if (tmpContent_tMysqlInput_1 != null) {
							row11.PROP_NAME = tmpContent_tMysqlInput_1;
						} else {
							row11.PROP_NAME = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 4) {
						row11.PRICE = 0;
					} else {

						if (rs_tMysqlInput_1.getObject(4) != null) {
							row11.PRICE = rs_tMysqlInput_1.getFloat(4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 5) {
						row11.SQFT = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(5);
						if (tmpContent_tMysqlInput_1 != null) {
							row11.SQFT = tmpContent_tMysqlInput_1;
						} else {
							row11.SQFT = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 6) {
						row11.DESCRIPTION = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(6);
						if (tmpContent_tMysqlInput_1 != null) {
							row11.DESCRIPTION = tmpContent_tMysqlInput_1;
						} else {
							row11.DESCRIPTION = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 7) {
						row11.NUM_BEDS = 0;
					} else {

						if (rs_tMysqlInput_1.getObject(7) != null) {
							row11.NUM_BEDS = rs_tMysqlInput_1.getFloat(7);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 8) {
						row11.NUM_BATHS = 0;
					} else {

						if (rs_tMysqlInput_1.getObject(8) != null) {
							row11.NUM_BATHS = rs_tMysqlInput_1.getFloat(8);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 9) {
						row11.TYPE = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(9);
						if (tmpContent_tMysqlInput_1 != null) {
							row11.TYPE = tmpContent_tMysqlInput_1;
						} else {
							row11.TYPE = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 10) {
						row11.STATUS = null;
					} else {

						tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
								.getString(10);
						if (tmpContent_tMysqlInput_1 != null) {
							row11.STATUS = tmpContent_tMysqlInput_1;
						} else {
							row11.STATUS = null;
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 11) {
						row11.DATA_SOURCE_ID = 0;
					} else {

						if (rs_tMysqlInput_1.getObject(11) != null) {
							row11.DATA_SOURCE_ID = rs_tMysqlInput_1.getInt(11);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					if (colQtyInRs_tMysqlInput_1 < 12) {
						row11.ZIP_CODE = 0;
					} else {

						if (rs_tMysqlInput_1.getObject(12) != null) {
							row11.ZIP_CODE = rs_tMysqlInput_1.getInt(12);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}

					/**
					 * [tMysqlInput_1 begin ] stop
					 */
					/**
					 * [tMysqlInput_1 main ] start
					 */

					currentComponent = "tMysqlInput_1";

					tos_count_tMysqlInput_1++;

					/**
					 * [tMysqlInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_row11 main ] start
					 */

					currentComponent = "tAdvancedHash_row11";

					row11Struct row11_HashRow = new row11Struct();

					row11_HashRow.ID = row11.ID;

					row11_HashRow.UUID = row11.UUID;

					row11_HashRow.PROP_NAME = row11.PROP_NAME;

					row11_HashRow.PRICE = row11.PRICE;

					row11_HashRow.SQFT = row11.SQFT;

					row11_HashRow.DESCRIPTION = row11.DESCRIPTION;

					row11_HashRow.NUM_BEDS = row11.NUM_BEDS;

					row11_HashRow.NUM_BATHS = row11.NUM_BATHS;

					row11_HashRow.TYPE = row11.TYPE;

					row11_HashRow.STATUS = row11.STATUS;

					row11_HashRow.DATA_SOURCE_ID = row11.DATA_SOURCE_ID;

					row11_HashRow.ZIP_CODE = row11.ZIP_CODE;

					tHash_Lookup_row11.put(row11_HashRow);

					tos_count_tAdvancedHash_row11++;

					/**
					 * [tAdvancedHash_row11 main ] stop
					 */

					/**
					 * [tMysqlInput_1 end ] start
					 */

					currentComponent = "tMysqlInput_1";

				}
				rs_tMysqlInput_1.close();
				stmt_tMysqlInput_1.close();
				conn_tMysqlInput_1.close();

				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public void tFileFetch_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileFetch_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileFetch_1 begin ] start
				 */

				ok_Hash.put("tFileFetch_1", false);
				start_Hash.put("tFileFetch_1", System.currentTimeMillis());
				currentComponent = "tFileFetch_1";

				int tos_count_tFileFetch_1 = 0;

				/**
				 * [tFileFetch_1 begin ] stop
				 */
				/**
				 * [tFileFetch_1 main ] start
				 */

				currentComponent = "tFileFetch_1";

				java.io.InputStream retIS_tFileFetch_1 = null;

				org.apache.commons.httpclient.HttpClient client_tFileFetch_1 = new org.apache.commons.httpclient.HttpClient();
				client_tFileFetch_1.getHttpConnectionManager().getParams()
						.setConnectionTimeout(30000);
				client_tFileFetch_1
						.getParams()
						.setCookiePolicy(
								org.apache.commons.httpclient.cookie.CookiePolicy.DEFAULT);

				org.apache.commons.httpclient.methods.GetMethod method_tFileFetch_1 = new org.apache.commons.httpclient.methods.GetMethod(
						context.propertySourceUri);

				boolean isContinue_tFileFetch_1 = true;
				int status_tFileFetch_1;
				String finalURL_tFileFetch_1 = context.propertySourceUri;

				try { // B_01

					status_tFileFetch_1 = client_tFileFetch_1
							.executeMethod(method_tFileFetch_1);

					if (status_tFileFetch_1 != org.apache.commons.httpclient.HttpStatus.SC_OK) {
						throw new Exception("Method failed: "
								+ method_tFileFetch_1.getStatusLine());
					}

				} catch (Exception e) {

					throw (e);

				}

				if (isContinue_tFileFetch_1) {

					retIS_tFileFetch_1 = method_tFileFetch_1
							.getResponseBodyAsStream();

				} // B_01
				java.io.InputStream streamtFileFetch_1 = (java.io.InputStream) globalMap
						.get("tFileFetch_1_INPUT_STREAM");
				if (streamtFileFetch_1 != null) {
					streamtFileFetch_1.close();
				}
				globalMap.put("tFileFetch_1_INPUT_STREAM", retIS_tFileFetch_1);

				tos_count_tFileFetch_1++;

				/**
				 * [tFileFetch_1 main ] stop
				 */
				/**
				 * [tFileFetch_1 end ] start
				 */

				currentComponent = "tFileFetch_1";

				ok_Hash.put("tFileFetch_1", true);
				end_Hash.put("tFileFetch_1", System.currentTimeMillis());

				/**
				 * [tFileFetch_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileFetch_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputXML_1Process(globalMap);

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileFetch_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final getPropFinacials getPropFinacialsClass = new getPropFinacials();

		int exitCode = getPropFinacialsClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = getPropFinacials.class
					.getClassLoader().getResourceAsStream(
							"talonetl/getpropfinacials_0_2/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.propertySourceUri = (String) context
					.getProperty("propertySourceUri");
			context.key = (String) context.getProperty("key");
			try {
				context.value = routines.system.ParserUtils
						.parseTo_Float(context.getProperty("value"));
			} catch (NumberFormatException e) {
				context.value = null;
			}
			context.propUUID = (String) context.getProperty("propUUID");
			context.talon_Password = (java.lang.String) context
					.getProperty("talon_Password");
			context.talon_AdditionalParams = (String) context
					.getProperty("talon_AdditionalParams");
			context.talon_Port = (String) context.getProperty("talon_Port");
			context.talon_Database = (String) context
					.getProperty("talon_Database");
			context.talon_Server = (String) context.getProperty("talon_Server");
			context.talon_Login = (String) context.getProperty("talon_Login");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("propertySourceUri")) {
				context.propertySourceUri = (String) parentContextMap
						.get("propertySourceUri");
			}
			if (parentContextMap.containsKey("key")) {
				context.key = (String) parentContextMap.get("key");
			}
			if (parentContextMap.containsKey("value")) {
				context.value = (Float) parentContextMap.get("value");
			}
			if (parentContextMap.containsKey("propUUID")) {
				context.propUUID = (String) parentContextMap.get("propUUID");
			}
			if (parentContextMap.containsKey("talon_Password")) {
				context.talon_Password = (java.lang.String) parentContextMap
						.get("talon_Password");
			}
			if (parentContextMap.containsKey("talon_AdditionalParams")) {
				context.talon_AdditionalParams = (String) parentContextMap
						.get("talon_AdditionalParams");
			}
			if (parentContextMap.containsKey("talon_Port")) {
				context.talon_Port = (String) parentContextMap
						.get("talon_Port");
			}
			if (parentContextMap.containsKey("talon_Database")) {
				context.talon_Database = (String) parentContextMap
						.get("talon_Database");
			}
			if (parentContextMap.containsKey("talon_Server")) {
				context.talon_Server = (String) parentContextMap
						.get("talon_Server");
			}
			if (parentContextMap.containsKey("talon_Login")) {
				context.talon_Login = (String) parentContextMap
						.get("talon_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileFetch_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileFetch_1) {

			e_tFileFetch_1.printStackTrace();
			globalMap.put("tFileFetch_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : getPropFinacials");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 460417 characters generated by Talend Open Studio for Data Integration on the
 * May 28, 2013 12:09:15 PM MDT
 ************************************************************************************************/
